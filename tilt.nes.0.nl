$0000## *= 0              ; We just use * to count position in the CHR-rom, begin with zero is easy
\; TILE $00 - idle sinbad head
\;
\; 01111110
\; 12222221
\; 11211221
\; 12222221
\; 12112211
\; 01222110
\; 00111210
\; 01222210
\ .byt %01111110,%10000001,%11011001,%10000001,%10110011,%01000110,%00111010,%01000010
$0008## .byt %00000000,%01111110,%00100110,%01111110,%01001100,%00111000,%00000100,%00111100
$0010##; TILE $01 - idle sinbad body
\;
\; 12222221
\; 12222121
\; 12222111
\; 01333310
\; 01313310
\; 01313310
\; 01313310
\; 00101100
\ .byt %10000001,%10000101,%10000111,%01111110,%01111110,%01111110,%01111110,%00101100
$0018## .byt %01111110,%01111010,%01111000,%00111100,%00101100,%00101100,%00101100,%00000000
$0020##; TILE $02 - scimitar blade
\;
\; 01000010
\; 12111121
\; 01222222
\; 00122222
\; 00011222
\; 00000111
\; 00000000
\; 00000000
\ .byt %01000010,%10111101,%01000000,%00100000,%00011000,%00000111,%00000000,%00000000
$0028## .byt %00000000,%01000010,%00111111,%00011111,%00000111,%00000000,%00000000,%00000000
$0030##; TILE $03 - scimitar handle
\;
\; 00000000
\; 00010000
\; 11131000
\; 22230000
\; 21130000
\; 10010000
\; 00000000
\; 00000000
\ .byt %00000000,%00010000,%11111000,%00010000,%01110000,%10010000,%00000000,%00000000
$0038## .byt %00000000,%00000000,%00010000,%11110000,%10010000,%00000000,%00000000,%00000000
$0040##; TILE $04 to $07 - Running Sinbad 1
\;
\; Full picture layout
\; $04 $05
\; $06 $07
\ .byt %00011110,%01100010,%10000001,%10110001,%01000001,%01110011,%00111100,%00011000
$0048## .byt %00000000,%00011100,%01111110,%01001110,%00111110,%00001100,%00000011,%00000111
$0050## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%10000000,%10000000
$0058## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$0060## .byt %00010000,%00011110,%00010000,%00001111,%00011111,%00001111,%00000111,%00000000
$0068## .byt %00001111,%00000001,%00001111,%00000001,%00001110,%00000111,%00000000,%00000000
$0070## .byt %01000000,%01000000,%01000000,%11100000,%11110000,%11111000,%11111100,%00111100
$0078## .byt %10000000,%10000000,%10000000,%11000000,%01100000,%10110000,%00111000,%00000000
$0080##; TILE $08 to $0a - Running Sinbad 2
\;
\; Full picture layout
\; $08 $05
\; $09 $0a
\ .byt %00011110,%01100010,%10000001,%10110001,%01000001,%01110011,%00111100,%00010000
$0088## .byt %00000000,%00011100,%01111110,%01001110,%00111110,%00001100,%00000011,%00001111
$0090## .byt %00010000,%00010010,%00010001,%00001111,%00011111,%00111100,%00111100,%00111000
$0098## .byt %00001111,%00001101,%00001110,%00000111,%00001100,%00011000,%00011000,%00000000
$00a0## .byt %01000000,%11000000,%11000000,%11100000,%11111000,%11111000,%01110000,%00000000
$00a8## .byt %10000000,%00000000,%00000000,%11000000,%11100000,%01110000,%00000000,%00000000
$00b0##; TILE $0b to $0c - Running Sinbad 3
\;
\; Full picture layout
\; $08 $05
\; $0b $0c
\ .byt %00010100,%00011010,%00011100,%00001111,%00011111,%00011111,%00011110,%00001100
$00b8## .byt %00001011,%00000101,%00000011,%00000111,%00001101,%00001100,%00001100,%00000000
$00c0## .byt %01000000,%01000000,%11000000,%10000000,%11100000,%11110000,%11100000,%00000000
$00c8## .byt %10000000,%10000000,%00000000,%00000000,%10000000,%11100000,%00000000,%00000000
$00d0##; TILE $0d - Solid 1
\;
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\ .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$00d8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$00e0##; TILE $0e - Solid 2
\;
\; 22222222
\; 22222222
\; 22222222
\; 22222222
\; 22222222
\; 22222222
\; 22222222
\; 22222222
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$00e8## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$00f0##; TILE $0f - Vertical scimitar blade
\;
\; 00000010
\; 00000121
\; 00001210
\; 00012210
\; 00012210
\; 00122210
\; 00122221
\; 00122210
\ .byt %00000010,%00000101,%00001010,%00010010,%00010010,%00100010,%00100001,%00100010
$00f8## .byt %00000000,%00000010,%00000100,%00001100,%00001100,%00011100,%00011110,%00011100
$0100##; TILE $10 - Vertical scimitar handle
\;
\; 00122100
\; 00012100
\; 00012100
\; 00133310
\; 00000000
\; 00000000
\; 00000000
\; 00000000
\ .byt %00100100,%00010100,%00010100,%00111110,%00000000,%00000000,%00000000,%00000000
$0108## .byt %00011000,%00001000,%00001000,%00011100,%00000000,%00000000,%00000000,%00000000
$0110##; TILE $11 to $12 - Angled scimitar
\;
\; Full picture layout
\; $11
\; $12
\ .byt %01000000,%01000000,%10100000,%10100000,%10010000,%10001100,%10000010,%01000100
$0118## .byt %00000000,%00000000,%01000000,%01000000,%01100000,%01110000,%01111100,%00111000
$0120## .byt %00100011,%00011011,%00000110,%00000010,%00000000,%00000000,%00000000,%00000000
$0128## .byt %00011100,%00000111,%00000010,%00000000,%00000000,%00000000,%00000000,%00000000
$0130##; TILE $13 to $16 - Side tilt Sinbad 1
\;
\; Full picture layout
\; $13 $14
\; $15 $16
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000001,%00000010
$0138## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000001
$0140## .byt %01111000,%10100100,%10010010,%11000001,%10000001,%11000110,%00111000,%00001000
$0148## .byt %00000000,%01011000,%01101100,%00111110,%01111110,%00111000,%11000000,%11110000
$0150## .byt %00000100,%00000100,%00001111,%00001111,%00001111,%00000111,%00000011,%00000001
$0158## .byt %00000011,%00000011,%00000111,%00000110,%00000101,%00000001,%00000001,%00000000
$0160## .byt %00001000,%00010000,%00010000,%11100000,%11100000,%11000000,%11000000,%10000000
$0168## .byt %11110000,%11100000,%11100000,%11000000,%10000000,%10000000,%10000000,%00000000
$0170##; TILE $17 to $18 - Side tilt Sinbad 2
\;
\; Full picture layout
\; $17
\; $18
\ .byt %00111100,%01000010,%10110001,%10000001,%10000001,%01100011,%10011101,%10000001
$0178## .byt %00000000,%00111100,%01001110,%01111110,%01111110,%00011100,%01100010,%01111110
$0180## .byt %01100001,%01010001,%01000001,%01000011,%00111111,%01111111,%11111110,%01101100
$0188## .byt %00011110,%00101110,%00111110,%00111110,%00010110,%00110110,%01101100,%00000000
$0190##; TILE $19 to $1b - Side tilt Sinbad 3
\;
\; Full picture layout
\; $19 $1a
\;     $1b
\ .byt %00000001,%00000010,%00000100,%00001010,%00001100,%00001000,%00000100,%00000011
$0198## .byt %00000000,%00000001,%00000011,%00000101,%00000011,%00000111,%00000011,%00000000
$01a0## .byt %11000000,%00100000,%00100000,%00100000,%00100000,%00100000,%01010000,%10001000
$01a8## .byt %00000000,%11000000,%11000000,%11000000,%11000000,%11000000,%10100000,%01110000
$01b0## .byt %10000100,%10000100,%11100100,%10011100,%01111100,%11111110,%11111111,%01011110
$01b8## .byt %01111000,%01111000,%00011000,%01111000,%00111000,%01100100,%01011110,%00000000
$01c0##; TILE $1c to $1f - Rolled Sinbad
\;
\; Full picture layout
\; $1c $1d
\; $1e $1f
\ .byt %00000000,%00000000,%00000001,%00111110,%01000000,%10011000,%10000001,%01111110
$01c8## .byt %00000000,%00000000,%00000000,%00000001,%00111111,%01100111,%01111110,%00000001
$01d0## .byt %00000000,%00000000,%11100000,%00011000,%10000100,%10000010,%10000010,%01110001
$01d8## .byt %00000000,%00000000,%00000000,%11100000,%01111000,%01111100,%01111100,%10001110
$01e0## .byt %11111111,%01111111,%00111111,%00001111,%00000011,%00000000,%00000000,%00000000
$01e8## .byt %01111110,%00111111,%00001100,%00000011,%00000000,%00000000,%00000000,%00000000
$01f0## .byt %11111111,%11111111,%11111111,%11111110,%11111100,%00000000,%00000000,%00000000
$01f8## .byt %01111110,%11110110,%00001110,%11111100,%00000000,%00000000,%00000000,%00000000
$0200##; TILE $20 to $23 - Rolled Sinbad head down
\;
\; Full picture layout
\; $21 $23
\; $20 $22
\ .byt %00100010,%00010001,%00010001,%00010101,%00010101,%00010001,%00001001,%00000110
$0208## .byt %00011101,%00001110,%00001110,%00001010,%00001010,%00001110,%00000110,%00000000
$0210## .byt %00000001,%00000110,%00001000,%00010000,%00010001,%00100001,%00100001,%00101110
$0218## .byt %00000000,%00000001,%00000111,%00001111,%00001110,%00011110,%00011110,%00010001
$0220## .byt %11111000,%11111000,%11110000,%11110000,%11100000,%11100000,%11000000,%10000000
$0228## .byt %01010000,%11010000,%11100000,%11100000,%11000000,%11000000,%10000000,%00000000
$0230## .byt %11100000,%11110000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000
$0238## .byt %00000000,%11100000,%11110000,%10110000,%11010000,%11010000,%11010000,%01010000
$0240##; TILE $24 to $25 - Angled down scimitar
\;
\; Full picture layout
\; $24 $25
\ .byt %00000000,%00000010,%00000101,%00000100,%00001000,%00110000,%11000001,%00111110
$0248## .byt %00000000,%00000000,%00000010,%00000011,%00000111,%00001111,%00111110,%00000000
$0250## .byt %11000000,%11110000,%00100000,%01000000,%01000000,%10000000,%00000000,%00000000
$0258## .byt %01000000,%01100000,%11000000,%10000000,%10000000,%00000000,%00000000,%00000000
$0260##; TILES $26 to $2d - Power flames
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000001
$0268## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000001
$0270## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000010,%00000000
$0278## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000010,%00000000
$0280## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000010,%00000011
$0288## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000010,%00000011
$0290## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000100,%00000110,%00000011
$0298## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000100,%00000110,%00000011
$02a0## .byt %00000000,%00000001,%00001000,%00000010,%00000100,%00001100,%00001110,%00000111
$02a8## .byt %00000000,%00000001,%00001000,%00000010,%00000100,%00001100,%00001110,%00000111
$02b0## .byt %00000000,%00000100,%00000001,%00010010,%00000110,%00000110,%00000110,%00000011
$02b8## .byt %00000000,%00000100,%00000001,%00010010,%00000110,%00000110,%00000110,%00000011
$02c0## .byt %00001000,%01000000,%00000000,%00010100,%10011000,%00011100,%00011110,%00101111
$02c8## .byt %00001000,%01000000,%00000000,%00010100,%10011000,%00011100,%00011110,%00101111
$02d0## .byt %00100101,%10001000,%00011000,%00011101,%01011100,%00011110,%00001110,%00000111
$02d8## .byt %00100101,%10001000,%00011000,%00011101,%01011100,%00011110,%00001110,%00000111
$02e0##; TILES $2e and $2f - Landing Sinbad 1
\;
\; Full picture layout
\; $2e
\; $2f
\ .byt %00000000,%01111110,%10000001,%11011001,%10000001,%10110011,%01000110,%00111010
$02e8## .byt %00000000,%00000000,%01111110,%00100110,%01111110,%01001100,%00111000,%00000100
$02f0## .byt %01000010,%01001001,%01000111,%01111111,%11111110,%11111110,%01111111,%00100111
$02f8## .byt %00111100,%00110110,%00111000,%00111110,%01101100,%01011100,%00100110,%00000000
$0300##; TILES $30 and $31 - Landing Sinbad 2
\;
\; Full picture layout
\; $30
\; $31
\ .byt %00000000,%00000000,%01111110,%10000001,%11011001,%10000001,%10110011,%01000110
$0308## .byt %00000000,%00000000,%00000000,%01111110,%00100110,%01111110,%01001100,%00111000
$0310## .byt %00111010,%00100001,%01001001,%01000110,%11111111,%11111110,%11111111,%01100111
$0318## .byt %00000100,%00011110,%00110110,%00111000,%01101110,%01011100,%01100110,%00000000
$0320##; TILES $32 to $35 - Thrown Sinbad 1
\;
\; Full picture layout
\; $32 $33
\; $34 $35
\ .byt %00000000,%00000000,%00001110,%00010001,%00100001,%01010001,%01100001,%01000001
$0328## .byt %00000000,%00000000,%00000000,%00001110,%00011110,%00101110,%00011110,%00111110
$0330## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11000000,%00110000
$0338## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11000000
$0340## .byt %00100010,%00011100,%00000010,%00000100,%00000011,%00000000,%00000000,%00000000
$0348## .byt %00011101,%00000011,%00000001,%00000011,%00000000,%00000000,%00000000,%00000000
$0350## .byt %00001000,%00000100,%00000100,%10011100,%01111110,%01111110,%00111111,%00011110
$0358## .byt %11110000,%11111000,%11111000,%01111000,%00110100,%00110100,%00011110,%00000000
$0360##; TILES $36 and $37 - Crashed Sinbad
\;
\; Full picture layout
\; $36 $37
\ .byt %00011100,%00100010,%01000011,%10100010,%11000011,%10000100,%01001000,%00110111
$0368## .byt %00000000,%00011100,%00111100,%01011101,%00111100,%01111011,%00110111,%00000000
$0370## .byt %00000000,%00000000,%11111000,%00011100,%01011110,%10011110,%00011111,%11111111
$0378## .byt %00000000,%00000000,%00000000,%11111000,%10101100,%01110100,%11111110,%00000000
$0380##; TILES $38 to $3b - Thrown Sinbad 2
\;
\; Full picture layout
\; $38 $39
\; $3a $3b
\ .byt %00000000,%00000111,%00001010,%00010100,%00100000,%00100000,%00100000,%00011111
$0388## .byt %00000000,%00000000,%00000101,%00001011,%00011111,%00011111,%00011111,%00000000
$0390## .byt %00000000,%00000000,%10000000,%01000000,%01000000,%01010000,%10101000,%00001000
$0398## .byt %00000000,%00000000,%00000000,%10000000,%10000000,%10000000,%01010000,%11110000
$03a0## .byt %00000010,%00000010,%00000001,%00000001,%00000000,%00000000,%00000000,%00000000
$03a8## .byt %00000001,%00000001,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$03b0## .byt %00010000,%00001100,%00001110,%00011111,%10011111,%01111111,%00001111,%00000010
$03b8## .byt %11100000,%11110000,%11111100,%11111110,%01110010,%00001110,%00000010,%00000000
$03c0##; TILE $3c - Jumping Sinbad 2
\;
\; Full picture layout
\; $17
\; $3c
\ .byt %01100010,%01010010,%01000001,%00111111,%00111111,%00111111,%00011111,%00001110
$03c8## .byt %00011100,%00101100,%00111110,%00011110,%00010110,%00010110,%00001010,%00000000
$03d0##; TILES $3d to $3e - Jumping Sinbad 3
\;
\; Full picture layout
\; $3d
\; $3e
\ .byt %01111000,%10100100,%10010010,%11000001,%10000001,%11000111,%01111010,%10010010
$03d8## .byt %00000000,%01011000,%01101100,%00111110,%01111110,%00111000,%00000100,%01101100
$03e0## .byt %10010100,%10000100,%10000010,%01111110,%01111110,%01111110,%00111110,%00011100
$03e8## .byt %01101000,%01111000,%01111100,%00111100,%00101100,%00101100,%00001100,%00000000
$03f0##; TILE $3f - Left arrow
\;
\; 00001000
\; 00011000
\; 01111000
\; 11111000
\; 01111000
\; 00011000
\; 00001000
\; 00000000
\ .byt %00001000,%00011000,%01111000,%11111000,%01111000,%00011000,%00001000,%00000000
$03f8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$0400##; TILES $40 to $42 - Crashing Sinbad 1
\;
\; Full picture layout
\; $40 $41 $42 $40
\;              `--horizontaly mirrored
\ .byt %00000000,%00000000,%01000100,%01100110,%01010110,%00101101,%00010100,%00001000
$0408## .byt %00000000,%00000000,%01000100,%01100110,%01110110,%00111111,%00011111,%00001111
$0410## .byt %00000000,%00000000,%00011100,%00100011,%01000011,%11100111,%10100110,%00011000
$0418## .byt %00000000,%00000000,%00000000,%00011101,%00111101,%01011101,%11111111,%11111111
$0420## .byt %00000000,%10000000,%10000000,%01000000,%01111000,%01010110,%00101011,%00000100
$0428## .byt %00000000,%10000000,%10000000,%11000000,%11000000,%11111000,%11111111,%11111111
$0430##; TILES $43 to $44 - Crashing Sinbad 2's flames
\;
\; Full picture layout
\; $43 $44 $43
\;          `--horizontaly mirrored
\ .byt %00000000,%00000000,%00000000,%10000000,%11010000,%10111000,%01010100,%00100011
$0438## .byt %00000000,%00000000,%00000000,%10000000,%11010000,%11111000,%01111100,%00111111
$0440## .byt %00000000,%00000000,%00000000,%00001000,%00010100,%00010100,%00010100,%11100011
$0448## .byt %00000000,%00000000,%00000000,%00001000,%00011100,%00011100,%00011100,%11111111
$0450##; TILES $45 to $46 - Open arms Sinbad
\;
\; Full picture layout
\; $45
\; $46
\ .byt %01111110,%10000001,%11011001,%10000001,%10110011,%01000101,%00111001,%01000010
$0458## .byt %00000000,%01111110,%00100110,%01111110,%01001100,%00111010,%00000110,%00111100
$0460## .byt %10000110,%10100010,%01000110,%01111110,%11111110,%11111110,%01111110,%01100100
$0468## .byt %01111000,%01011100,%00111100,%00111100,%01101100,%01101100,%00100100,%00000000
$0470##; TILES $47 to $48 - Joined hands Sinbad
\;
\; Full picture layout
\; $47
\; $48
\ .byt %01111110,%10000001,%11011001,%10000001,%10110010,%01000100,%00111010,%01000010
$0478## .byt %00000000,%01111110,%00100110,%01111110,%01001100,%00111000,%00000100,%00111100
$0480## .byt %10100110,%11111010,%01000110,%01111110,%11111110,%11111110,%01111110,%01100100
$0488## .byt %01011000,%00000100,%00111100,%00111100,%01101100,%01101100,%00100100,%00000000
$0490##; TILE $49 - Party hat
\;
\; 00001000
\; 00001000
\; 00013100
\; 00012100
\; 00132210
\; 00123310
\; 01322221
\; 01333321
\ .byt %00001000,%00001000,%00011100,%00010100,%00110010,%00101110,%01100001,%01111101
$0498## .byt %00000000,%00000000,%00001000,%00001000,%00011100,%00011100,%00111110,%00111110
$04a0##; TILES $4a to 4b - Balloon
\;
\; Full picture layout
\; $4a
\; $4b
\ .byt %00111100,%01001110,%10000011,%10000001,%01000010,%01000010,%00100100,%00011000
$04a8## .byt %00000000,%00111100,%01111110,%01111110,%00111100,%00111100,%00011000,%00000000
$04b0## .byt %00011000,%00010000,%00010000,%00001000,%00001000,%00010000,%00010000,%00001000
$04b8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$04c0##; TILE $4c - Balloon inflated
\ .byt %01111110,%10101011,%10011101,%10011101,%10101011,%10000001,%01000010,%00111100
$04c8## .byt %00000000,%01111110,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000
$04d0##; TILE $4d - Balloon popped
\ .byt %00000000,%00000000,%00000000,%00101000,%00010000,%00101000,%00000000,%00000000
$04d8## .byt %00000000,%10010010,%01010100,%00000000,%11010110,%00000000,%00101000,%01000100
$04e0##; TILES $4e to $4f - Rocket Sinbad
\;
\; Full picture layout
\; $4e
\; $4f
\ .byt %01111000,%10100100,%10010010,%11000001,%10000001,%11000110,%01111010,%10010010
$04e8## .byt %00000000,%01011000,%01101100,%00111110,%01111110,%00111000,%00000100,%01101100
$04f0## .byt %10001010,%01111111,%00011111,%00011111,%00001111,%00000111,%00000000,%00000000
$04f8## .byt %01110100,%00011010,%00001010,%00001110,%00000110,%00000000,%00000000,%00000000
$0500##; TILES $50 to $52 - Diving Sinbad
\;
\; Full picture layout
\; $50
\; $51 $52
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00011100,%00100010
$0508## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00011100
$0510## .byt %01000011,%10100010,%11000010,%10000100,%01001001,%00110111,%00000000,%00000000
$0518## .byt %00111100,%01011101,%00111101,%01111011,%00110110,%00000000,%00000000,%00000000
$0520## .byt %10000000,%01110000,%00111000,%10111110,%00011111,%10011111,%01111111,%00011011
$0528## .byt %00000000,%10000000,%11110000,%01111000,%11110110,%01110110,%00011010,%00000000
$0530##; TILE $53 - Light star
\;
\; 30000003
\; 03000030
\; 00033000
\; 00300300
\; 00300300
\; 00033000
\; 03000030
\; 30000003
\ .byt %10000001,%01000010,%00011000,%00100100,%00100100,%00011000,%01000010,%10000001
$0538## .byt %10000001,%01000010,%00011000,%00100100,%00100100,%00011000,%01000010,%10000001
$0540##; TILE $54 - Light star branch
\;
\; 30000000
\; 03000000
\; 00300000
\; 00030000
\; 00003000
\; 00000300
\; 00000030
\; 00000003
\ .byt %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001
$0548## .byt %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001
$0550##; TILES $55 to $58 - Aerial up strike Sinbad
\;
\; Full picture layout
\; $55 $56
\; $57 $58
\ .byt %00000000,%00000001,%00000001,%00000111,%00000101,%00001100,%00110010,%01000000
$0558## .byt %00000000,%00000000,%00000000,%00000000,%00000010,%00000011,%00001101,%00111111
$0560## .byt %11110000,%01001000,%00100100,%10000010,%00000010,%10001100,%01110000,%01000000
$0568## .byt %00000000,%10110000,%11011000,%01111100,%11111100,%01110000,%10000000,%10000000
$0570## .byt %11110000,%11111101,%11111110,%01111100,%00111100,%00011000,%00000000,%00000000
$0578## .byt %01111111,%01101110,%01011100,%00011000,%00011000,%00000000,%00000000,%00000000
$0580## .byt %10000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$0588## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$0590##; TILE $59 - Shield full 1
\;
\; 00000333
\; 00033222
\; 00322222
\; 03222222
\; 03222233
\; 32222300
\; 32223000
\; 32223000
\ .byt %00000111,%00011000,%00100000,%01000000,%01000011,%10000100,%10001000,%10001000
$0598## .byt %00000111,%00011111,%00111111,%01111111,%01111111,%11111100,%11111000,%11111000
$05a0##; TILE $5a - Shield full 2
\;
\; 00000333
\; 00033323
\; 00332222
\; 03222222
\; 03322232
\; 32222233
\; 33223300
\; 32222300
\ .byt %00000111,%00011101,%00110000,%01000000,%01100010,%10000011,%11001100,%10000100
$05a8## .byt %00000111,%00011111,%00111111,%01111111,%01111111,%11111111,%11111100,%11111100
$05b0##; TILE $5b - Shield partial 1
\;
\; 00000333
\; 00033222
\; 00322222
\; 03222233
\; 03222300
\; 32223000
\; 32230000
\; 32230000
\ .byt %00000111,%00011000,%00100000,%01000011,%01000100,%10001000,%10010000,%10010000
$05b8## .byt %00000111,%00011111,%00111111,%01111111,%01111100,%11111000,%11110000,%11110000
$05c0##; TILE $5c - Shield parital 2
\;
\; 00000333
\; 00033323
\; 00332222
\; 03222232
\; 03322233
\; 32223300
\; 33223000
\; 32233000
\ .byt %00000111,%00011101,%00110000,%01000010,%01100011,%10001100,%11001000,%10011000
$05c8## .byt %00000111,%00011111,%00111111,%01111111,%01111111,%11111100,%11111000,%11111000
$05d0##; TILE $5d - Shield limit 1
\;
\; 00000333
\; 00033222
\; 00322233
\; 03223300
\; 03230000
\; 32230000
\; 32300000
\; 32300000
\ .byt %00000111,%00011000,%00100011,%01001100,%01010000,%10010000,%10100000,%10100000
$05d8## .byt %00000111,%00011111,%00111111,%01111100,%01110000,%11110000,%11100000,%11100000
$05e0##; TILE $5e - Shield limit 2
\;
\; 00000333
\; 00033232
\; 00322333
\; 03233300
\; 03230000
\; 32330000
\; 32300000
\; 33300000
\ .byt %00000111,%00011010,%00100111,%01011100,%01010000,%10110000,%10100000,%11100000
$05e8## .byt %00000111,%00011111,%00111111,%01111100,%01110000,%11110000,%11100000,%11100000
$05f0##; TILE $5f - Revival platform 1
\;
\; 00011111
\; 01122222
\; 12212222
\; 12211111
\; 13310000
\; 33330000
\; 03300000
\; 00000000
\ .byt %00011111,%01100000,%10010000,%10011111,%11110000,%11110000,%01100000,%00000000
$05f8## .byt %00000000,%00011111,%01101111,%01100000,%01100000,%11110000,%01100000,%00000000
$0600##; TILE $60 - Revival platform 2
\;
\; 00011111
\; 01122222
\; 12212222
\; 12211111
\; 13310000
\; 03000000
\; 00000000
\; 00000000
\ .byt %00011111,%01100000,%10010000,%10011111,%11110000,%01000000,%00000000,%00000000
$0608## .byt %00000000,%00011111,%01101111,%01100000,%01100000,%01000000,%00000000,%00000000
$0610## .dsb $1000-*,0
$1000##; Building the project
\;  xa tilt.asm -C -o tilt.nes
\ .asc "NES",$1a        ; iNES magic
\; TILE $00 - Full backdrop color
\;
\; 00000000
\; 00000000
\; 00000000
\; 00000000
\; 00000000
\; 00000000
\; 00000000
\; 00000000
\ .byt $00,$00,$00,$00,$00,$00,$00,$00
$1004## .byt 1              ; PRG section occupies 1*16KiB memory
$1005## .byt 1              ; CHR section occupies 1* 8KiB memory
$1006## .byt %00000000              ; Flags 6 - mapper 0, horizontal mirroring, no trainer, no persistent memory
$1007## .byt 0              ; Flags 7 - mapper 0, not NES 2.0, not PlayChoice10, not VS unisystem
$1008## .byt 0              ; Size of PRG-RAM
\ .byt $00,$00,$00,$00,$00,$00,$00,$00
$1009## .byt %00000001              ; Flags 9 - PAL
$100a## .byt 0              ;
$100b## .byt 0              ;
$100c## .byt 0              ; Unused in iNES
$100d## .byt 0              ;
$100e## .byt 0              ;
$100f## .byt 0              ;
$1010##; PPU registers
\;  http
\
\PPUCTRL=$2000
\PPUMASK=$2001
\PPUSTATUS=$2002
\OAMADDR=$2003
\OAMDATA=$2004
\PPUSCROLL=$2005
\PPUADDR=$2006
\PPUDATA=$2007
\OAMDMA=$4014
\; APU registers
\;  http
\
\APU_SQUARE1_ENVELOPE=$4000
\APU_SQUARE1_PERIOD=$4001
\APU_SQUARE1_TIMER_LOW=$4002
\APU_SQUARE1_LENGTH_CNT=$4003
\APU_TRIANGLE_LINEAR_CNT=$4008
\APU_TRIANGLE_TIMER_LOW=$400a
\APU_TRIANGLE_LENGTH_CNT=$400b
\APU_NOISE_ENVELOPE=$400c
\APU_NOISE_PERIOD=$400e
\APU_NOISE_LENGTH_CNT=$400f
\APU_DMC_FLAGS=$4010
\APU_STATUS=$4015
\APU_FRAMECNT=$4017
\; Controller ports
\CONTROLLER_A=$4016
\CONTROLLER_B=$4017
\;
\; INGAME labels
\;
\; State of the player's character
\;  May take any value from PLAYER_STATE_XXX constants
\player_a_state=$00
\player_b_state=$01
\; $02 free
\player_a_hitstun=$03
\player_b_hitstun=$04
\player_a_x=$05
\player_b_x=$06
\player_a_y=$07
\player_b_y=$08
\player_a_direction=$09           ; 0 - watching left
\player_b_direction=$0a           ; 1 - watching right
\player_a_velocity_v=$0b
\player_b_velocity_v=$0c
\player_a_velocity_h=$0d
\player_b_velocity_h=$0e
\player_a_state_field1=$0f
\player_b_state_field1=$10
\player_a_state_field2=$11
\player_b_state_field2=$12
\player_a_animation=$13
\player_b_animation=$15
\player_a_anim_clock=$17
\player_b_anim_clock=$18
\player_a_hurtbox_left=$19
\player_b_hurtbox_left=$1a
\player_a_hurtbox_right=$1b
\player_b_hurtbox_right=$1c
\player_a_hurtbox_top=$1d
\player_b_hurtbox_top=$1e
\player_a_hurtbox_bottom=$1f
\player_b_hurtbox_bottom=$20
\player_a_hitbox_left=$21
\player_b_hitbox_left=$22
\player_a_hitbox_right=$23
\player_b_hitbox_right=$24
\player_a_hitbox_top=$25
\player_b_hitbox_top=$26
\player_a_hitbox_bottom=$27
\player_b_hitbox_bottom=$28
\player_a_hitbox_enabled=$29           ; 0 - hitbox disabled
\player_b_hitbox_enabled=$2a           ; 1 - hitbox enabled
\player_a_hitbox_force_v=$2b
\player_b_hitbox_force_v=$2c
\player_a_hitbox_force_h=$2d
\player_b_hitbox_force_h=$2e
\player_a_hitbox_damages=$2f
\player_b_hitbox_damages=$30
\player_a_damages=$31
\player_b_damages=$32
\player_a_x_low=$33
\player_b_x_low=$34
\player_a_y_low=$35
\player_b_y_low=$36
\player_a_velocity_v_low=$37
\player_b_velocity_v_low=$38
\player_a_velocity_h_low=$39
\player_b_velocity_h_low=$3a
\player_a_hitbox_force_v_low=$3b
\player_b_hitbox_force_v_low=$3c
\player_a_hitbox_force_h_low=$3d
\player_b_hitbox_force_h_low=$3e
\player_a_hitbox_base_knock_up_v_high=$3f
\player_b_hitbox_base_knock_up_v_high=$40
\player_a_hitbox_base_knock_up_h_high=$41
\player_b_hitbox_base_knock_up_h_high=$42
\player_a_hitbox_base_knock_up_v_low=$43
\player_b_hitbox_base_knock_up_v_low=$44
\player_a_hitbox_base_knock_up_h_low=$45
\player_b_hitbox_base_knock_up_h_low=$46
\player_a_animation_direction=$47
\player_b_animation_direction=$48
\player_a_num_aerial_jumps=$49
\player_b_num_aerial_jumps=$4a
\player_a_stocks=$4b
\player_b_stocks=$4c
\player_a_gravity=$4d
\player_b_gravity=$4e
\screen_shake_counter=$70
\screen_shake_nextval=$71
\;
\; TITLE labels
\;
\title_cheatstate=$00
\;
\; CONFIG labels
\;
\config_selected_option=$00
\config_music_enabled=$01
\;
\; GAMEOVER labels
\;
\gameover_winner=$00
\gameover_balloon0_x=$50
\gameover_balloon1_x=$51
\gameover_balloon2_x=$52
\gameover_balloon3_x=$53
\gameover_balloon4_x=$54
\gameover_balloon5_x=$55
\gameover_balloon0_x_low=$56
\gameover_balloon1_x_low=$57
\gameover_balloon2_x_low=$58
\gameover_balloon3_x_low=$59
\gameover_balloon4_x_low=$5a
\gameover_balloon5_x_low=$5b
\gameover_balloon0_y=$5c
\gameover_balloon1_y=$5d
\gameover_balloon2_y=$5e
\gameover_balloon3_y=$5f
\gameover_balloon4_y=$60
\gameover_balloon5_y=$61
\gameover_balloon0_y_low=$62
\gameover_balloon1_y_low=$63
\gameover_balloon2_y_low=$64
\gameover_balloon3_y_low=$65
\gameover_balloon4_y_low=$66
\gameover_balloon5_y_low=$67
\gameover_balloon0_velocity_h=$68
\gameover_balloon1_velocity_h=$69
\gameover_balloon2_velocity_h=$6a
\gameover_balloon3_velocity_h=$6b
\gameover_balloon4_velocity_h=$6c
\gameover_balloon5_velocity_h=$6d
\gameover_random=$4e
\;
\; Audio engine labels
\;
\audio_square1_counter=$d0
\audio_square1_note_counter=$d1
\audio_square2_counter=$d2
\audio_square2_note_counter=$d3
\audio_triangle_counter=$d4
\audio_triangle_note_counter=$d5
\audio_channel_mode=$d6
\audio_square1_track=$d7
\audio_square2_track=$d9
\audio_triangle_track=$db
\audio_duty=$dd
\audio_music_enabled=$de
\;
\; Global labels
\;
\controller_a_btns=$e0
\controller_b_btns=$e1
\controller_a_last_frame_btns=$e2
\controller_b_last_frame_btns=$e3
\global_game_state=$e4
\; State of the NMI processing
\;  $00 - NMI processed
\;  $01 - Waiting for the next NMI to be processed
\nmi_processing=$e5
\scroll_x=$e6
\scroll_y=$e7
\ppuctrl_val=$e8
\config_initial_stocks=$e9
\config_ai_enabled=$ea
\tmpfield1=$f0
\tmpfield2=$f1
\tmpfield3=$f2
\tmpfield4=$f3
\tmpfield5=$f4
\tmpfield6=$f5
\tmpfield7=$f6
\tmpfield8=$f7
\tmpfield9=$f8
\tmpfield10=$f9
\tmpfield11=$fa
\tmpfield12=$fb
\tmpfield13=$fc
\tmpfield14=$fd
\tmpfield15=$fe
\oam_mirror=$0200
\nametable_buffers=$0300
\ *= $c000              ; $C000 is where the PRG rom is mapped in CPU space, so code position is relative to it
\; TILE $01 - Solid 1
\;
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\; 11111111
\ .byt $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
$1018## .byt $00,$00,$00,$00,$00,$00,$00,$00
$1020##; TILE $02 - Solid 2
\ .byt $00,$00,$00,$00,$00,$00,$00,$00
$1028## .byt $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
$1030##; TILE $03 - Solid 3
\ .byt $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
$1038## .byt $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
$1040##; TILE $04 to $13 - Tree from http
\
\; Author - Matt Hackett of Lost Decade Games
\;
\; Full picture layout
\
\; $04 $05 $06 $07
\; $08 $09 $0a $0b
\; $0c $0d $0e $0f
\; $10 $11 $12 $13
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000001,%00000111,%00001111
$1048## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000001,%00000110,%00001000
$1050## .byt %00000000,%00000000,%00000000,%00001111,%01111111,%11111111,%11111111,%11111111
$1058## .byt %00000000,%00000000,%00000000,%00001111,%01110000,%10001110,%00110001,%11001111
$1060## .byt %00000000,%00000000,%00000000,%00011111,%11111111,%11111111,%11111111,%11111111
$1068## .byt %00000000,%00000000,%00000000,%00011111,%11100000,%10000000,%11111100,%00000011
$1070## .byt %00000000,%00000000,%00000000,%10000000,%11000000,%11100000,%11110000,%11111000
$1078## .byt %00000000,%00000000,%00000000,%10000000,%01000000,%00100000,%10110000,%01001000
$1080## .byt %00011111,%00011111,%00011111,%00011111,%00111111,%01111111,%01111111,%00111111
$1088## .byt %00010001,%00010010,%00010010,%00010001,%00110000,%01001111,%01000000,%00100000
$1090## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1098## .byt %00000010,%00000100,%00001101,%01010010,%10100010,%01000010,%10000101,%10000111
$10a0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$10a8## .byt %00000000,%11111101,%00000010,%11000001,%00110000,%00001000,%00000111,%00000100
$10b0## .byt %11111000,%11111100,%11111100,%11111110,%11111110,%11111110,%11111100,%11111110
$10b8## .byt %10101000,%00010100,%00001100,%00001010,%10010010,%10100010,%10100100,%01101010
$10c0## .byt %00011111,%00011111,%00111111,%00111111,%01111111,%01111111,%01111111,%01111111
$10c8## .byt %00011111,%00010100,%00101000,%00101000,%01000100,%01000011,%01000000,%01000000
$10d0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$10d8## .byt %11101000,%00010000,%00010001,%01110001,%01010010,%10001100,%00000010,%10000011
$10e0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$10e8## .byt %11111000,%10000100,%01000010,%01000100,%00110100,%01001011,%01000000,%10100000
$10f0## .byt %11111100,%11111110,%11111110,%11111110,%11111100,%11111100,%11111100,%11111100
$10f8## .byt %00010100,%00001010,%00001010,%00001010,%00110100,%01010100,%10010100,%10100100
$1100## .byt %00111111,%00001100,%00000000,%00000000,%00000000,%00000000,%10000001,%11000011
$1108## .byt %00110011,%00001100,%00000000,%00000000,%00000000,%00000000,%00000001,%00000011
$1110## .byt %11111111,%11111111,%01111011,%00100000,%01000000,%10000000,%00000000,%10000000
$1118## .byt %10000010,%10000100,%01111111,%00111111,%01111111,%11111111,%11111111,%11111111
$1120## .byt %11011111,%11000011,%10000010,%00000001,%00000001,%00000000,%00000000,%00000011
$1128## .byt %01111110,%01111111,%11111110,%11111111,%11111111,%11111111,%11111111,%11111111
$1130## .byt %11111000,%10000000,%00000000,%00000000,%00000000,%11000000,%00100000,%11110001
$1138## .byt %01111000,%10000000,%00000000,%00000000,%00000000,%11000000,%11100000,%11110000
$1140##; TILE $14 to $1e - Numeric font
\;
\; Available characters, in order
\
\; "0123456789%"
\ .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1148## .byt %11111111,%11000011,%10011001,%10011101,%10011101,%10011001,%11000011,%11111111
$1150## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1158## .byt %11111111,%11111011,%11110011,%11100011,%10010011,%11110011,%11110111,%11111111
$1160## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1168## .byt %11111111,%10000011,%00111001,%10011001,%11110011,%11000111,%10000001,%11111111
$1170## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1178## .byt %11111111,%10000011,%00111001,%10011001,%11110011,%10011001,%11000011,%11111111
$1180## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1188## .byt %11111111,%11110011,%11100111,%11001111,%10010011,%11000001,%11110011,%11111111
$1190## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1198## .byt %11111111,%00000001,%00111001,%00111111,%00000011,%11111001,%00000011,%11111111
$11a0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$11a8## .byt %11111111,%11000011,%00011001,%00111111,%00000011,%00111001,%10000011,%11111111
$11b0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$11b8## .byt %11111111,%10000011,%00111001,%11110011,%10000011,%11100111,%11101111,%11111111
$11c0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$11c8## .byt %11111111,%11000011,%10011001,%10010011,%11000011,%11001001,%11100011,%11111111
$11d0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$11d8## .byt %11111111,%10000011,%00111001,%10011001,%11000001,%11111001,%10000011,%11111111
$11e0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$11e8## .byt %11111111,%10111001,%01010011,%10100111,%11001011,%11000101,%10011011,%11111111
$11f0##; TILES $1f to $22 - Ground stones
\; Pattern
\;  $1f $20
\;  $21 $22
\ .byt %11111111,%11110000,%11101111,%11110000,%10000000,%10000000,%10000000,%11000001
$11f8## .byt %00000000,%00001111,%00011111,%00111111,%01111111,%01111111,%01111111,%00111110
$1200## .byt %11100011,%11011101,%11000010,%01100000,%01110001,%11001111,%10110111,%10000011
$1208## .byt %00011100,%00111110,%10111111,%10011111,%10001110,%00110000,%01111000,%01111100
$1210## .byt %11100011,%11111111,%11000111,%10111111,%10000001,%11000001,%11100011,%11111111
$1218## .byt %00011100,%00000000,%00111000,%01111100,%01111110,%00111110,%00011100,%00000000
$1220## .byt %11000011,%11100111,%11111111,%10111011,%01000101,%00000001,%10000011,%11111111
$1228## .byt %00111100,%00011000,%00000000,%01111100,%11111110,%11111110,%01111100,%00000000
$1230##; TILES $23 to $24 - Upper grass
\ .byt %00000000,%00000010,%00000001,%00001001,%01000000,%00010110,%00100000,%10000000
$1238## .byt %00000000,%00000000,%00000010,%00000010,%00001011,%01001001,%01011111,%01111111
$1240## .byt %00000000,%00000000,%00010000,%00000000,%10100100,%00000000,%01001010,%00000000
$1248## .byt %00000000,%00000000,%00000000,%00010000,%00010000,%10110100,%10110100,%11111111
$1250##; TILES $25 to $26 - Under grass
\ .byt %00000000,%00000000,%10001100,%10100110,%11000110,%11111111,%11111111,%11111111
$1258## .byt %11111111,%11111111,%01110011,%11011101,%11111111,%11101111,%11111111,%11111111
$1260## .byt %00000000,%00000000,%00001000,%00011001,%00011101,%10011111,%10111111,%11111111
$1268## .byt %11111111,%11111111,%11110111,%11101110,%11101011,%01111101,%11011111,%11111111
$1270##; TILES $27 to 2a - Sinbad portrait
\; Pattern
\;  $27 $28
\;  $29 $2a
\ .byt %00000011,%00000111,%11001111,%10101111,%01011100,%01000101,%00110011,%11100011
$1278## .byt %00000000,%00000000,%00000000,%01000000,%00100011,%00111010,%00001101,%00011101
$1280## .byt %11100000,%11110000,%11111000,%11111100,%00000100,%10000100,%11101110,%11111110
$1288## .byt %00000000,%00000000,%00000000,%00000000,%11111000,%01111000,%10010100,%11001100
$1290## .byt %00101001,%01010000,%01010001,%00100001,%00100001,%00010010,%00001000,%00000111
$1298## .byt %00010110,%00101111,%00101110,%00011110,%00011110,%00001101,%00000111,%00000000
$12a0## .byt %11101110,%10000010,%11000111,%11000111,%11111111,%00000001,%00000010,%11111100
$12a8## .byt %00010000,%01111100,%10111010,%10111010,%00000000,%11111110,%11111100,%00000000
$12b0##; TILES 2b to 32 - Cloud
\; Pattern
\;  $2b $2c $2d $2e
\;  $2f $30 $31 $32
\ .byt %00000000,%00000000,%00000000,%00000000,%00001100,%00011111,%01110011,%11100110
$12b8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00001100,%00011001
$12c0## .byt %00000000,%00000000,%00000000,%00011101,%01111111,%11100010,%10001100,%00010010
$12c8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00011101,%01110011,%11101101
$12d0## .byt %00001110,%01111111,%11110001,%10000000,%00110011,%01001000,%00010010,%00101000
$12d8## .byt %00000000,%00000000,%00001110,%01111111,%11001100,%10110111,%11101101,%11010111
$12e0## .byt %00000000,%10000000,%11000000,%01110000,%00111100,%10001110,%01100011,%10010000
$12e8## .byt %00000000,%00000000,%00000000,%10000000,%11000000,%01110000,%10011100,%01101110
$12f0## .byt %00001001,%00111111,%00011100,%00000000,%00000000,%00000000,%00000000,%00000000
$12f8## .byt %01110110,%00111111,%00011100,%00000000,%00000000,%00000000,%00000000,%00000000
$1300## .byt %00000011,%11111111,%01111100,%00000000,%00000000,%00000000,%00000000,%00000000
$1308## .byt %11111111,%11111111,%01111100,%00000000,%00000000,%00000000,%00000000,%00000000
$1310## .byt %00001111,%11111111,%11110000,%00000000,%00000000,%00000000,%00000000,%00000000
$1318## .byt %11111111,%11111111,%11110000,%00000000,%00000000,%00000000,%00000000,%00000000
$1320## .byt %00011100,%11111000,%11100000,%00000000,%00000000,%00000000,%00000000,%00000000
$1328## .byt %11111100,%11111000,%11100000,%00000000,%00000000,%00000000,%00000000,%00000000
$1330##; TILES $33 to $36 - Ground stones #2
\ .byt %11111111,%11000111,%10111011,%10000101,%10000001,%10000001,%11000000,%11000000
$1338## .byt %00000000,%00111000,%01111100,%01111110,%01111110,%01111110,%00111111,%00111111
$1340## .byt %11111111,%11111111,%11000111,%10110011,%10001011,%10000111,%11001111,%11111111
$1348## .byt %00000000,%00000000,%00111000,%01111100,%01111100,%01111000,%00110000,%00000000
$1350## .byt %11100001,%11110011,%11111111,%11000011,%10011001,%11000101,%11110011,%11111111
$1358## .byt %00011110,%00001100,%00000000,%00111100,%01111110,%00111110,%00001100,%00000000
$1360## .byt %10000001,%00111100,%01000010,%00000001,%10000011,%11111111,%11111111,%11111111
$1368## .byt %01111110,%11111111,%11111111,%11111110,%01111100,%00000000,%00000000,%00000000
$1370##; TILES $37 to $50 - Alphabetical font
\ .byt %00000000,%00111100,%01100110,%11000110,%11110110,%11111110,%11000110,%01000010
$1378## .byt %11111111,%11000011,%10011001,%00111001,%00001001,%00000001,%00111001,%10111101
$1380## .byt %00000000,%01111100,%11000110,%11110110,%11111100,%11000110,%11100110,%01011100
$1388## .byt %11111111,%10000011,%00111001,%00001001,%00000011,%00111001,%00011001,%10100011
$1390## .byt %00000000,%00111000,%01111100,%11100110,%11000000,%11000000,%01100110,%00111100
$1398## .byt %11111111,%11000111,%10000011,%00011001,%00111111,%00111111,%10011001,%11000011
$13a0## .byt %00000000,%11111000,%11001100,%11000110,%11000110,%11000110,%11100100,%10111000
$13a8## .byt %11111111,%00000111,%00110011,%00111001,%00111001,%00111001,%00011011,%01000111
$13b0## .byt %00000000,%01111100,%11000110,%11000000,%11110000,%11000000,%01100000,%00111100
$13b8## .byt %11111111,%10000011,%00111001,%00111111,%00001111,%00111111,%10011111,%11000011
$13c0## .byt %00000000,%01111100,%11000110,%11000000,%11110000,%11111000,%11000000,%01000000
$13c8## .byt %11111111,%10000011,%00111001,%00111111,%00001111,%00000111,%00111111,%10111111
$13d0## .byt %00000000,%00111100,%01100110,%11000000,%11011110,%11000110,%01100110,%00111100
$13d8## .byt %11111111,%11000011,%10011001,%00111111,%00100001,%00111001,%10011001,%11000011
$13e0## .byt %00000000,%11000110,%11000110,%11110110,%11111110,%11000110,%11000110,%01000010
$13e8## .byt %11111111,%00111001,%00111001,%00001001,%00000001,%00111001,%00111001,%10111101
$13f0## .byt %00000000,%10000000,%01111110,%00011000,%00110000,%00110000,%10110000,%01111110
$13f8## .byt %11111111,%01111111,%10000001,%11100111,%11001111,%11001111,%01001111,%10000001
$1400## .byt %00000000,%11000000,%01111110,%00011000,%00011000,%10001100,%11001100,%01111000
$1408## .byt %11111111,%00111111,%10000001,%11100111,%11100111,%01110011,%00110011,%10000111
$1410## .byt %00000000,%01100000,%01100110,%11001100,%11111000,%11110000,%11011000,%10011100
$1418## .byt %11111111,%10011111,%10011001,%00110011,%00000111,%00001111,%00100111,%01100011
$1420## .byt %00000000,%00110000,%01110000,%01100000,%11000000,%11000000,%11000110,%01111100
$1428## .byt %11111111,%11001111,%10001111,%10011111,%00111111,%00111111,%00111001,%10000011
$1430## .byt %00000000,%01000100,%11101110,%11111110,%11010110,%11000110,%11000110,%01000010
$1438## .byt %11111111,%10111011,%00010001,%00000001,%00101001,%00111001,%00111001,%10111101
$1440## .byt %00000000,%11000010,%11100110,%11110110,%11011110,%11001110,%11001110,%01000100
$1448## .byt %11111111,%00111101,%00011001,%00001001,%00100001,%00110001,%00110001,%10111011
$1450## .byt %00000000,%00111100,%01100110,%01100110,%11000110,%11001110,%11001100,%01110000
$1458## .byt %11111111,%11000011,%10011001,%10011001,%00111001,%00110001,%00110011,%10001111
$1460## .byt %00000000,%11111100,%01100110,%11100110,%11110110,%11011100,%11000000,%01000000
$1468## .byt %11111111,%00000011,%10011001,%00011001,%00001001,%00100011,%00111111,%10111111
$1470## .byt %00000000,%00111100,%01100110,%01100110,%11011010,%11001100,%11001100,%01110110
$1478## .byt %11111111,%11000011,%10011001,%10011001,%00100101,%00110011,%00110011,%10001001
$1480## .byt %00000000,%00111100,%01100110,%11000110,%11111100,%11011000,%11001100,%01000110
$1488## .byt %11111111,%11000011,%10011001,%00111001,%00000011,%00100111,%00110011,%10111001
$1490## .byt %00000000,%00111100,%01100110,%01100000,%00111000,%10001100,%11001100,%01111000
$1498## .byt %11111111,%11000011,%10011001,%10011111,%11000111,%01110011,%00110011,%10000111
$14a0## .byt %00000000,%11111100,%01111110,%00011000,%00011000,%00011000,%00011000,%00001000
$14a8## .byt %11111111,%00000011,%10000001,%11100111,%11100111,%11100111,%11100111,%11110111
$14b0## .byt %00000000,%00100010,%01100110,%01100110,%11000110,%11000110,%01100110,%00111100
$14b8## .byt %11111111,%11011101,%10011001,%10011001,%00111001,%00111001,%10011001,%11000011
$14c0## .byt %00000000,%10000010,%11000110,%11001100,%11001100,%01001000,%00101000,%00010000
$14c8## .byt %11111111,%01111101,%00111001,%00110011,%00110011,%10110111,%11010111,%11101111
$14d0## .byt %00000000,%10000100,%11000110,%11010110,%11010110,%11110110,%01111110,%00101100
$14d8## .byt %11111111,%01111011,%00111001,%00101001,%00101001,%00001001,%10000001,%11010011
$14e0## .byt %00000000,%01000110,%01101100,%00111000,%00110000,%00111000,%01101100,%11000100
$14e8## .byt %11111111,%10111001,%10010011,%11000111,%11001111,%11000111,%10010011,%00111011
$14f0## .byt %00000000,%01000010,%11000110,%01101100,%00111000,%00011000,%00011000,%00010000
$14f8## .byt %11111111,%10111101,%00111001,%10010011,%11000111,%11100111,%11100111,%11101111
$1500## .byt %00000000,%11111100,%01111110,%00001100,%00011000,%01110000,%11000010,%01111110
$1508## .byt %11111111,%00000011,%10000001,%11110011,%11100111,%10001111,%00111101,%10000001
$1510##; TILES $51 to $dc - Title
\;
\; Full picture layout
\; 00 00 00 00 51 52 53
\; 00 00 00 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f 60 61 00 00 00
\; 00 00 00 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 00 00 00
\; 00 00 00 70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 00 00 00
\; 00 00 00 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 00 00 00
\; 8c 8d 8e 8f 00 00 00 00 00 00 90 91 92 93 00 00 00 00 00 00
\; 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f a0 a1 a2 a3 a4 a5 a6 00
\; 00 a7 a8 a9 aa ab ac ad ae af b0 b1 b2 b3 b4 b5 b6 b7 b8 00
\; 00 b9 ba bb bc bd be bf c0 00 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca
\; 00 cb cc cd ce cf d0 d1 d2 00 d3 d4 d5 d6 d7 d8 d9 da db dc
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00001111,%00111111,%11111000
$1518## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00001111,%00111111
$1520## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%11111000,%11111111,%00001111
$1528## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111000,%11111111
$1530## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%10000000,%11000000
$1538## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%10000000
$1540## .byt %00000001,%00000011,%00000111,%00000110,%00000110,%00001110,%00001101,%00001101
$1548## .byt %00000000,%00000001,%00000011,%00000011,%00000011,%00000111,%00000110,%00000110
$1550## .byt %11100111,%10011111,%01111110,%11111001,%11111011,%11110111,%11110111,%11110111
$1558## .byt %11111000,%11100000,%10000001,%00000111,%00000111,%00001111,%00001111,%00001111
$1560## .byt %11110000,%11111111,%00011111,%11100111,%11110111,%11110111,%11111000,%11111111
$1568## .byt %00001111,%00000000,%11100000,%11111000,%11111000,%11111000,%11111111,%11111111
$1570## .byt %11100000,%01100000,%01111111,%01111111,%01110000,%01101111,%11101111,%11110111
$1578## .byt %11000000,%11000000,%11100000,%11111111,%11111111,%11110000,%11110000,%11111000
$1580## .byt %00000000,%00000000,%11110000,%11111111,%00011111,%11101111,%11101111,%10011111
$1588## .byt %00000000,%00000000,%00000000,%11110000,%11111111,%00011111,%00011111,%01111111
$1590## .byt %00000000,%00000000,%11111111,%11111111,%10000001,%01111110,%01111110,%10011001
$1598## .byt %00000000,%00000000,%00000000,%11111111,%11111111,%10000001,%10000001,%11100111
$15a0## .byt %00000000,%00000000,%11111111,%11111111,%10000000,%01111111,%01111111,%10011110
$15a8## .byt %00000000,%00000000,%00000000,%11111111,%11111111,%10000000,%10000000,%11100001
$15b0## .byt %00000000,%00000000,%11110000,%11111111,%00011111,%11100001,%11111110,%00001111
$15b8## .byt %00000000,%00000000,%00000000,%11110000,%11111111,%00011111,%00000001,%11110000
$15c0## .byt %00000000,%00000000,%00011111,%11111111,%11110000,%11101111,%01101111,%10110011
$15c8## .byt %00000000,%00000000,%00000000,%00011111,%11111111,%11110000,%11110000,%01111100
$15d0## .byt %00000000,%00000000,%11111111,%11111111,%00000000,%11111111,%11111111,%11000000
$15d8## .byt %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00111111
$15e0## .byt %00000000,%00000000,%11111111,%11111111,%00001100,%11110011,%11110011,%00110100
$15e8## .byt %00000000,%00000000,%00000000,%11111111,%11111111,%00001100,%00001100,%11001111
$15f0## .byt %00000000,%00000000,%11111111,%11111111,%00000000,%11111111,%11111111,%11110000
$15f8## .byt %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00001111
$1600## .byt %00000000,%00000000,%10000000,%11111000,%11111110,%00001111,%11110011,%01111101
$1608## .byt %00000000,%00000000,%00000000,%10000000,%11111000,%11111110,%00001111,%10000011
$1610## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%10000000,%10000000
$1618## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$1620## .byt %00001101,%00001110,%00000110,%00000110,%00000111,%00000011,%00000001,%00000000
$1628## .byt %00000110,%00000111,%00000011,%00000011,%00000011,%00000001,%00000000,%00000000
$1630## .byt %11110111,%11111011,%11111101,%11111110,%01111111,%10111111,%11001111,%11110011
$1638## .byt %00001111,%00000111,%00000011,%00000001,%10000000,%11000000,%11110000,%01111100
$1640## .byt %11111111,%11111111,%11111111,%00111111,%11001111,%11110011,%11111101,%11111110
$1648## .byt %11111111,%11111111,%11111111,%11111111,%00111111,%00001111,%00000011,%00000001
$1650## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$1658## .byt %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000
$1660## .byt %10111111,%10111111,%10111111,%10111111,%10111111,%10111111,%10111111,%10111111
$1668## .byt %01111111,%01111111,%01111111,%01111111,%01111111,%01111111,%01111111,%01111111
$1670## .byt %11011011,%11011011,%11011011,%11011011,%11011011,%11011011,%11011011,%11011011
$1678## .byt %11100111,%11100111,%11100111,%11100111,%11100111,%11100111,%11100111,%11100111
$1680## .byt %11011110,%11011110,%11011110,%11011110,%11011110,%11011110,%11011110,%11011110
$1688## .byt %11100001,%11100001,%11100001,%11100001,%11100001,%11100001,%11100001,%11100001
$1690## .byt %11110111,%11111011,%11111011,%11111011,%11111011,%11111011,%11111011,%00000111
$1698## .byt %11111000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111000
$16a0## .byt %11011011,%11101011,%11101011,%11101011,%11101011,%11101011,%11011011,%10111011
$16a8## .byt %00111100,%00011100,%00011100,%00011100,%00011100,%00011100,%00111100,%01111100
$16b0## .byt %11011111,%11011111,%11011111,%11011111,%11011111,%11011111,%11011110,%11000001
$16b8## .byt %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111110
$16c0## .byt %10110110,%11010110,%11101110,%11111110,%11111110,%11111110,%11111110,%01111110
$16c8## .byt %11001111,%11101111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$16d0## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110000
$16d8## .byt %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$16e0## .byt %10111101,%11011110,%11011111,%11011111,%11011111,%11011110,%11011110,%00111101
$16e8## .byt %11000011,%11100001,%11100000,%11100000,%11100000,%11100001,%11100001,%11000011
$16f0## .byt %11000000,%11100000,%01100000,%01100000,%01100000,%11100000,%11000000,%11000000
$16f8## .byt %10000000,%11000000,%11000000,%11000000,%11000000,%11000000,%10000000,%10000000
$1700## .byt %00000000,%00000000,%00000011,%00000111,%00001110,%00001101,%00001101,%00001101
$1708## .byt %00000000,%00000000,%00000000,%00000011,%00000111,%00000110,%00000110,%00000110
$1710## .byt %01111100,%00111111,%11111111,%11111111,%00111111,%11011111,%11011111,%11011111
$1718## .byt %00011111,%00011111,%00011111,%11111111,%11111111,%00111111,%00111111,%00111111
$1720## .byt %11111111,%00111111,%11001111,%11101111,%11110111,%11110111,%11110111,%11110111
$1728## .byt %00000000,%11000000,%11110000,%11110000,%11111000,%11111000,%11111000,%11111000
$1730## .byt %01110111,%10110111,%10110111,%11010111,%11010111,%11010111,%11011011,%11011011
$1738## .byt %11111000,%01111000,%01111000,%00111000,%00111000,%00111000,%00111100,%00111100
$1740## .byt %10111111,%10111111,%10111111,%10111111,%10111111,%10111111,%10011111,%11011111
$1748## .byt %01111111,%01111111,%01111111,%01111111,%01111111,%01111111,%01111111,%00111111
$1750## .byt %11011011,%11011011,%11011011,%11011011,%11011011,%11011011,%11011011,%10011011
$1758## .byt %11100111,%11100111,%11100111,%11100111,%11100111,%11100111,%11100111,%11100111
$1760## .byt %11011111,%11011111,%11011110,%11011110,%11011110,%11011110,%11011110,%11011110
$1768## .byt %11100000,%11100000,%11100001,%11100001,%11100001,%11100001,%11100001,%11100001
$1770## .byt %11111111,%11111110,%00000001,%11111111,%11111111,%11111111,%11111111,%11111111
$1778## .byt %00000000,%00000001,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1780## .byt %01111011,%11111011,%11111011,%11111011,%11111011,%11111011,%11111011,%11111011
$1788## .byt %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
$1790## .byt %11111111,%11111111,%11000001,%11011101,%11011110,%11011111,%11011111,%11011111
$1798## .byt %00000000,%00000000,%00111110,%00111110,%00111111,%00111111,%00111111,%00111111
$17a0## .byt %01111110,%01111110,%01111110,%01111110,%11111110,%11111110,%11111110,%11111110
$17a8## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$17b0## .byt %11111111,%11111111,%11110001,%11110101,%11110101,%11110110,%11110111,%11110111
$17b8## .byt %00000000,%00000000,%00001110,%00001110,%00001110,%00001111,%00001111,%00001111
$17c0## .byt %11111011,%11100111,%11101110,%11101110,%11101110,%11110111,%01111011,%01111011
$17c8## .byt %00000111,%00011110,%00011100,%00011100,%00011100,%00001110,%10000110,%10000111
$17d0## .byt %10000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%10000000
$17d8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$17e0## .byt %00001101,%00001101,%00001110,%00000111,%00000011,%00000001,%00000000,%00000000
$17e8## .byt %00000110,%00000110,%00000111,%00000011,%00000001,%00000000,%00000000,%00000000
$17f0## .byt %11011111,%11101111,%11110000,%01111111,%10011111,%11100000,%11111111,%00111111
$17f8## .byt %00111111,%00011111,%00001111,%10000000,%11100000,%11111111,%00111111,%00000000
$1800## .byt %11101111,%11011111,%00111111,%11111110,%11111001,%00000111,%11111111,%11111100
$1808## .byt %11110000,%11100000,%11000000,%00000001,%00000111,%11111111,%11111100,%00000000
$1810## .byt %10111011,%10111011,%01111101,%11111110,%11000111,%10000011,%00000001,%00000000
$1818## .byt %01111100,%01111100,%11111110,%11000111,%10000011,%00000001,%00000000,%00000000
$1820## .byt %11011111,%11001111,%11100000,%11111111,%01111111,%10000000,%11111111,%11111111
$1828## .byt %00111111,%00111111,%00011111,%00000000,%10000000,%11111111,%11111111,%00000000
$1830## .byt %10110111,%00110111,%01101111,%11101111,%10011111,%01111111,%11110001,%11000000
$1838## .byt %11001111,%11001111,%10011111,%00011111,%01111111,%11110001,%11000000,%00000000
$1840## .byt %11011110,%11011110,%10011110,%01111111,%01111111,%10000000,%11111111,%11111111
$1848## .byt %11100001,%11100001,%11100001,%10000000,%10000000,%11111111,%11111111,%00000000
$1850## .byt %11111111,%11111111,%01111111,%10111111,%10111111,%01111111,%11100000,%11000000
$1858## .byt %11111111,%11111111,%11111111,%01111111,%01111111,%11100000,%11000000,%00000000
$1860## .byt %11111011,%11111011,%11110011,%11101111,%11101111,%11110000,%00111111,%00011111
$1868## .byt %11111100,%11111100,%11111100,%11110000,%11110000,%00111111,%00011111,%00000000
$1870## .byt %11011111,%11011111,%11000000,%11111111,%11111111,%00000000,%11111111,%11111111
$1878## .byt %00111111,%00111111,%00111111,%00000000,%00000000,%11111111,%11111111,%00000000
$1880## .byt %11100110,%11011010,%00011000,%11111011,%11110011,%00001100,%11111111,%11111111
$1888## .byt %11111111,%11100111,%11100111,%00000100,%00001100,%11111111,%11111111,%00000000
$1890## .byt %11110111,%11110111,%11110011,%11111101,%11111101,%00000011,%11111111,%11111110
$1898## .byt %00001111,%00001111,%00001111,%00000011,%00000011,%11111111,%11111110,%00000000
$18a0## .byt %10111101,%10111110,%11011110,%11101111,%11101111,%11110000,%11111111,%00011111
$18a8## .byt %11000011,%11000001,%11100001,%11110000,%11110000,%11111111,%00011111,%00000000
$18b0## .byt %11100000,%11110000,%00111000,%11011000,%11011000,%00111000,%11110000,%11100000
$18b8## .byt %10000000,%11100000,%11110000,%00110000,%00110000,%11110000,%11100000,%00000000
$18c0## .byt %00000000,%00000000,%00000000,%00000011,%00000111,%00001110,%00001101,%00001101
$18c8## .byt %00000000,%00000000,%00000000,%00000000,%00000011,%00000111,%00000110,%00000110
$18d0## .byt %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%11111111,%11111111
$18d8## .byt %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000
$18e0## .byt %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%11111111,%11111111
$18e8## .byt %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000
$18f0## .byt %00000000,%00000000,%00000000,%11110000,%11111000,%00011100,%11101110,%11110110
$18f8## .byt %00000000,%00000000,%00000000,%00000000,%11110000,%11111000,%00011100,%00001100
$1900## .byt %00000000,%00000000,%00000000,%00001111,%00011111,%00111000,%00110111,%00110111
$1908## .byt %00000000,%00000000,%00000000,%00000000,%00001111,%00011111,%00011000,%00011000
$1910## .byt %00000000,%00000000,%00000000,%11111110,%11111111,%00000011,%11111100,%11111111
$1918## .byt %00000000,%00000000,%00000000,%00000000,%11111110,%11111111,%00000011,%00000000
$1920## .byt %00000000,%00000000,%00000000,%00000000,%11111000,%11111110,%00001111,%11110011
$1928## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%11111000,%11111110,%00001111
$1930## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%10000000
$1938## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$1940## .byt %00011101,%00011011,%00011011,%00011011,%00011100,%00001111,%00000111,%00000000
$1948## .byt %00001110,%00001100,%00001100,%00001100,%00001111,%00000111,%00000000,%00000000
$1950## .byt %11111111,%10000001,%01111101,%01111101,%11101101,%11001101,%10001101,%00001101
$1958## .byt %00000000,%01111110,%11111110,%11000110,%11000110,%10000110,%00000110,%00000110
$1960## .byt %11111111,%11110000,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$1968## .byt %00000000,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$1970## .byt %11110111,%01110111,%10110000,%10111111,%11001111,%11110001,%11111101,%11111101
$1978## .byt %00001100,%10001111,%11001111,%11000000,%11110000,%11111110,%11111110,%11111110
$1980## .byt %11111111,%11111111,%00001100,%11110011,%11110011,%11101100,%11101110,%11101110
$1988## .byt %00000000,%11111111,%11111111,%00001100,%00001100,%00011111,%00011111,%00011111
$1990## .byt %11111100,%11111110,%00000111,%11111011,%11111011,%11110111,%11110111,%11110111
$1998## .byt %00000000,%11111100,%11111110,%00000111,%00000111,%00001111,%00001111,%00001111
$19a0## .byt %00000001,%00000011,%10001111,%11111110,%11111110,%11111101,%11111101,%11111101
$19a8## .byt %00000000,%00000001,%00000011,%10001111,%11111111,%11111110,%11111110,%11111110
$19b0## .byt %11111111,%11111111,%00000000,%11111111,%11111111,%11000011,%10111011,%10111011
$19b8## .byt %00000000,%11111111,%11111111,%00000000,%00000000,%00111100,%01111100,%01111100
$19c0## .byt %11111111,%11111111,%00000000,%11111111,%11111111,%11000001,%11011101,%11011101
$19c8## .byt %00000000,%11111111,%11111111,%00000000,%00000000,%00111110,%00111110,%00110110
$19d0## .byt %11000000,%11100000,%01110000,%10110000,%10110000,%10110000,%10110000,%10110000
$19d8## .byt %00000000,%11000000,%11100000,%01100000,%01100000,%01100000,%01100000,%01100000
$19e0## .byt %00110111,%00111001,%00011101,%00001101,%00001101,%00001101,%00001101,%00001101
$19e8## .byt %00011000,%00011110,%00001110,%00000110,%00000110,%00000110,%00000110,%00000110
$19f0## .byt %11111111,%11110000,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$19f8## .byt %00000000,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$1a00## .byt %11111101,%00111110,%10111110,%11011111,%11011111,%11011111,%11011111,%11011111
$1a08## .byt %00000011,%11000001,%11000001,%11100000,%11100000,%11100000,%11100000,%11100000
$1a10## .byt %11011111,%11111111,%11110000,%01101111,%01101111,%01110011,%01111011,%01111011
$1a18## .byt %10000000,%10011111,%11111111,%11110000,%11110000,%11111100,%11111100,%11111100
$1a20## .byt %11111110,%11111111,%00000011,%11111100,%11111111,%11000001,%11011110,%11011111
$1a28## .byt %00000000,%11111110,%11111111,%00000011,%00000000,%00111110,%00111111,%00111111
$1a30## .byt %00000000,%11100000,%11111000,%00111100,%11001110,%11110110,%11110111,%01111011
$1a38## .byt %00000000,%00000000,%11100000,%11111000,%00111100,%00001100,%00001110,%10000111
$1a40## .byt %00000011,%00001111,%00011110,%00111001,%01110111,%11101111,%11011110,%11011110
$1a48## .byt %00000000,%00000011,%00001111,%00011110,%00111000,%01110000,%01100001,%11100001
$1a50## .byt %11111100,%11111111,%00000111,%11111001,%11111110,%00000111,%11111011,%11111011
$1a58## .byt %00000000,%11111100,%11111111,%00000111,%00000001,%11111000,%11111100,%11111100
$1a60## .byt %00000000,%00000000,%11000000,%11100000,%01110000,%10110000,%10111000,%11011000
$1a68## .byt %00000000,%00000000,%00000000,%11000000,%11100000,%01100000,%01110000,%00110000
$1a70## .byt %00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00001101
$1a78## .byt %00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00000110
$1a80## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$1a88## .byt %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$1a90## .byt %11111101,%11111101,%11111101,%11111101,%11111101,%11111101,%11111101,%11111101
$1a98## .byt %11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110
$1aa0## .byt %11101110,%11101110,%11101110,%11101110,%11101110,%11101110,%11101110,%11101110
$1aa8## .byt %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
$1ab0## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$1ab8## .byt %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$1ac0## .byt %11111110,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1ac8## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1ad0## .byt %01111011,%11111011,%11111011,%11111011,%11111011,%11111011,%11111011,%11111011
$1ad8## .byt %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
$1ae0## .byt %11011110,%11011111,%11011011,%11011000,%11011000,%11011000,%11011000,%11011000
$1ae8## .byt %00110111,%00110011,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000
$1af0## .byt %01110000,%11100000,%11000000,%00000000,%00000000,%00000000,%00000000,%00000000
$1af8## .byt %11100000,%11000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$1b00## .byt %00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00001101
$1b08## .byt %00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00000110
$1b10## .byt %11110111,%11110111,%11110000,%11111111,%11111111,%11110000,%11110111,%11110111
$1b18## .byt %00001111,%00001111,%00001111,%00000000,%00000000,%00001111,%00001111,%00001111
$1b20## .byt %11011111,%10111110,%01111110,%11111001,%11111110,%00111111,%11011111,%11101111
$1b28## .byt %11100000,%11000001,%10000001,%00000111,%00000001,%11000000,%11100000,%11110000
$1b30## .byt %01111011,%11111011,%11111011,%11111011,%11111011,%01111011,%10111011,%10111011
$1b38## .byt %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%01111100,%01111100
$1b40## .byt %11011111,%11011111,%11011111,%11011111,%11011111,%11000000,%11111111,%11111111
$1b48## .byt %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00000000,%00000000
$1b50## .byt %01111101,%01111101,%01111101,%01111011,%01111011,%11110111,%11101111,%10011111
$1b58## .byt %10000011,%10000011,%10000011,%10000111,%10000111,%00001111,%00011111,%01111111
$1b60## .byt %10111101,%10111101,%10111101,%10111101,%01111011,%01111011,%01111011,%01111011
$1b68## .byt %11000011,%11000011,%11000011,%11000011,%10000111,%10000111,%10000111,%10000111
$1b70## .byt %11111101,%11111101,%11111101,%11111101,%11111101,%11111101,%11111101,%11111101
$1b78## .byt %11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110
$1b80## .byt %11011100,%11101100,%11101100,%11101100,%11101100,%11101100,%11101100,%11101100
$1b88## .byt %00111000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000
$1b90## .byt %00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00011101
$1b98## .byt %00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00001110
$1ba0## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$1ba8## .byt %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$1bb0## .byt %11111101,%11111101,%11111101,%11111101,%11111101,%11111101,%11111101,%11111101
$1bb8## .byt %11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110
$1bc0## .byt %11101110,%11101110,%11101110,%11101110,%11101110,%11101110,%11101110,%11101110
$1bc8## .byt %00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111,%00011111
$1bd0## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$1bd8## .byt %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$1be0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111001,%11110110
$1be8## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111001
$1bf0## .byt %11111011,%11111011,%11111011,%11111011,%11111011,%11111011,%11111011,%11111011
$1bf8## .byt %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
$1c00## .byt %11011000,%11011000,%11011000,%11011000,%11011000,%11011000,%11011000,%11011100
$1c08## .byt %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00111000
$1c10## .byt %00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00001101,%00011101
$1c18## .byt %00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00000110,%00001110
$1c20## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11110111
$1c28## .byt %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
$1c30## .byt %11110111,%11110111,%11110111,%11110111,%11110111,%11110111,%11101111,%11011111
$1c38## .byt %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11110000,%11100000
$1c40## .byt %11011011,%11011011,%11011011,%11011011,%11011011,%11011011,%10111011,%10111011
$1c48## .byt %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%01111100,%01111100
$1c50## .byt %11000111,%11010111,%11010111,%11011011,%11011101,%11011101,%11011110,%11011110
$1c58## .byt %00111000,%00111000,%00111000,%00111100,%00111110,%00111110,%00111111,%00111111
$1c60## .byt %10111111,%10111111,%10111111,%11011111,%11101111,%11101111,%11110111,%11111011
$1c68## .byt %01111111,%01111111,%01111111,%00111111,%00011111,%00011111,%00001111,%00000111
$1c70## .byt %01111011,%01111011,%10111101,%10111101,%10111101,%10111101,%11011101,%11011110
$1c78## .byt %10000111,%10000111,%11000011,%11000011,%11000011,%11000011,%11100011,%11100001
$1c80## .byt %11111101,%11111101,%11111101,%11111101,%11111101,%11111101,%11111011,%11111011
$1c88## .byt %11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111100,%11111100
$1c90## .byt %11101100,%11101100,%11101100,%11101100,%11101111,%11101111,%11011100,%11011011
$1c98## .byt %00011000,%00011000,%00011000,%00011000,%00011000,%00011111,%00111111,%00111100
$1ca0## .byt %00000000,%00000000,%00000000,%00000000,%10000000,%11000000,%11100000,%01110000
$1ca8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%10000000,%11000000,%11100000
$1cb0## .byt %00111001,%00110111,%00110111,%00111000,%00011111,%00001111,%00000000,%00000000
$1cb8## .byt %00011110,%00011000,%00011000,%00011111,%00001111,%00000000,%00000000,%00000000
$1cc0## .byt %11110011,%11111101,%11111101,%00000011,%11111111,%11111110,%00000000,%00000000
$1cc8## .byt %00001111,%00000011,%00000011,%11111111,%11111110,%00000000,%00000000,%00000000
$1cd0## .byt %11110001,%11101111,%11101111,%11110000,%00111111,%00011111,%00000000,%00000000
$1cd8## .byt %11111110,%11110000,%11110000,%00111111,%00011111,%00000000,%00000000,%00000000
$1ce0## .byt %11101100,%11110011,%11110011,%00001100,%11111111,%11111111,%00000000,%00000000
$1ce8## .byt %00011111,%00001100,%00001100,%11111111,%11111111,%00000000,%00000000,%00000000
$1cf0## .byt %11110000,%11111111,%11111111,%00000000,%11111111,%11111111,%00000000,%00000000
$1cf8## .byt %00001111,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000
$1d00## .byt %00000110,%11111110,%11111110,%00000001,%11111111,%11111111,%00000000,%00000000
$1d08## .byt %11111001,%00000001,%00000001,%11111111,%11111111,%00000000,%00000000,%00000000
$1d10## .byt %11110011,%11101111,%11101111,%11110000,%10111111,%00011111,%00000000,%00000000
$1d18## .byt %11111100,%11110000,%11110000,%10111111,%00011111,%00000000,%00000000,%00000000
$1d20## .byt %11001110,%11110110,%11110110,%00001110,%11111100,%11111000,%00000000,%00000000
$1d28## .byt %00111100,%00001100,%00001100,%11111100,%11111000,%00000000,%00000000,%00000000
$1d30## .byt %00111001,%00110111,%00110111,%00111000,%00011111,%00001111,%00000000,%00000000
$1d38## .byt %00011110,%00011000,%00011000,%00011111,%00001111,%00000000,%00000000,%00000000
$1d40## .byt %11110000,%11111111,%11111111,%00000000,%11111111,%11111111,%00000000,%00000000
$1d48## .byt %00001111,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000
$1d50## .byt %00111111,%11111110,%11111001,%00000111,%11111111,%11111100,%00000000,%00000000
$1d58## .byt %11000000,%00000001,%00000111,%11111111,%11111100,%00000000,%00000000,%00000000
$1d60## .byt %01110011,%11101111,%11101111,%11110000,%00111111,%00011111,%00000000,%00000000
$1d68## .byt %11111100,%11110000,%10110000,%00111111,%00011111,%00000000,%00000000,%00000000
$1d70## .byt %11001111,%11110111,%11110111,%00001111,%11111100,%11111000,%00000000,%00000000
$1d78## .byt %00111111,%00001101,%00001100,%11111100,%11111000,%00000000,%00000000,%00000000
$1d80## .byt %01111000,%10111111,%10111111,%11000000,%11111111,%01111111,%00000000,%00000000
$1d88## .byt %10000111,%11000000,%11000000,%11111111,%01111111,%00000000,%00000000,%00000000
$1d90## .byt %11101111,%01110111,%01111011,%11111100,%11001111,%10000111,%00000000,%00000000
$1d98## .byt %11110000,%11111000,%11011100,%11001111,%10000111,%00000000,%00000000,%00000000
$1da0## .byt %01110111,%10001111,%11111110,%00000001,%11111111,%11111111,%00000000,%00000000
$1da8## .byt %11111000,%01110000,%00000001,%11111111,%11111111,%00000000,%00000000,%00000000
$1db0## .byt %10110111,%01110111,%11111011,%11011100,%10001111,%00000111,%00000000,%00000000
$1db8## .byt %01111000,%11111000,%11011100,%10001111,%00000111,%00000000,%00000000,%00000000
$1dc0## .byt %10110000,%10110000,%01110000,%11100000,%11000000,%10000000,%00000000,%00000000
$1dc8## .byt %01100000,%01100000,%11100000,%11000000,%10000000,%00000000,%00000000,%00000000
$1dd0##; TILE $dd - Sibad icon
\ .byt %00111000,%01111100,%10100110,%10110110,%10001110,%10010001,%01000001,%00111110
$1dd8## .byt %00000000,%00000000,%01111100,%01111100,%01110000,%01101110,%00111110,%00000000
$1de0##; TILES $de to $f3 - Podium
\;
\; Full picture layout
\; de df e0 e1 e2 e3 e4 e5 e6 e7 00 00
\; e8 e9 ea eb ec ed ee ef f0 f1 f2 f3
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00001111,%11111111,%11111111
$1de8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00001111,%01110000
$1df0## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111
$1df8## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%00000000
$1e00## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111
$1e08## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%00000000
$1e10## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%11111000,%11111111,%11111111
$1e18## .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111000,%00000111
$1e20## .byt %00000000,%01111111,%01111111,%01111111,%01111111,%01111111,%11111111,%11111111
$1e28## .byt %00000000,%00000000,%00000000,%00111111,%00111111,%00111111,%00111111,%10111111
$1e30## .byt %11111111,%11111111,%11111111,%11111111,%11111000,%11111100,%11111111,%11110000
$1e38## .byt %00000000,%11111111,%11111111,%00000000,%11111111,%11111111,%11111111,%11111111
$1e40## .byt %11111111,%11111111,%11111111,%11111111,%01111111,%01000111,%01001111,%11111111
$1e48## .byt %00000000,%11111111,%11111111,%00000000,%11111111,%10111110,%10111100,%01111010
$1e50## .byt %11111111,%11111111,%11111111,%11111111,%11111100,%11000100,%11100101,%11111110
$1e58## .byt %00000000,%11111111,%11111111,%00000000,%11111111,%11111011,%11111011,%11111101
$1e60## .byt %11111111,%11111111,%11111111,%11111111,%00111111,%01111111,%11111111,%00011111
$1e68## .byt %00000000,%11111111,%11111111,%00000000,%11111111,%11111111,%11111111,%11111111
$1e70## .byt %00000000,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110,%11111110
$1e78## .byt %00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100
$1e80## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1e88## .byt %01111111,%01111111,%01111111,%01111111,%01111111,%01111111,%01111111,%00000000
$1e90## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1e98## .byt %11111111,%11111100,%11111111,%11111110,%11111101,%11111100,%11111111,%00000000
$1ea0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1ea8## .byt %11111111,%01111111,%10111111,%01111111,%11111111,%00111111,%11111111,%00000000
$1eb0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1eb8## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000
$1ec0## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1ec8## .byt %10111111,%10111111,%10111111,%10111111,%10111111,%10111111,%10111111,%00000000
$1ed0## .byt %11111000,%11111111,%11111001,%11110000,%11111110,%11111100,%11111110,%11111111
$1ed8## .byt %11111111,%11111110,%11111110,%11111111,%11111111,%11111111,%11111111,%00000000
$1ee0## .byt %10011111,%00111111,%11001111,%10001111,%10011111,%01111111,%11111111,%11111111
$1ee8## .byt %01111110,%11111110,%11111110,%01111110,%01111000,%10111111,%11011111,%00000000
$1ef0## .byt %11110010,%11111001,%11100111,%11100010,%11110010,%11111100,%11111110,%11111111
$1ef8## .byt %11111101,%11111110,%11111110,%11111101,%00111101,%11111011,%11110111,%00000000
$1f00## .byt %00111111,%11111111,%00111111,%00011111,%11111111,%01111111,%11111111,%11111111
$1f08## .byt %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000
$1f10## .byt %11111110,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1f18## .byt %11111100,%11111100,%11111101,%11111101,%11111101,%11111101,%11111101,%00000000
$1f20## .byt %01111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1f28## .byt %00000000,%01111111,%10000000,%11111111,%11111111,%11111111,%11111111,%00000000
$1f30## .byt %11111100,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
$1f38## .byt %00000000,%11111100,%00000010,%11111110,%11111110,%11111110,%11111110,%00000000
$1f40##; TILE $f4 - Config box left border
\;
\; 00000002
\; 00000022
\; 00000222
\; 00002222
\; 00022222
\; 00222222
\; 00222222
\; 00022222
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$1f48## .byt %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%00111111,%00011111
$1f50##; TILE $f5 - Config box right border
\;
\; 22222000
\; 22222200
\; 22222200
\; 22222000
\; 22220000
\; 22200000
\; 22000000
\; 20000000
\ .byt %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
$1f58## .byt %11111000,%11111100,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000
$1f60##; TILE $f6 - Diagonal split
\;
\; 11111111
\; 21111111
\; 22111111
\; 22211111
\; 22221111
\; 22222111
\; 22222211
\; 22222221
\ .byt %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001
$1f68## .byt %00000000,%10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110
$1f70## .dsb $2000-*,0
$c000#cursed#
\ rti 
$c001#nmi#
\ .( 
\; Save CPU registers
\ php 
$c002## pha 
$c003## txa 
$c004## pha 
$c005## tya 
$c006## pha 
$c007##; Do not draw anything if not ready
\ lda nmi_processing
$c009## beq end
$c00b##; reload PPU OAM (Objects Attributes Memory) with fresh data from cpu memory
\ lda #$00
$c00d## sta OAMADDR
$c010## lda #$02
$c012## sta OAMDMA
$c015##; Rewrite nametable based on nt_buffers
\ jsr process_nt_buffers
$c018##; Scroll
\ lda ppuctrl_val
$c01a## sta PPUCTRL
$c01d## lda PPUSTATUS
$c020## lda scroll_x
$c022## sta PPUSCROLL
$c025## lda scroll_y
$c027## sta PPUSCROLL
$c02a##; Inform that NMI is handled
\ lda #$00
$c02c## sta nmi_processing
$c02e#end#
\; Restore CPU registers
\ pla 
$c02f## tay 
$c030## pla 
$c031## tax 
$c032## pla 
$c033## plp 
$c034## rti 
$c035#reset# .) 
\
\ sei                    ; disable IRQs
$c036## cld                    ; disable decimal mode
$c037## ldx #$40
$c039## stx APU_FRAMECNT                ; disable APU frame IRQ
$c03c## ldx #$ff
$c03e## txs                    ; Set up stack
$c03f## inx                    ; now X = 0
$c040## stx PPUCTRL                ; disable NMI
$c043## stx ppuctrl_val                ;
$c045## stx PPUMASK                ; disable rendering
$c048## stx APU_DMC_FLAGS                ; disable DMC IRQs
$c04b#vblankwait1#; First wait for vblank to make sure PPU is ready
\ bit PPUSTATUS
$c04e## bpl vblankwait1
$c050#clrmem#
\ lda #$00
$c052## sta $00,x
$c054## sta $0100,x
$c057## sta $0300,x
$c05a## sta $0400,x
$c05d## sta $0500,x
$c060## sta $0600,x
$c063## sta $0700,x
$c066## lda #$fe
$c068## sta oam_mirror,x              ;move all sprites off screen
$c06b## inx 
$c06c## bne clrmem
$c06e#vblankwait2#; Second wait for vblank, PPU is ready after this
\ bit PPUSTATUS
$c071## bpl vblankwait2
$c073## jsr default_config
$c076## jsr audio_init
$c079## lda #$01
$c07b## sta global_game_state
$c07d## jsr change_global_game_state
$c080##; Setup PPU
\ lda #%10010000
$c082## sta ppuctrl_val
$c084## sta PPUCTRL
$c087## lda #%00011110
$c089## sta PPUMASK
$c08c#forever#
\ .( 
\; Call common routines to all states
\ jsr wait_next_frame
$c08f## jsr audio_music_tick
$c092## jsr fetch_controllers
$c095##; Call routines apropriation for the current game state
\ lda global_game_state
$c097## bne check_title
$c099## jsr game_tick                ; In game
$c09c## jmp forever                ;
$c09f#check_title#
\ cmp #$01
$c0a1## bne check_gamover
$c0a3## jsr title_screen_tick                ; Title screen
$c0a6## jmp forever                ;
$c0a9#check_gamover#
\ cmp #$02
$c0ab## bne check_credits
$c0ad## jsr gameover_screen_tick
$c0b0## jmp forever
$c0b3#check_credits#
\ cmp #$03
$c0b5## bne check_config
$c0b7## jsr credits_screen_tick
$c0ba## jmp forever
$c0bd#check_config#
\ jsr config_screen_tick
$c0c0## jmp forever
$c0c3#fetch_controllers# .) 
\
\ .( 
\; Fetch controllers state
\ lda #$01
$c0c5## sta CONTROLLER_A
$c0c8## lda #$00
$c0ca## sta CONTROLLER_A
$c0cd##; x will contain the controller number to fetch (0 or 1)
\ ldx #$00
$c0cf#fetch_one_controller#
\; Save previous state of the controller
\ lda controller_a_btns,x
$c0d1## sta controller_a_last_frame_btns,x
$c0d3##; Reset the controller's byte
\ lda #$00
$c0d5## sta controller_a_btns,x
$c0d7##; Fetch the controller's byte button by button
\ ldy #$08
$c0d9#next_btn#
\ lda CONTROLLER_A,x
$c0dc## lsr 
$c0dd## rol controller_a_btns,x
$c0df## dey 
$c0e0## bne next_btn
$c0e2##; Next controller
\ inx 
$c0e3## cpx #$02
$c0e5## bne fetch_one_controller
$c0e7## rts 
$c0e8#wait_next_frame# .) 
\
\ .( 
\ lda #$01
$c0ea## sta nmi_processing
$c0ec#waiting#
\ lda nmi_processing
$c0ee## bne waiting
$c0f0## rts 
$c0f1#add_to_player_velocity# .) 
\; Add a vector to the player's velocity
\;  X - player number
\;  Stack#0 - Y component of the vector to add (low byte)  ; pop first
\;  Stack#1 - Y component of the vector to add (high byte)
\;  Stack#2 - X component of the vector to add (low byte)
\;  Stack#3 - X component of the vector to add (high byte) ; push first
\
\ .( 
\; Save the return address
\ pla 
$c0f2## sta tmpfield1
$c0f4## pla 
$c0f5## sta tmpfield2
$c0f7##; Count iterations, one per vector's component
\ ldy #$00
$c0f9#add_component#
\; Add the component to the player's velocity
\ pla 
$c0fa## clc 
$c0fb## adc player_a_velocity_v_low,x
$c0fd## sta player_a_velocity_v_low,x
$c0ff## pla 
$c100## adc player_a_velocity_v,x
$c102## sta player_a_velocity_v,x
$c104##; Handle next component
\ inx 
$c105## inx 
$c106## iny 
$c107## cpy #$02
$c109## bne add_component
$c10b## dex 
$c10c## dex 
$c10d## dex 
$c10e## dex 
$c10f##; Restore return addr on stack and return
\ lda tmpfield2
$c111## pha 
$c112## lda tmpfield1
$c114## pha 
$c115## rts 
$c116#merge_to_player_velocity# .) 
\; Change the player's velocity to be closer to a vector
\;  X - player number
\;  tmpfield1 - Y component of the vector to merge (low byte)
\;  tmpfield2 - X component of the vector to merge (low byte)
\;  tmpfield3 - Y component of the vector to merge (high byte)
\;  tmpfield4 - X component of the vector to merge (high byte)
\;  tmpfield5 - Step size
\;
\; Overwrites register Y, tmpfield6, tmpfield7, tmpfield8 and tmpfield9
\
\ .( 
\merged_components_lows=tmpfield1
\merged_components_highs=tmpfield3
\step_size=tmpfield5
\player_velocity_low=tmpfield6
\player_velocity_high=tmpfield7
\current_component_low=tmpfield8
\current_component_high=tmpfield9
\; Count iterations, one per vector's component
\ ldy #$00
$c118#add_component#
\; Avoid to pass through merged velocity
\ lda player_a_velocity_v_low,x              ;
$c11a## sec                    ;
$c11b## sbc merged_components_lows,y              ; Get difference between player's velocity
$c11e## sta tmpfield8                ; component and merged component
$c120## lda player_a_velocity_v,x              ;
$c122## sbc merged_components_highs,y              ;
$c125## bpl check_diff                ;
$c127## eor #%11111111             ;
$c129## sta tmpfield9                ;
$c12b## lda tmpfield8                ;
$c12d## eor #%11111111             ; Make the difference absolute
$c12f## clc                    ;
$c130## adc #$01             ;
$c132## sta tmpfield8                ;
$c134## lda #$00             ;
$c136## adc tmpfield9                ;
$c138#check_diff#;
\ cmp #$00             ; Go add step_size if the difference is superior
$c13a## bne add_step_size                ; (or equal) than step_size
$c13c## lda tmpfield8                ;
$c13e## cmp step_size                ; Note - diference is in register A (high byte)
$c140## bcs add_step_size                ; and tmpfield8 (low byte). tmpfield9 is garbage.
$c142## lda merged_components_lows,y              ;
$c145## sta player_a_velocity_v_low,x              ; Rewrite player velocity's component with merged
$c147## lda merged_components_highs,y              ; and got to next component
$c14a## sta player_a_velocity_v,x              ;
$c14c## jmp next_component                ;
$c14f#add_step_size#; Add or substract step size from velocity component to be closer to
\; the merged component
\
\ lda player_a_velocity_v_low,x              ;
$c151## sta player_velocity_low                ;
$c153## lda player_a_velocity_v,x              ;
$c155## sta player_velocity_high                ;
$c157## lda merged_components_lows,y              ; Compare the merged vector to the current velocity
$c15a## sta current_component_low                ;
$c15c## lda merged_components_highs,y              ;
$c15f## sta current_component_high                ;
$c161## jsr signed_cmp                ;
$c164## bpl decrement                ;
$c166## lda step_size                ;
$c168## clc                    ;
$c169## adc player_a_velocity_v_low,x              ;
$c16b## sta player_a_velocity_v_low,x              ; Add step_size to velocity
$c16d## lda #$00             ;
$c16f## adc player_a_velocity_v,x              ;
$c171## sta player_a_velocity_v,x              ;
$c173## jmp next_component
$c176#decrement#
\ lda player_a_velocity_v_low,x              ;
$c178## sec                    ;
$c179## sbc step_size                ;
$c17b## sta player_a_velocity_v_low,x              ; Substract step_size from velocity
$c17d## lda player_a_velocity_v,x              ;
$c17f## sbc #$00             ;
$c181## sta player_a_velocity_v,x              ;
$c183#next_component#; Handle next component
\
\ inx 
$c184## inx 
$c185## iny 
$c186## cpy #$02
$c188## bne add_component
$c18a## dex 
$c18b## dex 
$c18c## dex 
$c18d## dex 
$c18e## rts 
$c18f#signed_cmp# .) 
\; Perform multibyte signed comparison
\;  tmpfield6 - a (low)
\;  tmpfield7 - a (high)
\;  tmpfield8 - b (low)
\;  tmpfield9 - b (high)
\;
\; Output - N flag set if "a < b", unset otherwise
\;          C flag set if "(unsigned)a < (unsigned)b", unset otherwise
\; Overwrites register A
\
\ .( 
\; Trick from http
\
\a_low=tmpfield6
\a_high=tmpfield7
\b_low=tmpfield8
\b_high=tmpfield9
\ lda a_low
$c191## cmp b_low
$c193## lda a_high
$c195## sbc b_high
$c197## bvc end
$c199## eor #%10000000
$c19b#end#
\ rts 
$c19c#absolute_a# .) 
\; Change A to its absolute unsigned value
\
\ .( 
\ cmp #$00
$c19e## bpl end
$c1a0## eor #%11111111
$c1a2## clc 
$c1a3## adc #$01
$c1a5#end#
\ rts 
$c1a6#multiply# .) 
\; Multiply tmpfield1 by tmpfield2 in tmpfield3
\;  tmpfield1 - multiplicand (low byte)
\;  tmpfield2 - multiplicand (high byte)
\;  tmpfield3 - multiplier
\;  Result stored in tmpfield4 (low byte) and tmpfield5 (high byte)
\;
\;  Overwrites register A, tmpfield4 and tmpfield5
\
\ .( 
\multiplicand_low=tmpfield1
\multiplicand_high=tmpfield2
\multiplier=tmpfield3
\result_low=tmpfield4
\result_high=tmpfield5
\; Save X, we do not want it to be altered by this subroutine
\ txa 
$c1a7## pha 
$c1a8##; Set multiplier to X to be used as a loop count
\ lda multiplier
$c1aa## tax 
$c1ab##; Initialize result's value
\ lda #$00
$c1ad## sta result_low
$c1af## sta result_high
$c1b1#additions_loop#
\; Check if we finished
\ cpx #$00
$c1b3## beq end
$c1b5##; Add multiplicand to the result
\ lda result_low
$c1b7## clc 
$c1b8## adc multiplicand_low
$c1ba## sta result_low
$c1bc## lda result_high
$c1be## adc multiplicand_high
$c1c0## sta result_high
$c1c2##; Iterate until we looped "multiplier" times
\ dex 
$c1c3## jmp additions_loop
$c1c6#end#
\; Restore X
\ pla 
$c1c7## tax 
$c1c8## rts 
$c1c9#last_nt_buffer# .) 
\; Set register X to the offset of the continuation byte of the first empty
\; nametable buffer
\;
\; Overwrites register A
\
\ .( 
\ ldx #$00
$c1cb#handle_buff#
\; Check continuation byte
\ lda nametable_buffers,x
$c1ce## beq end
$c1d0##; Point to the tiles counter
\ inx 
$c1d1## inx 
$c1d2## inx 
$c1d3##; Add tile counts to X (effectively points on the last tile)
\ txa 
$c1d4## clc 
$c1d5## adc nametable_buffers,x
$c1d8## tax 
$c1d9##; Next
\ inx 
$c1da## jmp handle_buff
$c1dd#end#
\ rts 
$c1de#reset_nt_buffers# .) 
\; Empty the list of nametable buffers
\
\ .( 
\ lda #$00
$c1e0## sta nametable_buffers
$c1e3## rts 
$c1e4#process_nt_buffers# .) 
\; Copy nametable buffers to PPU nametable
\; A nametable buffer has the following pattern
\
\;   continuation (1 byte), address (2 bytes), number of tiles (1 byte), tiles (N bytes)
\;   continuation - 1 there is a buffer, 0 work done
\;   address - address where to write in PPU address space (big endian)
\;   number of tiles - Number of tiles in this buffer
\;   tiles - One byte per tile, representing the tile number
\;
\; Overwrites register X
\
\ .( 
\ ldx #$00
$c1e6#handle_nt_buffer#
\ lda nametable_buffers,x              ; Check continuation byte
$c1e9## beq end_buffers                ;
$c1eb## inx                    ;
$c1ec## lda PPUSTATUS                ; Set PPU destination address
$c1ef## lda nametable_buffers,x              ;
$c1f2## sta PPUADDR                ;
$c1f5## inx                    ;
$c1f6## lda nametable_buffers,x              ;
$c1f9## sta PPUADDR                ;
$c1fc## inx                    ;
$c1fd## lda nametable_buffers,x              ; Save tiles counter to tmpfield1
$c200## sta tmpfield1                ;
$c202## inx                    ;
$c203#write_one_tile#
\ lda tmpfield1                ; Check if there is still a tile to write
$c205## beq handle_nt_buffer                ;
$c207## lda nametable_buffers,x              ; Write current tile to PPU
$c20a## sta PPUDATA                ;
$c20d## dec tmpfield1                ; Next tile
$c20f## inx                    ;
$c210## jmp write_one_tile                ;
$c213#end_buffers#
\ rts 
$c214#number_to_tile_indexes# .) 
\; Produce a list of three tile indexes representing a number
\;  tmpfield1 - Number to represent
\;  tmpfield2 - Destination address LSB
\;  tmpfield3 - Destionation address MSB
\;
\;  Overwrites timfield1, timpfield2, tmpfield3, tmpfield4, tmpfield5, tmpfield6
\;  and all registers.
\
\ .( 
\number=tmpfield1
\destination=tmpfield2
\coefficient=tmpfield4
\digit_value=tmpfield5
\next_multiple=tmpfield6
\; Start with a coefficient of 100 to find hundred's digit
\ lda #100
$c216## sta coefficient
$c218#find_one_digit#
\; Reset internal counters
\ lda #$00
$c21a## sta digit_value
$c21c## lda coefficient
$c21e## sta next_multiple
$c220#try_digit_value#
\; Check if next multiple value is greater than the number
\ lda number
$c222## cmp next_multiple
$c224## bcs next_digit_value
$c226##; Next multiple value is greater than the number, we found this digit
\ lda #$14             ; Store the corresponding tile number at destination
$c228## clc                    ;
$c229## adc digit_value                ;
$c22b## ldy #$00             ;
$c22d## sta (destination),y            ;
$c22f##; Keep only the modulo in number
\ lda next_multiple                ; -.
$c231## sec                    ;  | Remove one time coefficient to next_multiple, so
$c232## sbc coefficient                ;  | next_multiple equals to "digit_value * coefficient"
$c234## sta next_multiple                ; -*
$c236## lda number                ; -.
$c238## sec                    ;  | "number = number - (digit_value * coefficient)"
$c239## sbc next_multiple                ;  | That's actually the modulo of "number / coefficient"
$c23b## sta number                ; -*
$c23d## lda coefficient                ; Set next coefficient
$c23f## cmp #100             ;  100 -> 10
$c241## bne test_coeff_10                ;   10 ->  1
$c243## lda #10             ;    1 -> we found the last digit
$c245## sta coefficient                ;
$c247## jmp coefficent_changed                ;
$c24a#test_coeff_10#;
\ cmp #10             ;
$c24c## bne end                ;
$c24e## lda #1             ;
$c250## sta coefficient                ;
$c252## jmp coefficent_changed                ;
$c255#coefficent_changed#;
\ inc destination                ; Update destination address
$c257## bne destination_updated                ;
$c259## inc destination+1          ;
$c25b#destination_updated#;
\ jmp find_one_digit
$c25e#next_digit_value#; Next multiple value is lower or equal to the number,
\; increase digit value, update next_multiple and recheck
\
\ inc digit_value
$c260## lda next_multiple
$c262## clc 
$c263## adc coefficient
$c265## sta next_multiple
$c267## jmp try_digit_value
$c26a#end#
\ rts 
$c26b#switch_selected_player# .) 
\; Switch current player
\;  register X - Current player number
\;  Result is stored in register X
\
\ .( 
\ cpx #$00
$c26d## beq select_player_b
$c26f## dex 
$c270## jmp end
$c273#select_player_b#
\ inx 
$c274#end#
\ rts 
$c275#keep_input_dirty# .) 
\; Indicate that the input modification on this frame has not been consumed
\
\ .( 
\ lda controller_a_last_frame_btns,x
$c277## sta controller_a_btns,x
$c279## rts 
$c27a#dummy_routine# .) 
\; A routine doing nothing, it can be used as dummy entry in jump tables
\
\ .( 
\ rts 
$c27b#change_global_game_state# .) 
\; Effectively set the game state in the value pointed by "global_game_state"
\;
\; WARNING - This routine never returns. It changes the state then restarts the main loop.
\
\ .( 
\; Disable rendering
\ lda #$00
$c27d## sta PPUCTRL
$c280## sta PPUMASK
$c283## sta ppuctrl_val
$c285##; Clear not processed drawings
\ jsr reset_nt_buffers
$c288##; Reset scrolling
\ lda #$00
$c28a## sta scroll_x
$c28c## sta scroll_y
$c28e##; Move all sprites offscreen
\ ldx #$00
$c290#clr_sprites#
\ lda #$fe
$c292## sta oam_mirror,x              ;move all sprites off screen
$c295## inx 
$c296## bne clr_sprites
$c298##; Call the appropriate initialization routine
\ lda global_game_state
$c29a## bne check_title
$c29c## jsr init_game_state
$c29f## jmp end_initialization
$c2a2#check_title#
\ cmp #$01
$c2a4## bne check_gameover
$c2a6## jsr init_title_screen
$c2a9## jmp end_initialization
$c2ac#check_gameover#
\ cmp #$02
$c2ae## bne check_credits
$c2b0## jsr init_gameover_screen
$c2b3## jmp end_initialization
$c2b6#check_credits#
\ cmp #$03
$c2b8## bne check_config
$c2ba## jsr init_credits_screen
$c2bd## jmp end_initialization
$c2c0#check_config#
\ jsr init_config_screen
$c2c3#end_initialization#
\; Enable rendering
\ lda #%10010000
$c2c5## sta ppuctrl_val
$c2c7## sta PPUCTRL
$c2ca## lda #%00011110
$c2cc## sta PPUMASK
$c2cf##; Clear stack
\ ldx #$ff
$c2d1## txs 
$c2d2##; Go straight to the main loop
\ jmp forever
$c2d5#draw_zipped_nametable# .) 
\; Copy a compressed nametable to PPU
\;  tmpfield1 - compressed nametable address (low)
\;  tmpfield2 - compressed nametable address (high)
\;
\; Overwrites all registers, tmpfield1 and tmpfield2
\
\ .( 
\compressed_nametable=tmpfield1
\ lda PPUSTATUS
$c2d8## lda #$20
$c2da## sta PPUADDR
$c2dd## lda #$00
$c2df## sta PPUADDR
$c2e2## ldy #$00
$c2e4#load_background#
\ lda (compressed_nametable),y
$c2e6## beq opcode
$c2e8##; Standard byte, just write it to PPUDATA
\ sta PPUDATA
$c2eb## jsr next_byte
$c2ee## jmp load_background
$c2f1#opcode#; Got the opcode
\
\ jsr next_byte                ;
$c2f4## lda (compressed_nametable),y            ; Load parameter in a, if it is zero it means that
$c2f6## beq end                ; the nametable is over
$c2f8## tax                    ;
$c2f9## lda #$00             ;
$c2fb#write_one_byte#; Write 0 the number of times specified by parameter
\ sta PPUDATA                ;
$c2fe## dex                    ;
$c2ff## bne write_one_byte                ;
$c301## jsr next_byte                ; Continue reading the table
$c304## jmp load_background                ;
$c307#end#
\ rts 
$c308#next_byte#
\ .( 
\ inc compressed_nametable
$c30a## bne end_inc_vector
$c30c## inc compressed_nametable+1
$c30e#end_inc_vector#
\ rts 
$c30f#init_game_state# .) 
\ .) 
\
\ .( 
\; Clear background of nametable 2
\ .( 
\ lda #$00
$c311## sta $40
$c313## sta $41
$c315## lda PPUSTATUS
$c318## lda #$28
$c31a## sta PPUADDR
$c31d## lda #$00
$c31f## sta PPUADDR
$c322#load_background#
\ lda #$00
$c324## sta PPUDATA
$c327## inc $40
$c329## bne end_inc_vector
$c32b## inc $41
$c32d#end_inc_vector#
\ lda #$04
$c32f## cmp $41
$c331## bne load_background
$c333## lda #$00
$c335## cmp $40
$c337## bne load_background
$c339## .) 
\; Point PPU to Background palette 0 (see http
\
\ lda PPUSTATUS
$c33c## lda #$3f
$c33e## sta PPUADDR
$c341## lda #$00
$c343## sta PPUADDR
$c346##; Write palette_data in actual ppu palettes
\ ldx #$00
$c348#copy_palette#
\ lda palette_data,x
$c34b## sta PPUDATA
$c34e## inx 
$c34f## cpx #$20
$c351## bne copy_palette
$c353##; Copy background from PRG-rom to PPU nametable
\ lda #<nametable
$c355## sta tmpfield1
$c357## lda #>nametable
$c359## sta tmpfield2
$c35b## jsr draw_zipped_nametable
$c35e##; Ensure game state is zero
\ ldx #$00
$c360## lda #$00
$c362#zero_game_state#
\ sta $00,x
$c364## inx 
$c365## cpx #$d0
$c367## bne zero_game_state
$c369##; Reset screen shaking
\ sta screen_shake_counter
$c36b## lda #1
$c36d## sta screen_shake_nextval
$c36f##; Setup logical game state to the game startup configuration
\ lda #$00
$c371## sta player_b_direction
$c373## lda #$01
$c375## sta player_a_direction
$c377## lda #$00
$c379## sta player_a_hitbox_enabled
$c37b## sta player_b_hitbox_enabled
$c37d## lda #$80
$c37f## sta player_a_y
$c381## sta player_b_y
$c383## sta player_a_hurtbox_top
$c385## sta player_b_hurtbox_top
$c387## lda #$ff
$c389## sta player_a_y_low
$c38b## sta player_b_y_low
$c38d## lda #$40
$c38f## sta player_a_x
$c391## sta player_a_hurtbox_left
$c393## lda #$a0
$c395## sta player_b_x
$c397## sta player_a_hurtbox_left
$c399## lda #$88
$c39b## sta player_a_hurtbox_bottom
$c39d## sta player_b_hurtbox_bottom
$c39f## lda #$48
$c3a1## sta player_a_hurtbox_right
$c3a3## lda #$a8
$c3a5## sta player_b_hurtbox_right
$c3a7## lda #$03
$c3a9## sta player_a_gravity
$c3ab## sta player_b_gravity
$c3ad## lda config_initial_stocks
$c3af## sta player_a_stocks
$c3b1## sta player_b_stocks
$c3b3## ldx #$00
$c3b5## jsr start_standing_player
$c3b8## ldx #$01
$c3ba## jsr start_standing_player
$c3bd##; Move sprites according to the initial state
\ jsr update_sprites
$c3c0##; Change for ingame music
\ jsr audio_music_power
$c3c3## rts 
$c3c4#game_tick# .) 
\
\ .( 
\; Shake screen and do nothing until shaking is over
\ lda screen_shake_counter
$c3c6## beq no_screen_shake
$c3c8## jsr shake_screen
$c3cb## rts 
$c3cc#no_screen_shake#
\; Process AI - this override controller B state
\ lda config_ai_enabled
$c3ce## beq end_ai
$c3d0## jsr ai_tick
$c3d3#end_ai#
\; Update game state
\ jsr update_players
$c3d6##; Update screen
\ jsr update_sprites
$c3d9## rts 
$c3da#shake_screen# .) 
\
\ .( 
\; Change scrolling possition a little
\ lda screen_shake_nextval
$c3dc## eor #%11111111
$c3de## clc 
$c3df## adc #1
$c3e1## sta screen_shake_nextval
$c3e3## sta scroll_x
$c3e5## sta scroll_y
$c3e7##; Adapt screen number to Y scrolling
\;  Litle negative values are set at the end of screen 2
\ lda scroll_y
$c3e9## cmp #240
$c3eb## bcs set_screen_two
$c3ed## lda #%10010000
$c3ef## jmp set_screen
$c3f2#set_screen_two#
\ clc 
$c3f3## adc #240
$c3f5## sta scroll_y
$c3f7## lda #%10010010
$c3f9#set_screen#
\ sta ppuctrl_val
$c3fb##; Decrement screen shake counter
\ dec screen_shake_counter
$c3fd## bne end
$c3ff##; Shaking is over, reset the scrolling
\ lda #$00
$c401## sta scroll_y
$c403## sta scroll_x
$c405## lda #%10010000
$c407## sta ppuctrl_val
$c409#end#
\ rts 
$c40a#update_players# .) 
\
\ .( 
\; Remove processed nametable buffers
\ jsr reset_nt_buffers
$c40d##; Decrement hitstun counters
\ ldx #$00
$c40f#hitstun_one_player#
\ lda player_a_hitstun,x
$c411## beq hitstun_next_player
$c413## dec player_a_hitstun,x
$c415#hitstun_next_player#
\ inx 
$c416## cpx #$02
$c418## bne hitstun_one_player
$c41a##; Check hitbox collisions
\ ldx #$00
$c41c#hitbox_one_player#
\ jsr check_player_hit
$c41f## inx 
$c420## cpx #$02
$c422## bne hitbox_one_player
$c424##; Update both players
\ ldx #$00             ; player number
$c426#update_one_player#
\; Call the state update routine
\ lda #<sinbad_state_update_routines
$c428## sta tmpfield1
$c42a## lda #>sinbad_state_update_routines
$c42c## sta tmpfield2
$c42e## jsr player_state_action
$c431##; Call the state input routine if input changed
\ lda controller_a_btns,x
$c433## cmp controller_a_last_frame_btns,x
$c435## beq end_input_event
$c437## lda #<sinbad_state_input_routines
$c439## sta tmpfield1
$c43b## lda #>sinbad_state_input_routines
$c43d## sta tmpfield2
$c43f## jsr player_state_action
$c442#end_input_event#
\; Call generic update routines
\ jsr move_player
$c445## jsr check_player_position
$c448## jsr write_player_damages
$c44b## inx 
$c44c## cpx #$02
$c44e## bne update_one_player
$c450## rts 
$c451#player_state_action# .) 
\; Calls a subroutine depending on player's state
\;  register X - Player number
\;  tmpfield1 - Jump table address (low byte)
\;  tmpfield2 - Jump table address (high bute)
\
\ .( 
\jump_table=tmpfield1
\; Convert player state number to vector address (relative to table begining)
\ lda player_a_state,x              ; Y = state * 2
$c453## asl                    ; (as each element is 2 bytes long)
$c454## tay                    ;
$c455##; Push the state's routine address to the stack
\ lda (jump_table),y
$c457## pha 
$c458## iny 
$c459## lda (jump_table),y
$c45b## pha 
$c45c##; Return to the state's routine, it will itself return to player_state_action's caller
\ rts 
$c45d#check_player_hit# .) 
\
\ .( 
\current_player=tmpfield10
\opponent_player=tmpfield11
\; Store current player number
\ stx current_player
$c45f##; Check that player's hitbox is enabled
\ lda player_a_hitbox_enabled,x
$c461## bne process_checks
$c463## jmp end
$c466#process_checks#
\; Store current player's hitbox
\ lda player_a_hitbox_left,x
$c468## sta tmpfield1
$c46a## lda player_a_hitbox_right,x
$c46c## sta tmpfield2
$c46e## lda player_a_hitbox_top,x
$c470## sta tmpfield3
$c472## lda player_a_hitbox_bottom,x
$c474## sta tmpfield4
$c476##; Switch current player to select the opponent
\ jsr switch_selected_player
$c479##; Store opponent player number
\ stx opponent_player
$c47b##; If opponent's hitbox is enabled, check hitbox on hitbox collisions
\ lda player_a_hitbox_enabled,x
$c47d## beq check_hitbox_hurtbox
$c47f##; Store opponent's hitbox
\ lda player_a_hitbox_left,x
$c481## sta tmpfield5
$c483## lda player_a_hitbox_right,x
$c485## sta tmpfield6
$c487## lda player_a_hitbox_top,x
$c489## sta tmpfield7
$c48b## lda player_a_hitbox_bottom,x
$c48d## sta tmpfield8
$c48f##; Check collisions between hitbox and hitbox
\ jsr boxes_overlap
$c492## lda tmpfield9
$c494## bne check_hitbox_hurtbox
$c496##; Play parry sound
\ jsr audio_play_parry
$c499##; Hitboxes collide, set opponent in thrown mode without momentum
\ lda #10
$c49b## sta player_a_hitstun,x
$c49d## lda #$00
$c49f## sta player_a_velocity_h,x
$c4a1## sta player_a_velocity_h_low,x
$c4a3## sta player_a_velocity_v,x
$c4a5## sta player_a_velocity_v_low,x
$c4a7## jsr start_thrown_player
$c4aa## lda #2
$c4ac## sta screen_shake_counter
$c4ae## jmp end
$c4b1#check_hitbox_hurtbox#
\; Store opponent's hurtbox
\ lda player_a_hurtbox_left,x
$c4b3## sta tmpfield5
$c4b5## lda player_a_hurtbox_right,x
$c4b7## sta tmpfield6
$c4b9## lda player_a_hurtbox_top,x
$c4bb## sta tmpfield7
$c4bd## lda player_a_hurtbox_bottom,x
$c4bf## sta tmpfield8
$c4c1##; Check collisions between hitbox and hurtbox
\ jsr boxes_overlap
$c4c4## lda tmpfield9
$c4c6## bne end
$c4c8## lda #<sinbad_state_onhurt_routines              ;
$c4ca## sta tmpfield1                ;
$c4cc## lda #>sinbad_state_onhurt_routines              ; Fire on-hurt event
$c4ce## sta tmpfield2                ;
$c4d0## jsr player_state_action                ;
$c4d3#end#
\; Reset register X to the current player
\ ldx current_player
$c4d5## rts 
$c4d6#hurt_player# .) 
\; Throw the hurted player depending on the hitbox hurting him
\;  tmpfield10 - Player number of the striker
\;  tmpfield11 - Player number of the stroke
\;  register X - Player number of the stroke (equals to tmpfield11)
\;
\;  Can overwrite any register and any tmpfield except tmpfield10 and tmpfield11.
\
\ .( 
\current_player=tmpfield10
\opponent_player=tmpfield11
\; Play hit sound
\ jsr audio_play_hit
$c4d9##; Apply force vector to the opponent
\ jsr apply_force_vector
$c4dc##; Apply damages to the opponent
\ ldx current_player
$c4de## lda player_a_hitbox_damages,x              ; Put hitbox damages in A
$c4e0## ldx opponent_player
$c4e2## clc                    ;
$c4e3## adc player_a_damages,x              ;
$c4e5## cmp #200             ;
$c4e7## bcs cap_damages                ; Apply damages, capped to 199
$c4e9## jmp apply_damages
$c4ec#cap_damages#;
\;
\ lda #199             ;
$c4ee#apply_damages#;
\ sta player_a_damages,x              ;
$c4f0##; Set opponent to thrown state
\ jsr start_thrown_player
$c4f3##; Disable the hitbox to avoid multi-hits
\ ldx current_player
$c4f5## lda #$00
$c4f7## sta player_a_hitbox_enabled,x
$c4f9## rts 
$c4fa#apply_force_vector# .) 
\; Apply force in current player's hitbox to it's opponent
\;
\; Overwrites every tmpfields except "current_player" and "opponent_player".
\; Overwrites registers A and  X (set to the opponent player's number).
\
\ .( 
\base_h_low=tmpfield6
\base_h_high=tmpfield7
\base_v_low=tmpfield8
\base_v_high=tmpfield9
\current_player=tmpfield10
\opponent_player=tmpfield11
\force_h=tmpfield12
\force_v=tmpfield13
\force_h_low=tmpfield14
\force_v_low=tmpfield15
\knockback_h_high=force_h             ; knockback_h reuses force_h memory location
\knockback_h_low=force_h_low             ; it is only writen after the last read of force_h
\knockback_v_high=force_v             ; knockback_v reuses force_v memory location
\knockback_v_low=force_v_low             ; it is only writen after the last read of force_v
\; Apply force vector to the opponent
\ ldx current_player
$c4fc## lda player_a_hitbox_force_h,x              ;
$c4fe## sta force_h                ;
$c500## lda player_a_hitbox_force_h_low,x              ;
$c502## sta force_h_low                ; Save force vector to a player independent
$c504## lda player_a_hitbox_force_v,x              ; location
$c506## sta force_v                ;
$c508## lda player_a_hitbox_force_v_low,x              ;
$c50a## sta force_v_low                ;
$c50c## lda player_a_hitbox_base_knock_up_h_high,x              ;
$c50e## sta base_h_high                ;
$c510## lda player_a_hitbox_base_knock_up_h_low,x              ;
$c512## sta base_h_low                ; Save base knock up to a player independent
$c514## lda player_a_hitbox_base_knock_up_v_high,x              ; location
$c516## sta base_v_high                ;
$c518## lda player_a_hitbox_base_knock_up_v_low,x              ;
$c51a## sta base_v_low                ;
$c51c## ldx opponent_player
$c51e## lda player_a_damages,x              ;
$c520## lsr                    ; Get force multiplier
$c521## lsr                    ; "damages / 4"
$c522## sta tmpfield3                ;
$c524## lda force_h                ;
$c526## sta tmpfield2                ;
$c528## lda force_h_low                ;
$c52a## sta tmpfield1                ;
$c52c## jsr multiply                ; Compute horizontal knockback
$c52f## lda base_h_low                ; "force_h * multiplier + base_h"
$c531## clc                    ;
$c532## adc tmpfield4                ;
$c534## sta tmpfield4                ;
$c536## lda base_h_high                ;
$c538## adc tmpfield5                ;
$c53a## sta player_a_velocity_h,x              ;
$c53c## lda tmpfield4                ; Apply horizontal knockback
$c53e## sta player_a_velocity_h_low,x              ;
$c540## lda force_v                ;
$c542## sta tmpfield2                ;
$c544## lda force_v_low                ;
$c546## sta tmpfield1                ;
$c548## jsr multiply                ; Compute vertical knockback
$c54b## lda base_v_low                ; "force_v * multiplier + base_v"
$c54d## clc                    ;
$c54e## adc tmpfield4                ;
$c550## lda base_v_high                ;
$c552## adc tmpfield5                ;
$c554## sta player_a_velocity_v,x              ;
$c556## lda tmpfield4                ; Apply vertical knockback
$c558## sta player_a_velocity_v_low,x              ;
$c55a##; Apply hitstun to the opponent
\; hitstun duration = high byte of 2 * (abs(velotcity_v) + abs(velocity_h))
\ lda player_a_velocity_h,x              ;
$c55c## bpl end_abs_kb_h                ;
$c55e## lda player_a_velocity_h_low,x              ;
$c560## eor #%11111111             ;
$c562## clc                    ;
$c563## adc #$01             ; knockback_h = abs(velocity_h)
$c565## sta knockback_h_low                ;
$c567## lda player_a_velocity_h,x              ;
$c569## eor #%11111111             ;
$c56b## adc #$00             ;
$c56d#end_abs_kb_h#;
\ sta knockback_h_high                ;
$c56f## lda player_a_velocity_v,x              ;
$c571## bpl end_abs_kb_v                ;
$c573## lda player_a_velocity_v_low,x              ;
$c575## eor #%11111111             ;
$c577## clc                    ;
$c578## adc #$01             ; knockback_v = abs(velocity_v)
$c57a## sta knockback_v_low                ;
$c57c## lda player_a_velocity_v,x              ;
$c57e## eor #%11111111             ;
$c580## adc #$00             ;
$c582#end_abs_kb_v#;
\ sta knockback_v_high                ;
$c584## lda knockback_h_low                ;
$c586## clc                    ;
$c587## adc knockback_v_low                ;
$c589## sta knockback_h_low                ; knockback_h = knockback_v + knockback_h
$c58b## lda knockback_h_high                ;
$c58d## adc knockback_v_high                ;
$c58f## sta knockback_h_high                ;
$c591## asl knockback_h_low                ;
$c593## lda knockback_h_high                ; Oponent player hitstun = high byte of 2 * knockback_h
$c595## rol                    ;
$c596## sta player_a_hitstun,x              ;
$c598##; Start screenshake of duration = hitstun / 2
\ lsr 
$c599## sta screen_shake_counter
$c59b## rts 
$c59c#move_player# .) 
\; Move the player according to it's velocity and collisions with obstacles
\;  register X - player number
\;
\;  When returning player's position is updated, tmpfield1 contains it's old X
\;  and tmpfield2 contains it's old Y
\
\ .( 
\; Save old position
\ lda player_a_x,x
$c59e## sta tmpfield1
$c5a0## lda player_a_y,x
$c5a2## sta tmpfield2
$c5a4##; Apply velocity to position
\ lda player_a_velocity_h_low,x
$c5a6## clc 
$c5a7## adc player_a_x_low,x
$c5a9## sta tmpfield9
$c5ab## lda player_a_velocity_h,x
$c5ad## adc player_a_x,x
$c5af## sta tmpfield3
$c5b1## lda player_a_velocity_v_low,x
$c5b3## clc 
$c5b4## adc player_a_y_low,x
$c5b6## sta tmpfield10
$c5b8## lda player_a_velocity_v,x
$c5ba## adc player_a_y,x
$c5bc## sta tmpfield4
$c5be##; Check collisions with stage plaform
\ lda #$21
$c5c0## sta tmpfield5
$c5c2## lda #$81
$c5c4## sta tmpfield6
$c5c6## lda #$d7
$c5c8## sta tmpfield7
$c5ca## lda #$ff
$c5cc## sta tmpfield8
$c5ce## jsr check_collision
$c5d1## lda tmpfield3
$c5d3## sta player_a_x,x
$c5d5## lda tmpfield4
$c5d7## sta player_a_y,x
$c5d9## lda tmpfield9
$c5db## sta player_a_x_low,x
$c5dd## lda tmpfield10
$c5df## sta player_a_y_low,x
$c5e1## rts 
$c5e2#check_player_position# .) 
\; Check the player's position and modify the current state accordingly
\;  register X - player number
\;  tmpfield1 - player's old X
\;  tmpfield2 - player's old Y
\;
\;  Overwrites tmpfield1 and tmpfield2
\
\ .( 
\old_x=tmpfield1
\old_y=tmpfield2
\; Check death
\ lda player_a_velocity_h,x
$c5e4## bpl check_right_blast
$c5e6## lda old_x                ; Horizontal velocity is negative
$c5e8## cmp player_a_x,x              ; die if "old X < new X"
$c5ea## bcc set_death_state                ;
$c5ec## jmp check_vertical_blasts
$c5ef#check_right_blast#
\ lda player_a_x,x              ; Horizontal velocity is positive
$c5f1## cmp old_x                ; die if "new X < old X"
$c5f3## bcc set_death_state                ;
$c5f5#check_vertical_blasts#
\ lda player_a_velocity_v,x
$c5f7## bpl check_bottom_blast
$c5f9## lda old_y                ; Vertical velocity is negative
$c5fb## cmp player_a_y,x              ; die if "old Y < new Y"
$c5fd## bcc set_death_state                ;
$c5ff## jmp end_death_checks
$c602#check_bottom_blast#
\ lda player_a_y,x              ; Vertical velocity is positive
$c604## cmp old_y                ; die if "new Y < old Y"
$c606## bcc set_death_state                ;
$c608#end_death_checks#
\; Check if on ground
\ jsr check_on_ground
$c60b## bne offground
$c60d##; On ground
\ lda #$00             ; Reset aerial jumps counter
$c60f## sta player_a_num_aerial_jumps,x              ;
$c611## lda #$03             ; Reset gravity modifications
$c613## sta player_a_gravity,x              ;
$c615## lda #<sinbad_state_onground_routines              ;
$c617## sta tmpfield1                ;
$c619## lda #>sinbad_state_onground_routines              ; Fire on-ground event
$c61b## sta tmpfield2                ;
$c61d## jsr player_state_action                ;
$c620## jmp end
$c623#offground#
\ lda #<sinbad_state_offground_routines
$c625## sta tmpfield1
$c627## lda #>sinbad_state_offground_routines
$c629## sta tmpfield2
$c62b## jsr player_state_action
$c62e## jmp end
$c631#set_death_state#
\ jsr audio_play_death                ; Play death sound
$c634## lda #$00             ; Reset aerial jumps counter
$c636## sta player_a_num_aerial_jumps,x              ;
$c638## lda #$03             ; Reset gravity
$c63a## sta player_a_gravity,x              ;
$c63c## sta player_a_hitstun,x              ; Reset hitstun counter
$c63e## dec player_a_stocks,x              ; Decrement stocks counter and check for gameover
$c640## bmi gameover                ;
$c642## jsr start_respawn_player                ; Respawn
$c645## jmp end
$c648#gameover#
\ lda #$02
$c64a## sta global_game_state
$c64c## jsr switch_selected_player
$c64f## txa 
$c650## sta gameover_winner
$c652## jsr change_global_game_state
$c655#end#
\ rts 
$c656#write_player_damages# .) 
\; Show on screen player's damages
\;  register X must contain the player number
\
\ .( 
\damages_ppu_position=tmpfield4
\stocks_ppu_position=tmpfield7
\player_stocks=tmpfield8
\; Save X
\ txa 
$c657## pha 
$c658##; Set on-screen text position depending on the player
\ cpx #$00
$c65a## beq prepare_player_a
$c65c## lda #$94
$c65e## sta damages_ppu_position
$c660## lda #$54
$c662## sta stocks_ppu_position
$c664## jmp end_player_variables
$c667#prepare_player_a#
\ lda #$88
$c669## sta damages_ppu_position
$c66b## lda #$48
$c66d## sta stocks_ppu_position
$c66f#end_player_variables#
\; Put damages value parameter for number_to_tile_indexes
\ lda player_a_damages,x
$c671## sta tmpfield1
$c673## lda player_a_stocks,x
$c675## sta player_stocks
$c677##; Write the begining of the damage buffer
\ jsr last_nt_buffer
$c67a## lda #$01             ; Continuation byte
$c67c## sta nametable_buffers,x              ;
$c67f## inx 
$c680## lda #$23             ; PPU address MSB
$c682## sta nametable_buffers,x              ;
$c685## inx 
$c686## lda damages_ppu_position                ; PPU address LSB
$c688## sta nametable_buffers,x              ;
$c68b## inx 
$c68c## lda #$03             ; Tiles count
$c68e## sta nametable_buffers,x              ;
$c691## inx 
$c692##; Store the tiles address as destination parameter for number_to_tile_indexes
\ txa 
$c693## sta tmpfield2
$c695## lda #>nametable_buffers
$c697## sta tmpfield3
$c699##; Set the next continuation byte to 0
\ inx 
$c69a## inx 
$c69b## inx 
$c69c## lda #$00
$c69e## sta nametable_buffers,x
$c6a1##; Populate tiles data for damage buffer
\ jsr number_to_tile_indexes
$c6a4##; Construct stocks buffers
\ ldy #$00
$c6a6## jsr last_nt_buffer
$c6a9#stocks_buffer#
\ lda #$01             ; Continuation byte
$c6ab## sta nametable_buffers,x              ;
$c6ae## inx 
$c6af## lda #$23             ; PPU address MSB
$c6b1## sta nametable_buffers,x              ;
$c6b4## inx 
$c6b5## lda stocks_ppu_position                ; PPU address LSB
$c6b7## clc                    ;
$c6b8## adc stocks_positions,y              ;
$c6bb## sta nametable_buffers,x              ;
$c6be## inx 
$c6bf## lda #$01             ; Tiles count
$c6c1## sta nametable_buffers,x              ;
$c6c4## inx 
$c6c5## cpy player_stocks                ;
$c6c7## bcs empty_stock                ;
$c6c9## lda #$dd             ;
$c6cb## jmp set_stock_tile                ; Set stock tile depending of the
$c6ce#empty_stock#; stock's availability
\ lda #$00             ;
$c6d0#set_stock_tile#;
\ sta nametable_buffers,x              ;
$c6d3## inx 
$c6d4## iny                    ;
$c6d5## cpy #$04             ; Loop for each stock to print
$c6d7## bne stocks_buffer                ;
$c6d9## lda #$00             ; Next continuation byte to 0
$c6db## sta nametable_buffers,x              ;
$c6de##; Restore X
\ pla 
$c6df## tax 
$c6e0## rts 
$c6e1#stocks_positions#
\ .byt 0,3,32,35
$c6e5#update_sprites# .) 
\
\ .( 
\; Pretty names
\animation_vector=tmpfield3             ; Not movable - Used as parameter for draw_anim_frame subroutine
\first_sprite_index=tmpfield5             ; Not movable - Used as parameter for draw_anim_frame subroutine
\last_sprite_index=tmpfield6             ; Not movable - Used as parameter for draw_anim_frame subroutine
\frame_first_tick=tmpfield7             ; Not movable - Used as parameter for draw_anim_frame subroutine
\animation_direction=tmpfield8             ; Not movable - Used as parameter for draw_anim_frame subroutine
\ .( 
\ ldx #$00
$c6e7#player_animation#
\ ldy #$00
$c6e9## lda #$00
$c6eb## sta frame_first_tick
$c6ed##; Store current player's animation information to a player independent location
\ jsr store_player_anim_parameters
$c6f0#new_frame#; New frame (search for the frame on time with clock)
\
\ lda (animation_vector),y            ; Load frame duration
$c6f2## beq loop_animation                ; Frame of duration 0 means end of animation
$c6f4## clc                    ; Compute current frame's clock end
$c6f5## adc frame_first_tick                ;
$c6f7## cmp player_a_anim_clock,x              ;
$c6f9## beq search_next_frame                ; If the current frame ends after the clock time, draw it
$c6fb## bcs draw_current_frame                ;
$c6fd#search_next_frame#
\ sta frame_first_tick                ; Store next frame's clock begin (= current frame's clock end)
$c6ff##; Search the next frame
\ lda #$01
$c701## jsr add_to_anim_vector
$c704#skip_sprite#
\ lda (animation_vector),y            ; Check current sprite continuation byte
$c706## beq end_skip_frame                ;
$c708## sta tmpfield8                ;
$c70a## lda #$05             ;
$c70c## sta tmpfield9                ; Set data length in tmpfield9
$c70e## lda #%00001000             ; hitbox data is 15 bytes long
$c710## bit tmpfield8                ; other data are 5 bytes long
$c712## beq inc_cursor                ; (counting the continuation byte)
$c714## lda #15             ;
$c716## sta tmpfield9                ;
$c718#inc_cursor#
\ lda tmpfield9                ; Add data length to the animation vector, to point
$c71a## jsr add_to_anim_vector                ; on the next continuation byte
$c71d## jmp skip_sprite
$c720#end_skip_frame#
\ lda #$01             ; Skip the last continuation byte
$c722## jsr add_to_anim_vector                ;
$c725## jmp new_frame
$c728#draw_current_frame#
\; Animation location is player's location
\ lda player_a_x,x
$c72a## sta tmpfield1
$c72c## lda player_a_y,x
$c72e## sta tmpfield2
$c730##; Increment animation_vector to skip the frame duration field
\ lda #$01
$c732## jsr add_to_anim_vector
$c735##; Set animation's direction
\ lda player_a_animation_direction,x
$c737## sta animation_direction
$c739## txa 
$c73a## pha 
$c73b## jsr draw_anim_frame
$c73e## pla 
$c73f## tax 
$c740#tick_clock#
\ inc player_a_anim_clock,x
$c742## jmp next_player
$c745#loop_animation#
\ lda #$00
$c747## sta player_a_anim_clock,x
$c749#next_player#
\ inx 
$c74a## cpx #$02
$c74c## bne player_animation
$c74e##;jsr show_hitboxes
\ rts 
$c74f#store_player_anim_parameters# .) 
\
\ .( 
\ cpx #$00
$c751## bne select_anim_player_b
$c753## lda player_a_animation
$c755## sta animation_vector
$c757## lda player_a_animation+1
$c759## sta animation_vector+1
$c75b## lda #$00
$c75d## sta first_sprite_index
$c75f## lda #$0f
$c761## sta last_sprite_index
$c763## jmp end
$c766#select_anim_player_b#
\ lda player_b_animation
$c768## sta animation_vector
$c76a## lda player_b_animation+1
$c76c## sta animation_vector+1
$c76e## lda #$10
$c770## sta first_sprite_index
$c772## lda #$1f
$c774## sta last_sprite_index
$c776#end#
\ rts 
$c777#add_to_anim_vector# .) 
\
\ .( 
\ clc 
$c778## adc animation_vector
$c77a## sta animation_vector
$c77c## lda #$00
$c77e## adc animation_vector+1
$c780## sta animation_vector+1
$c782## rts 
$c783#draw_anim_frame# .) 
\ .) 
\; Draw an animation frame on screen
\;  tmpfield1 - Position X
\;  tmpfield2 - Position Y
\;  tmpfield3, tmpfield4 - Vector pointing to the frame to draw
\;  tmpfield5 - First sprite index to use
\;  tmpfield6 - Last sprite index to use
\;  tmpfield7 - Frame's first tick
\;  tmpfield8 - Animation's direction (0 normal, 1 flipped)
\;  X register - player number
\;
\; Overwrites tmpfield5, tmpfield7, tmpfield8, tmpfield9, tmpfield10, tmpfield11, tmpfield12 and all registers
\
\ .( 
\; Pretty names
\anim_pos_x=tmpfield1
\anim_pos_y=tmpfield2
\frame_vector=tmpfield3
\sprite_index=tmpfield5
\last_sprite_index=tmpfield6
\player_number=tmpfield7
\animation_direction=tmpfield8
\sprite_orig_x=tmpfield9
\sprite_orig_y=tmpfield10
\continuation_byte=tmpfield11
\got_hitbox=tmpfield12
\is_first_tick=tmpfield13
\ .( 
\; Compute is_first_tick (set to $00 on the first apparition of this frame)
\ lda player_a_anim_clock,x
$c785## sec 
$c786## sbc tmpfield7
$c788## sta is_first_tick
$c78a##; Initialization
\ ldy #$00
$c78c## stx player_number
$c78e## lda #$00
$c790## sta got_hitbox
$c792#draw_one_sprite#; Check continuation byte - zero value means end of data
\
\ lda (frame_vector),y
$c794## beq clear_unused_sprites
$c796## iny 
$c797##; Check positioning mode from continuation byte
\ sta continuation_byte
$c799## lda #%00000010
$c79b## bit continuation_byte
$c79d## beq set_relative
$c79f## lda #$00
$c7a1## sta sprite_orig_x
$c7a3## sta sprite_orig_y
$c7a5## jmp check_hurtbox
$c7a8#set_relative#
\ lda anim_pos_x
$c7aa## sta sprite_orig_x
$c7ac## lda anim_pos_y
$c7ae## sta sprite_orig_y
$c7b0#check_hurtbox#; Check if next data is hurtbox position, hitbox definition or sprite data from continuation byte
\
\ lda #%00000100
$c7b2## bit continuation_byte
$c7b4## beq check_hitbox
$c7b6## jsr anim_frame_move_hurtbox
$c7b9## jmp draw_one_sprite
$c7bc#check_hitbox#
\ lda #%00001000
$c7be## bit continuation_byte
$c7c0## beq move_sprite
$c7c2## jsr anim_frame_move_hitbox
$c7c5## lda #$01
$c7c7## sta got_hitbox
$c7c9## jmp draw_one_sprite
$c7cc#move_sprite#
\ jsr anim_frame_move_sprite
$c7cf## jmp draw_one_sprite
$c7d2#clear_unused_sprites#; Place unused sprites off screen
\
\ lda last_sprite_index
$c7d4## cmp sprite_index
$c7d6## bcc clear_unused_hitbox
$c7d8## lda sprite_index                ;
$c7da## asl                    ; Set X to the byte offset of the sprite in OAM memory
$c7db## asl                    ;
$c7dc## tax                    ;
$c7dd## lda #$fe
$c7df## sta oam_mirror,x
$c7e2## inx 
$c7e3## sta oam_mirror,x
$c7e6## inx 
$c7e7## sta oam_mirror,x
$c7ea## inx 
$c7eb## sta oam_mirror,x
$c7ee## inc sprite_index
$c7f0## jmp clear_unused_sprites
$c7f3#clear_unused_hitbox#; Deactivate the hitbox if it was not placed by this frame
\
\ lda got_hitbox
$c7f5## cmp #$01
$c7f7## beq end
$c7f9## ldx player_number
$c7fb## sta player_a_hitbox_enabled,x
$c7fd#end#
\ rts 
$c7fe#anim_frame_move_sprite# .) 
\
\ .( 
\; Copy sprite data
\attributes_modifier=tmpfield14
\sprite_used=tmpfield15             ; 0 - first sprite, 1 - last sprite
\; Compute direction dependent information
\;  attributes modifier - to flip the animation if needed
\;  A - sprite index to use
\ lda animation_direction
$c800## beq default_direction
$c802## lda #$40             ; Flip horizontally attributes
$c804## sta attributes_modifier                ;
$c806## lda #%00010000             ;
$c808## bit continuation_byte                ;
$c80a## beq use_last_sprite                ;
$c80c## lda #0             ;
$c80e## jmp set_sprite_used                ; Use the last sprite unless explicitely foreground
$c811#use_last_sprite#;
\ lda #1             ;
$c813#set_sprite_used#;
\ sta sprite_used                ;
$c815## jmp end_init_direction_data                ;
$c818#default_direction#
\ lda #$00             ;
$c81a## sta attributes_modifier                ; Do not flip attributes
$c81c## sta sprite_used                ; Always use the first sprite
$c81e#end_init_direction_data#
\; X points on sprite data to modify
\ lda sprite_used
$c820## beq use_first_sprite
$c822## lda last_sprite_index
$c824## jmp sprite_index_set
$c827#use_first_sprite#
\ lda sprite_index
$c829#sprite_index_set#
\ asl 
$c82a## asl 
$c82b## tax 
$c82c##; Y value, must be relative to animation Y position
\ lda (frame_vector),y
$c82e## clc 
$c82f## adc sprite_orig_y
$c831## sta oam_mirror,x
$c834## eor sprite_orig_y                ;
$c836## bpl continue                ;
$c838## lda sprite_orig_y                ; Skip the sprite if it wraps the screen from
$c83a## cmp #%11000000             ; bottom to top
$c83c## bcs skip                ;
$c83e#continue#;
\ inx 
$c83f## iny 
$c840##; Tile number
\ lda (frame_vector),y
$c842## sta oam_mirror,x
$c845## inx 
$c846## iny 
$c847##; Attributes
\;  Add "2 * player_num" to select 3rd and 4th palette for player B
\;  Flip horizontally (eor $40) if oriented to the right
\ lda player_number
$c849## asl 
$c84a## clc 
$c84b## adc (frame_vector),y
$c84d## eor attributes_modifier
$c84f## sta oam_mirror,x
$c852## inx 
$c853## iny 
$c854##; X value, must be relative to animation X position
\;  Flip symetrically to the vertical axe if needed
\ lda animation_direction
$c856## bne flip_x
$c858## lda (frame_vector),y
$c85a## jmp got_relative_pos
$c85d#flip_x#
\ lda (frame_vector),y
$c85f## eor #%11111111
$c861## clc 
$c862## adc #1
$c864#got_relative_pos#
\ clc 
$c865## adc sprite_orig_x
$c867## sta oam_mirror,x
$c86a## iny 
$c86b##; Next sprite
\ lda sprite_used
$c86d## beq inc_sprite_index
$c86f## dec last_sprite_index
$c871## jmp end_next_sprite
$c874#inc_sprite_index#
\ inc sprite_index
$c876#end_next_sprite#
\ jmp end
$c879#skip#; Skip sprite
\
\ lda #$fe             ; Reset OAM sprite's Y position
$c87b## sta oam_mirror,x              ;
$c87e## iny                    ;
$c87f## iny                    ; Advance to the next frame's sprite
$c880## iny                    ;
$c881## iny                    ;
$c882#end#
\ rts 
$c883#anim_frame_move_hurtbox# .) 
\
\ .( 
\width=tmpfield14
\; Extract relative position
\ ldx player_number
$c885##; Left
\ lda (frame_vector),y
$c887## sta player_a_hurtbox_left,x
$c889## iny 
$c88a##; Right
\ lda (frame_vector),y
$c88c## sta player_a_hurtbox_right,x
$c88e## iny 
$c88f##; Top
\ lda (frame_vector),y
$c891## sta player_a_hurtbox_top,x
$c893## iny 
$c894##; Bottom
\ lda (frame_vector),y
$c896## sta player_a_hurtbox_bottom,x
$c898## iny 
$c899##; If the animation is flipped, flip the box
\ lda animation_direction                ; Nothing to do for non-flipped animation
$c89b## beq apply_offset                ;
$c89d## lda player_a_hurtbox_right,x              ;
$c89f## sec                    ; Compute box width
$c8a0## sbc player_a_hurtbox_left,x              ;
$c8a2## sta width                ;
$c8a4## lda player_a_hurtbox_left,x              ;
$c8a6## eor #%11111111             ;
$c8a8## clc                    ; right = -left + 7
$c8a9## adc #8             ;
$c8ab## sta player_a_hurtbox_right,x              ;
$c8ad## sec                    ;
$c8ae## sbc width                ; left = right - width
$c8b0## sta player_a_hurtbox_left,x              ;
$c8b2#apply_offset#; Apply offset to the box
\
\; Left
\ lda player_a_hurtbox_left,x
$c8b4## clc 
$c8b5## adc sprite_orig_x
$c8b7## sta player_a_hurtbox_left,x
$c8b9##; Right
\ lda player_a_hurtbox_right,x
$c8bb## clc 
$c8bc## adc sprite_orig_x
$c8be## sta player_a_hurtbox_right,x
$c8c0##; Top
\ lda player_a_hurtbox_top,x
$c8c2## clc 
$c8c3## adc sprite_orig_y
$c8c5## sta player_a_hurtbox_top,x
$c8c7##; Bottom
\ lda player_a_hurtbox_bottom,x
$c8c9## clc 
$c8ca## adc sprite_orig_y
$c8cc## sta player_a_hurtbox_bottom,x
$c8ce#end#
\ rts 
$c8cf#anim_frame_move_hitbox# .) 
\
\ .( 
\width=tmpfield14
\ ldx player_number
$c8d1##; Enabled
\ lda is_first_tick
$c8d3## bne end_enabled
$c8d5## lda (frame_vector),y
$c8d7## ora player_a_hitbox_enabled,x
$c8d9## sta player_a_hitbox_enabled,x
$c8db#end_enabled#
\ iny 
$c8dc##; Damages
\ lda (frame_vector),y
$c8de## sta player_a_hitbox_damages,x
$c8e0## iny 
$c8e1##; Base_h
\ lda (frame_vector),y
$c8e3## sta player_a_hitbox_base_knock_up_h_high,x
$c8e5## iny 
$c8e6## lda (frame_vector),y
$c8e8## sta player_a_hitbox_base_knock_up_h_low,x
$c8ea## iny 
$c8eb##; Base_v
\ lda (frame_vector),y
$c8ed## sta player_a_hitbox_base_knock_up_v_high,x
$c8ef## iny 
$c8f0## lda (frame_vector),y
$c8f2## sta player_a_hitbox_base_knock_up_v_low,x
$c8f4## iny 
$c8f5##; Force_h
\ lda (frame_vector),y
$c8f7## sta player_a_hitbox_force_h,x
$c8f9## iny 
$c8fa## lda (frame_vector),y
$c8fc## sta player_a_hitbox_force_h_low,x
$c8fe## iny 
$c8ff##; Force_v
\ lda (frame_vector),y
$c901## sta player_a_hitbox_force_v,x
$c903## iny 
$c904## lda (frame_vector),y
$c906## sta player_a_hitbox_force_v_low,x
$c908## iny 
$c909##; Left
\ lda (frame_vector),y
$c90b## sta player_a_hitbox_left,x
$c90d## iny 
$c90e##; Right
\ lda (frame_vector),y
$c910## sta player_a_hitbox_right,x
$c912## iny 
$c913##; Top
\ lda (frame_vector),y
$c915## sta player_a_hitbox_top,x
$c917## iny 
$c918##; Top
\ lda (frame_vector),y
$c91a## sta player_a_hitbox_bottom,x
$c91c## iny 
$c91d##; If the player is right facing, flip the box
\ lda animation_direction                ; Nothing to do for left facing players
$c91f## beq apply_offset                ;
$c921##; Flip box position
\ lda player_a_hitbox_right,x              ;
$c923## sec                    ; Compute box width
$c924## sbc player_a_hitbox_left,x              ;
$c926## sta width                ;
$c928## lda player_a_hitbox_left,x              ;
$c92a## eor #%11111111             ;
$c92c## clc                    ; right = -left + 7
$c92d## adc #8             ;
$c92f## sta player_a_hitbox_right,x              ;
$c931## sec                    ;
$c932## sbc width                ; left = right - width
$c934## sta player_a_hitbox_left,x              ;
$c936##; Flip box knockback
\ lda player_a_hitbox_base_knock_up_h_low,x              ;
$c938## eor #%11111111             ;
$c93a## clc                    ;
$c93b## adc #1             ;
$c93d## sta player_a_hitbox_base_knock_up_h_low,x              ; base_h = -base_h
$c93f## lda player_a_hitbox_base_knock_up_h_high,x              ;
$c941## eor #%11111111             ;
$c943## adc #0             ;
$c945## sta player_a_hitbox_base_knock_up_h_high,x              ;
$c947## lda player_a_hitbox_force_h_low,x              ;
$c949## eor #%11111111             ;
$c94b## clc                    ;
$c94c## adc #1             ;
$c94e## sta player_a_hitbox_force_h_low,x              ; force_h = -force_h
$c950## lda player_a_hitbox_force_h,x              ;
$c952## eor #%11111111             ;
$c954## adc #0             ;
$c956## sta player_a_hitbox_force_h,x              ;
$c958#apply_offset#; Apply offset to the box
\
\; Left
\ lda player_a_hitbox_left,x
$c95a## clc 
$c95b## adc sprite_orig_x
$c95d## sta player_a_hitbox_left,x
$c95f##; Right
\ lda player_a_hitbox_right,x
$c961## clc 
$c962## adc sprite_orig_x
$c964## sta player_a_hitbox_right,x
$c966##; Top
\ lda player_a_hitbox_top,x
$c968## clc 
$c969## adc sprite_orig_y
$c96b## sta player_a_hitbox_top,x
$c96d##; Top
\ lda player_a_hitbox_bottom,x
$c96f## clc 
$c970## adc sprite_orig_y
$c972## sta player_a_hitbox_bottom,x
$c974## rts 
$c975#show_hitboxes# .) 
\ .) 
\; Debug subroutine to show hitboxes and hurtboxes
\
\ .( 
\ pha 
$c976## txa 
$c977## pha 
$c978## tya 
$c979## pha 
$c97a##; Player A hurtbox
\ ldx #$fc
$c97c## lda player_a_hurtbox_top
$c97e## sta oam_mirror,x
$c981## inx 
$c982## lda #$0d
$c984## sta oam_mirror,x
$c987## inx 
$c988## lda #$03
$c98a## sta oam_mirror,x
$c98d## inx 
$c98e## lda player_a_hurtbox_left
$c990## sta oam_mirror,x
$c993## inx 
$c994## ldx #$f8
$c996## lda player_a_hurtbox_bottom
$c998## sec 
$c999## sbc #$07
$c99b## sta oam_mirror,x
$c99e## inx 
$c99f## lda #$0d
$c9a1## sta oam_mirror,x
$c9a4## inx 
$c9a5## lda #$03
$c9a7## sta oam_mirror,x
$c9aa## inx 
$c9ab## lda player_a_hurtbox_right
$c9ad## sec 
$c9ae## sbc #$07
$c9b0## sta oam_mirror,x
$c9b3## inx 
$c9b4##; Player B hurtbox
\ ldx #$f4
$c9b6## lda player_b_hurtbox_top
$c9b8## sta oam_mirror,x
$c9bb## inx 
$c9bc## lda #$0d
$c9be## sta oam_mirror,x
$c9c1## inx 
$c9c2## lda #$03
$c9c4## sta oam_mirror,x
$c9c7## inx 
$c9c8## lda player_b_hurtbox_left
$c9ca## sta oam_mirror,x
$c9cd## inx 
$c9ce## ldx #$f0
$c9d0## lda player_b_hurtbox_bottom
$c9d2## sec 
$c9d3## sbc #$07
$c9d5## sta oam_mirror,x
$c9d8## inx 
$c9d9## lda #$0d
$c9db## sta oam_mirror,x
$c9de## inx 
$c9df## lda #$03
$c9e1## sta oam_mirror,x
$c9e4## inx 
$c9e5## lda player_b_hurtbox_right
$c9e7## sec 
$c9e8## sbc #$07
$c9ea## sta oam_mirror,x
$c9ed## inx 
$c9ee##; Player A hitbox
\ lda player_a_hitbox_enabled
$c9f0## bne show_player_a_hitbox
$c9f2## lda #$fe             ;
$c9f4## sta $02e8              ;
$c9f7## sta $02e9              ;
$c9fa## sta $02ea              ;
$c9fd## sta $02eb              ; Hide disabled hitbox
$ca00## sta $02ec              ;
$ca03## sta $02ed              ;
$ca06## sta $02ee              ;
$ca09## sta $02ef              ;
$ca0c## jmp end_player_a_hitbox
$ca0f#show_player_a_hitbox#
\ ldx #$ec
$ca11## lda player_a_hitbox_top
$ca13## sta oam_mirror,x
$ca16## inx 
$ca17## lda #$0e
$ca19## sta oam_mirror,x
$ca1c## inx 
$ca1d## lda #$03
$ca1f## sta oam_mirror,x
$ca22## inx 
$ca23## lda player_a_hitbox_left
$ca25## sta oam_mirror,x
$ca28## inx 
$ca29## ldx #$e8
$ca2b## lda player_a_hitbox_bottom
$ca2d## sec 
$ca2e## sbc #$07
$ca30## sta oam_mirror,x
$ca33## inx 
$ca34## lda #$0e
$ca36## sta oam_mirror,x
$ca39## inx 
$ca3a## lda #$03
$ca3c## sta oam_mirror,x
$ca3f## inx 
$ca40## lda player_a_hitbox_right
$ca42## sec 
$ca43## sbc #$07
$ca45## sta oam_mirror,x
$ca48## inx 
$ca49#end_player_a_hitbox#; Player B hitbox
\ lda player_b_hitbox_enabled
$ca4b## bne show_player_b_hitbox
$ca4d## lda #$fe             ;
$ca4f## sta $02e0              ;
$ca52## sta $02e1              ;
$ca55## sta $02e2              ;
$ca58## sta $02e3              ; Hide disabled hitbox
$ca5b## sta $02e4              ;
$ca5e## sta $02e5              ;
$ca61## sta $02e6              ;
$ca64## sta $02e7              ;
$ca67## jmp end_player_b_hitbox
$ca6a#show_player_b_hitbox#
\ ldx #$e4
$ca6c## lda player_b_hitbox_top
$ca6e## sta oam_mirror,x
$ca71## inx 
$ca72## lda #$0e
$ca74## sta oam_mirror,x
$ca77## inx 
$ca78## lda #$03
$ca7a## sta oam_mirror,x
$ca7d## inx 
$ca7e## lda player_b_hitbox_left
$ca80## sta oam_mirror,x
$ca83## inx 
$ca84## ldx #$e0
$ca86## lda player_b_hitbox_bottom
$ca88## sec 
$ca89## sbc #$07
$ca8b## sta oam_mirror,x
$ca8e## inx 
$ca8f## lda #$0e
$ca91## sta oam_mirror,x
$ca94## inx 
$ca95## lda #$03
$ca97## sta oam_mirror,x
$ca9a## inx 
$ca9b## lda player_b_hitbox_right
$ca9d## sec 
$ca9e## sbc #$07
$caa0## sta oam_mirror,x
$caa3## inx 
$caa4#end_player_b_hitbox#; Player A hitstun indicator
\ lda player_a_hitstun
$caa6## bne show_player_a_hitstun
$caa8## lda #$fe             ;
$caaa## sta $02dc              ;
$caad## sta $02dd              ; Hide disabled hitstun
$cab0## sta $02de              ;
$cab3## sta $02df              ;
$cab6## jmp end_player_a_hitstun
$cab9#show_player_a_hitstun#
\ ldx #$dc
$cabb## lda #$10
$cabd## sta oam_mirror,x
$cac0## sta oam_mirror+3,x
$cac3## lda #$0e
$cac5## sta oam_mirror+1,x
$cac8## lda #$03
$caca## sta oam_mirror+2,x
$cacd#end_player_a_hitstun#
\; Player B hitstun indicator
\ lda player_b_hitstun
$cacf## bne show_player_b_hitstun
$cad1## lda #$fe             ;
$cad3## sta $02d8              ;
$cad6## sta $02d9              ; Hide disabled hitstun
$cad9## sta $02da              ;
$cadc## sta $02db              ;
$cadf## jmp end_player_b_hitstun
$cae2#show_player_b_hitstun#
\ ldx #$d8
$cae4## lda #$10
$cae6## sta oam_mirror,x
$cae9## lda #$20
$caeb## sta oam_mirror+3,x
$caee## lda #$0e
$caf0## sta oam_mirror+1,x
$caf3## lda #$03
$caf5## sta oam_mirror+2,x
$caf8#end_player_b_hitstun#
\ pla 
$caf9## tay 
$cafa## pla 
$cafb## tax 
$cafc## pla 
$cafd## rts 
$cafe#set_player_animation# .) 
\; Start a new animation for the player
\;  X - Player number
\;  tmpfield1 - Animation's vector (low byte)
\;  tmpfield2 - Animation's vector (high byte)
\
\ .( 
\new_animation=tmpfield1
\; X = X * 2 (we use it to reference a 2 bytes field)
\ txa 
$caff## asl 
$cb00## tax 
$cb01##; Set the player's animation
\ lda new_animation
$cb03## sta player_a_animation,x
$cb05## lda new_animation+1
$cb07## sta player_a_animation+1,x
$cb09##; Reset x to it's original value
\ txa 
$cb0a## lsr 
$cb0b## tax 
$cb0c##; Reset animation's clock
\ lda #$00
$cb0e## sta player_a_anim_clock,x
$cb10##; Set animation's direction
\ lda player_a_direction,x
$cb12## sta player_a_animation_direction,x
$cb14## rts 
$cb15#controller_callbacks# .) 
\; Jump to a callback according to player's controller state
\;  X - Player number
\;  tmpfield1 - Callbacks table (high byte)
\;  tmpfield2 - Callbacks table (low byte)
\;  tmpfield3 - number of states in the callbacks table
\;
\;  Overwrites register Y, tmpfield4, tmpfield5 and tmpfield6
\;
\;  Note - The callback is called with jmp, controller_callbacks never
\;         returns using rts.
\
\ .( 
\callbacks_table=tmpfield1
\num_states=tmpfield3
\callback_addr=tmpfield4
\matching_index=tmpfield6
\; Initialize loop, Y on first element and A on controller's state
\ ldy #$00
$cb17## lda controller_a_btns,x
$cb19#check_controller_state#
\; Compare controller state to the current table element
\ cmp (callbacks_table),y
$cb1b## bne next_controller_state
$cb1d##; Store the low byte of the callback address
\ tya                    ;
$cb1e## sta matching_index                ; Save Y, it contains the index of the matching entry
$cb20## clc                    ;
$cb21## adc num_states                ;
$cb23## tay                    ; low_byte = callbacks_table[y + num_states]
$cb24## lda (callbacks_table),y            ;
$cb26## sta callback_addr                ;
$cb28##; Store the high byte of the callback address
\ tya                    ;
$cb29## clc                    ;
$cb2a## adc num_states                ; high_byte = callbacks_table[matching_index + num_states * 2]
$cb2c## tay                    ;
$cb2d## lda (callbacks_table),y            ;
$cb2f## sta callback_addr+1          ;
$cb31##; Controller state is current element, jump to the callback
\ jmp (callback_addr)
$cb34#next_controller_state#
\; Check next element on the state table
\ iny 
$cb35## cpy num_states
$cb37## bne check_controller_state
$cb39##; The state was not listed on the table, call the default callback at table's end
\ tya                    ;
$cb3a## asl                    ;
$cb3b## clc                    ; Y = num_states * 3
$cb3c## adc num_states                ;
$cb3e## tay                    ;
$cb3f## lda (callbacks_table),y            ;
$cb41## sta callback_addr                ;
$cb43## iny                    ; Store default callback address
$cb44## lda (callbacks_table),y            ;
$cb46## sta callback_addr+1          ;
$cb48## jmp (callback_addr)              ; Jump to stored address
$cb4b#check_aerial_inputs# .) 
\; Change the player's state if an aerial move is input on the controller
\;  register X - Player number
\;
\;  Overwrites tmpfield15 and tmpfield2 plus the ones overriten by the state starting subroutine
\
\ .( 
\input_marker=tmpfield15
\player_btn=tmpfield2
\ .( 
\; Refuse to do anything if under hitstun
\ lda player_a_hitstun,x
$cb4d## bne end
$cb4f##; Assuming we are called from an input event
\; Do nothing if the only changes concern the left-right buttons
\ lda controller_a_btns,x
$cb51## eor controller_a_last_frame_btns,x
$cb53## and #%10000000&&%01000000&&%00001000&&%00000100
$cb55## beq end
$cb57##; Save current direction
\ lda player_a_direction,x
$cb59## pha 
$cb5a##; Change player's direction according to input direction
\ lda controller_a_btns,x
$cb5c## sta player_btn
$cb5e## lda #%00000010
$cb60## bit player_btn
$cb62## beq check_direction_right
$cb64## lda #$00
$cb66## jmp set_direction
$cb69#check_direction_right#
\ lda #%00000001
$cb6b## bit player_btn
$cb6d## beq no_direction
$cb6f## lda #$01
$cb71#set_direction#
\ sta player_a_direction,x
$cb73#no_direction#
\; Start the good state according to input
\ jsr take_input
$cb76##; Restore player's direction if there was no input, else discard saved direction
\ lda input_marker
$cb78## beq restore_direction
$cb7a## pla 
$cb7b## jmp end
$cb7e#restore_direction#
\ pla 
$cb7f## sta player_a_direction,x
$cb81#end#
\ rts 
$cb82#take_input# .) 
\
\ .( 
\; Mark input
\ lda #1
$cb84## sta input_marker
$cb86##; Call aerial subroutines, in case of input it will return with input marked
\ lda #<controller_inputs
$cb88## sta tmpfield1
$cb8a## lda #>controller_inputs
$cb8c## sta tmpfield2
$cb8e## lda #14
$cb90## sta tmpfield3
$cb92## jmp controller_callbacks
$cb95#fast_fall#; Fast fall, gravity * 1.5
\
\ lda #$03*2-$03/2
$cb97## sta player_a_gravity,x
$cb99## sta player_a_velocity_v,x
$cb9b## lda #$00
$cb9d## sta player_a_velocity_v_low,x
$cb9f## jmp end
$cba2#no_input#; If no input, unmark the input flag and return
\
\ lda #$00
$cba4## sta input_marker
$cba6#end#
\ rts 
$cba7#controller_inputs#; Impactful controller states and associated callbacks
\; Note - We have to put subroutines as callbacks since we do not expect a return unless we used the default callback
\
\ .byt %01000000&&%00000001,%01000000&&%00000010,%00001000,%00001000&&%00000001,%00001000&&%00000010
$cbac## .byt %00000010&&%10000000,%00000001&&%10000000,%00000100&&%10000000,%00001000&&%10000000,%10000000
$cbb1## .byt %01000000,%01000000&&%00001000,%01000000&&%00000100,%00000100
$cbb5#controller_callbacks_lo#
\ .byt <start_side_special_player,<start_side_special_player,<start_aerial_jumping_player,<start_aerial_jumping_player,<start_aerial_jumping_player
$cbba## .byt <start_aerial_side_player,<start_aerial_side_player,<start_aerial_down_player,<start_aerial_up_player,<start_aerial_neutral_player
$cbbf## .byt <start_aerial_spe_player,<start_spe_up_player,<start_spe_down_player,<fast_fall
$cbc3#controller_callbacks_hi#
\ .byt >start_side_special_player,>start_side_special_player,>start_aerial_jumping_player,>start_aerial_jumping_player,>start_aerial_jumping_player
$cbc8## .byt >start_aerial_side_player,>start_aerial_side_player,>start_aerial_down_player,>start_aerial_up_player,>start_aerial_neutral_player
$cbcd## .byt >start_aerial_spe_player,>start_spe_up_player,>start_spe_down_player,>fast_fall
$cbd1#controller_default_callback#
\ .word no_input
$cbd3#apply_gravity# .) 
\ .) 
\; Simple way to apply the standard gravity effect
\;  register X - player number
\
\ .( 
\ lda player_a_velocity_h_low,x
$cbd5## sta tmpfield2
$cbd7## lda player_a_velocity_h,x
$cbd9## sta tmpfield4
$cbdb## lda #$00
$cbdd## sta tmpfield1
$cbdf## lda player_a_gravity,x
$cbe1## sta tmpfield3
$cbe3## lda #$60
$cbe5## sta tmpfield5
$cbe7## jsr merge_to_player_velocity
$cbea## rts 
$cbeb#aerial_directional_influence# .) 
\
\ .( 
\ lda controller_a_btns,x
$cbed## and #%00000010
$cbef## bne go_left
$cbf1## lda controller_a_btns,x
$cbf3## and #%00000001
$cbf5## bne go_right
$cbf7## jmp end
$cbfa#go_left#
\ lda #$00
$cbfc## sta tmpfield6
$cbfe## lda #$ff
$cc00## sta tmpfield7
$cc02## lda player_a_velocity_h_low,x
$cc04## sta tmpfield8
$cc06## lda player_a_velocity_h,x
$cc08## sta tmpfield9
$cc0a## jsr signed_cmp
$cc0d## bpl end
$cc0f## lda player_a_velocity_v_low,x
$cc11## sta tmpfield1
$cc13## lda player_a_velocity_v,x
$cc15## sta tmpfield3
$cc17## lda #$00
$cc19## sta tmpfield2
$cc1b## lda #$ff
$cc1d## sta tmpfield4
$cc1f## lda #$80
$cc21## sta tmpfield5
$cc23## jsr merge_to_player_velocity
$cc26## jmp end
$cc29#go_right#
\ lda player_a_velocity_h_low,x
$cc2b## sta tmpfield6
$cc2d## lda player_a_velocity_h,x
$cc2f## sta tmpfield7
$cc31## lda #$00
$cc33## sta tmpfield8
$cc35## lda #$01
$cc37## sta tmpfield9
$cc39## jsr signed_cmp
$cc3c## bpl end
$cc3e## lda player_a_velocity_v_low,x
$cc40## sta tmpfield1
$cc42## lda player_a_velocity_v,x
$cc44## sta tmpfield3
$cc46## lda #$00
$cc48## sta tmpfield2
$cc4a## lda #$01
$cc4c## sta tmpfield4
$cc4e## lda #$80
$cc50## sta tmpfield5
$cc52## jsr merge_to_player_velocity
$cc55#end#
\ rts 
$cc56#start_standing_player# .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_idle
$cc58## sta tmpfield1
$cc5a## lda #>anim_sinbad_idle
$cc5c## sta tmpfield2
$cc5e## jsr set_player_animation
$cc61##; Set the player's state
\ lda #$00
$cc63## sta player_a_state,x
$cc65## rts 
$cc66#standing_player# .) 
\; Update a player that is standing on ground
\;  register X must contain the player number
\
\ .( 
\; Do not move, velocity tends toward vector (0,0)
\ lda #$00
$cc68## sta tmpfield4
$cc6a## sta tmpfield3
$cc6c## sta tmpfield2
$cc6e## sta tmpfield1
$cc70## lda #$ff
$cc72## sta tmpfield5
$cc74## jsr merge_to_player_velocity
$cc77##; Force the handling of directional controls
\ lda controller_a_btns,x
$cc79## cmp #%00000010
$cc7b## bne no_left
$cc7d## jsr standing_player_input_left
$cc80## jmp end
$cc83#no_left#
\ cmp #%00000001
$cc85## bne end
$cc87## jsr standing_player_input_right
$cc8a#end#
\ rts 
$cc8b#standing_player_input_left# .) 
\; Player is now running left
\
\ .( 
\ lda #$00
$cc8d## sta player_a_direction,x
$cc8f## jsr start_running_player
$cc92## rts 
$cc93#standing_player_input_right# .) 
\; Player is now running right
\
\ .( 
\ lda #$01
$cc95## sta player_a_direction,x
$cc97## jsr start_running_player
$cc9a## rts 
$cc9b#standing_player_input# .) 
\
\ .( 
\; Do not handle any input if under hitstun
\ lda player_a_hitstun,x
$cc9d## bne end
$cc9f##; Check state changes
\ lda #<controller_inputs
$cca1## sta tmpfield1
$cca3## lda #>controller_inputs
$cca5## sta tmpfield2
$cca7## lda #16
$cca9## sta tmpfield3
$ccab## jmp controller_callbacks
$ccae#jump_input_left#; Player is now jumping
\
\ lda #$00
$ccb0## sta player_a_direction,x
$ccb2## jmp jump_input
$ccb5#jump_input_right#
\ lda #$01
$ccb7## sta player_a_direction,x
$ccb9#jump_input#
\ jsr start_jumping_player
$ccbc## jmp end
$ccbf#tilt_input_left#; Player is now tilting
\
\ lda #$00
$ccc1## sta player_a_direction,x
$ccc3## jmp tilt_input
$ccc6#tilt_input_right#
\ lda #$01
$ccc8## sta player_a_direction,x
$ccca#tilt_input#
\ jsr start_side_tilt_player
$cccd## jmp end
$ccd0#side_special_input_left#; Player is now side specialing
\
\ lda #$00
$ccd2## sta player_a_direction,x
$ccd4## jmp side_special_input
$ccd7#side_special_input_right#
\ lda #$01
$ccd9## sta player_a_direction,x
$ccdb#side_special_input#
\ jsr start_side_special_player
$ccde## jmp end
$cce1#end#
\ rts 
$cce2#controller_inputs#; Impactful controller states and associated callbacks
\; Note - We can put subroutines as callbacks because we have nothing to do after calling it
\;        (sourboutines return to our caller since "called" with jmp)
\
\ .byt %00000010,%00000001,%00001000,%00001000&&%00000001,%00001000&&%00000010
$cce7## .byt %10000000,%00000010&&%10000000,%00000001&&%10000000,%01000000,%01000000&&%00000001
$ccec## .byt %01000000&&%00000010,%00000100&&%10000000,%01000000&&%00001000,%01000000&&%00000100,%00001000&&%10000000
$ccf1## .byt %00000100
$ccf2#controller_callbacks_lo#
\ .byt <standing_player_input_left,<standing_player_input_right,<jump_input,<jump_input_right,<jump_input_left
$ccf7## .byt <start_jabbing_player,<tilt_input_left,<tilt_input_right,<start_special_player,<side_special_input_right
$ccfc## .byt <side_special_input_left,<start_down_tilt_player,<start_spe_up_player,<start_spe_down_player,<start_up_tilt_player
$cd01## .byt <start_shielding_player
$cd02#controller_callbacks_hi#
\ .byt >standing_player_input_left,>standing_player_input_right,>jump_input,>jump_input_right,>jump_input_left
$cd07## .byt >start_jabbing_player,>tilt_input_left,>tilt_input_right,>start_special_player,>side_special_input_right
$cd0c## .byt >side_special_input_left,>start_down_tilt_player,>start_spe_up_player,>start_spe_down_player,>start_up_tilt_player
$cd11## .byt >start_shielding_player
$cd12#controller_default_callback#
\ .word end
$cd14#start_running_player# .) 
\
\ lda #$01
$cd16## sta player_a_state,x
$cd18#set_running_animation#
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_run
$cd1a## sta tmpfield1
$cd1c## lda #>anim_sinbad_run
$cd1e## sta tmpfield2
$cd20## jsr set_player_animation
$cd23##; Set initial velocity
\ lda #$00
$cd25## sta player_a_velocity_h_low,x
$cd27## lda player_a_direction,x
$cd29## cmp #$00
$cd2b## bne direction_right
$cd2d## lda #$ff
$cd2f## jmp set_high_byte
$cd32#direction_right# lda #$01
$cd34#set_high_byte#
\ sta player_a_velocity_h,x
$cd36## rts 
$cd37#running_player# .) 
\; Update a player that is running
\;  register X must contain the player number
\
\ .( 
\; Move the player to the direction he is watching
\ lda player_a_direction,x
$cd39## beq run_left
$cd3b##; Running right, velocity tends toward vector (2,0)
\ lda #$02
$cd3d## sta tmpfield4
$cd3f## lda #$00
$cd41## sta tmpfield3
$cd43## sta tmpfield2
$cd45## sta tmpfield1
$cd47## lda #$40
$cd49## sta tmpfield5
$cd4b## jsr merge_to_player_velocity
$cd4e## jmp end
$cd51#run_left#; Running left, velocity tends toward vector (-2,0)
\
\ lda #$fe
$cd53## sta tmpfield4
$cd55## lda #$00
$cd57## sta tmpfield3
$cd59## sta tmpfield2
$cd5b## sta tmpfield1
$cd5d## lda #$40
$cd5f## sta tmpfield5
$cd61## jsr merge_to_player_velocity
$cd64#end#
\ rts 
$cd65#running_player_input# .) 
\
\ .( 
\; If in hitstun, stop running
\ lda player_a_hitstun,x
$cd67## beq take_input
$cd69## jsr start_standing_player
$cd6c## jmp end
$cd6f#take_input#
\ lda #<controller_inputs
$cd71## sta tmpfield1
$cd73## lda #>controller_inputs
$cd75## sta tmpfield2
$cd77## lda #12
$cd79## sta tmpfield3
$cd7b## jmp controller_callbacks
$cd7e#input_left#; Player is now watching left
\
\ lda #$00
$cd80## cmp player_a_direction,x
$cd82## beq end
$cd84## sta player_a_direction,x
$cd86## jsr set_running_animation
$cd89## jmp end
$cd8c#input_right#; Player is now watching right
\
\ lda #$01
$cd8e## cmp player_a_direction,x
$cd90## beq end
$cd92## sta player_a_direction,x
$cd94## jsr set_running_animation
$cd97## jmp end
$cd9a#tilt_input_left#; Player is now tilting
\
\ lda #$00
$cd9c## sta player_a_direction,x
$cd9e## jmp tilt_input
$cda1#tilt_input_right#
\ lda #$01
$cda3## sta player_a_direction,x
$cda5#tilt_input#
\ jsr start_side_tilt_player
$cda8## jmp end
$cdab#end#
\ rts 
$cdac#controller_inputs#; Impactful controller states and associated callbacks
\; Note - We can put subroutines as callbacks because we have nothing to do after calling it
\;        (sourboutines return to our caller since "called" with jmp)
\
\ .byt %00000010,%00000001,%00001000,%00001000&&%00000001,%00001000&&%00000010
$cdb1## .byt %00000010&&%10000000,%00000001&&%10000000,%01000000,%01000000&&%00000001,%01000000&&%00000010
$cdb6## .byt %01000000&&%00001000,%01000000&&%00000100
$cdb8#controller_callbacks_lo#
\ .byt <input_left,<input_right,<start_jumping_player,<start_jumping_player,<start_jumping_player
$cdbd## .byt <tilt_input_left,<tilt_input_right,<start_special_player,<start_side_special_player,<start_side_special_player
$cdc2## .byt <start_spe_up_player,<start_spe_down_player
$cdc4#controller_callbacks_hi#
\ .byt >input_left,>input_right,>start_jumping_player,>start_jumping_player,>start_jumping_player
$cdc9## .byt >tilt_input_left,>tilt_input_right,>start_special_player,>start_side_special_player,>start_side_special_player
$cdce## .byt >start_spe_up_player,>start_spe_down_player
$cdd0#controller_default_callback#
\ .word start_standing_player
$cdd2#start_falling_player# .) 
\
\ .( 
\ lda #$02
$cdd4## sta player_a_state,x
$cdd6#set_falling_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_falling
$cdd8## sta tmpfield1
$cdda## lda #>anim_sinbad_falling
$cddc## sta tmpfield2
$cdde## jsr set_player_animation
$cde1## rts 
$cde2#falling_player# .) 
\; Update a player that is falling
\;  register X must contain the player number
\
\ .( 
\ jsr aerial_directional_influence
$cde5## jsr apply_gravity
$cde8## rts 
$cde9#start_jumping_player# .) 
\
\ .( 
\ lda #$03
$cdeb## sta player_a_state,x
$cded## lda #0
$cdef## sta player_a_state_field1,x
$cdf1#set_jumping_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_jumping
$cdf3## sta tmpfield1
$cdf5## lda #>anim_sinbad_jumping
$cdf7## sta tmpfield2
$cdf9## jsr set_player_animation
$cdfc## rts 
$cdfd#jumping_player# .) 
\
\ .( 
\; Wait for the preparation to end to begin to jump
\ lda player_a_anim_clock,x
$cdff## cmp #4
$ce01## bcc end
$ce03## beq begin_to_jump
$ce05##; Check if the top of the jump is reached
\ lda player_a_velocity_v,x
$ce07## beq top_reached
$ce09## bpl top_reached
$ce0b##; The top is not reached, stay in jumping state but apply gravity and directional influence
\ jsr falling_player                ; Hack - We just use falling_player which do exactly what we want
$ce0e##; Check if it is time to stop a short-hop
\ lda player_a_velocity_v,x
$ce10## cmp #$fd
$ce12## bcs stop_short_hop
$ce14## jmp end
$ce17#top_reached#; The top is reached, return to falling
\
\ jsr start_falling_player
$ce1a## jmp end
$ce1d#stop_short_hop#; If the jump button is no more pressed mid jump, convert the jump to a short-hop
\
\ lda player_a_state_field1,x              ;
$ce1f## bne end                ; Check for short hop only once
$ce21## inc player_a_state_field1,x              ;
$ce23## lda controller_a_btns,x              ;
$ce25## and #%00001000             ; If the jump button is still pressed, this is not a short-hop
$ce27## bne end                ;
$ce29## lda #$fe             ;
$ce2b## sta player_a_velocity_v,x              ;
$ce2d## sta player_a_velocity_v_low,x              ; Reduce upward momentum to end the jump earlier
$ce2f## jmp end                ;
$ce32#begin_to_jump#; Put initial jumping velocity
\
\ lda #$fa
$ce34## sta player_a_velocity_v,x
$ce36## lda #$c0
$ce38## sta player_a_velocity_v_low,x
$ce3a## jmp end
$ce3d#end#
\ rts 
$ce3e#jumping_player_input# .) 
\
\ .( 
\; The jump is cancellable by grounded movements during preparation
\; and by aerial movements after that
\ lda player_a_num_aerial_jumps,x              ; performing aerial jump, not
$ce40## bne not_grounded                ; grounded
$ce42## lda player_a_anim_clock,x              ;
$ce44## cmp #4             ; Still preparing the jump
$ce46## bcc grounded                ;
$ce48#not_grounded#
\ jsr check_aerial_inputs
$ce4b## jmp end
$ce4e#grounded#
\ lda #<controller_inputs
$ce50## sta tmpfield1
$ce52## lda #>controller_inputs
$ce54## sta tmpfield2
$ce56## lda #2
$ce58## sta tmpfield3
$ce5a## jmp controller_callbacks
$ce5d#end#
\ rts 
$ce5e#controller_inputs#; Impactful controller states and associated callbacks (when still grounded)
\; Note - We can put subroutines as callbacks because we have nothing to do after calling it
\;        (sourboutines return to our caller since "called" with jmp)
\
\ .byt %00001000&&%10000000,%01000000&&%00001000
$ce60#controller_callbacks_lo#
\ .byt <start_up_tilt_player,<start_spe_up_player
$ce62#controller_callbacks_hi#
\ .byt >start_up_tilt_player,>start_spe_up_player
$ce64#controller_default_callback#
\ .word end
$ce66#start_aerial_jumping_player# .) 
\
\ .( 
\; Deny to start jump state if the player used all it's jumps
\ lda #1
$ce68## cmp player_a_num_aerial_jumps,x
$ce6a## bne jump_ok
$ce6c## rts 
$ce6d#jump_ok#
\ inc player_a_num_aerial_jumps,x
$ce6f##; Trick - aerial_jumping set the state to jumping. It is the same state with
\; the starting conditions as the only differences
\ lda #$03
$ce71## sta player_a_state,x
$ce73## lda #$00
$ce75## sta player_a_velocity_v,x
$ce77## lda #$00
$ce79## sta player_a_velocity_v_low,x
$ce7b#set_aerial_jumping_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_aerial_jumping
$ce7d## sta tmpfield1
$ce7f## lda #>anim_sinbad_aerial_jumping
$ce81## sta tmpfield2
$ce83## jsr set_player_animation
$ce86## rts 
$ce87#start_jabbing_player# .) 
\
\ lda #$04
$ce89## sta player_a_state,x
$ce8b#set_jabbing_animation#
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_jab
$ce8d## sta tmpfield1
$ce8f## lda #>anim_sinbad_jab
$ce91## sta tmpfield2
$ce93## jsr set_player_animation
$ce96## rts 
$ce97#jabbing_player# .) 
\
\ .( 
\ lda player_a_anim_clock,x
$ce99## cmp #8
$ce9b## bne end
$ce9d## jsr start_standing_player
$cea0#end#
\ rts 
$cea1#start_thrown_player# .) 
\
\ .( 
\; Set player's state
\ lda #$05
$cea3## sta player_a_state,x
$cea5##; Initialize tech counter
\ lda #0
$cea7## sta player_a_state_field1,x
$cea9#set_thrown_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\ lda #<anim_sinbad_thrown
$ceab## sta tmpfield1
$cead## lda #>anim_sinbad_thrown
$ceaf## sta tmpfield2
$ceb1## jsr set_player_animation
$ceb4##; Set the appropriate animation direction (depending on player's velocity)
\ lda player_a_velocity_h,x
$ceb6## bmi set_anim_left
$ceb8## lda #$01
$ceba## jmp set_anim_dir
$cebd#set_anim_left#
\ lda #$00
$cebf#set_anim_dir#
\ sta player_a_animation_direction,x
$cec1## rts 
$cec2#thrown_player# .) 
\; To tech successfully the tech must be input at maximum TECH_MAX_FRAMES_BEFORE_COLLISION frames before hitting the ground.
\; After expiration of a tech input, it is not possible to input another tech for TECH_NB_FORBIDDEN_FRAMES frames.
\
\ .( 
\; Update velocity
\ lda player_a_hitstun,x
$cec4## bne gravity
$cec6## jsr aerial_directional_influence
$cec9#gravity#
\ jsr apply_gravity
$cecc##; Decrement tech counter (to zero minimum)
\ lda player_a_state_field1,x
$cece## beq end_dec_tech_cnt
$ced0## dec player_a_state_field1,x
$ced2#end_dec_tech_cnt#
\ rts 
$ced3#thrown_player_input# .) 
\
\ .( 
\; Handle controller inputs
\ lda #<controller_inputs
$ced5## sta tmpfield1
$ced7## lda #>controller_inputs
$ced9## sta tmpfield2
$cedb## lda #$03
$cedd## sta tmpfield3
$cedf## jmp controller_callbacks
$cee2#tech_neutral#; If a tech is entered, store it's direction in state_field2
\; and if the counter is at 0, reset it to it's max value.
\
\ lda #$00
$cee4## jmp tech_common
$cee7#tech_right#
\ lda #$01
$cee9## jmp tech_common
$ceec#tech_left#
\ lda #$02
$ceee#tech_common#
\ sta player_a_state_field2,x
$cef0## lda player_a_state_field1,x
$cef2## bne end
$cef4## lda #5+60
$cef6## sta player_a_state_field1,x
$cef8#no_tech#
\ jsr check_aerial_inputs
$cefb#end#
\ rts 
$cefc#controller_inputs#; Impactful controller states and associated callbacks
\
\ .byt %00000100,%00000100&&%00000001,%00000100&&%00000010
$ceff#controller_callbacks_lo#
\ .byt <tech_neutral,<tech_right,<tech_left
$cf02#controller_callbacks_hi#
\ .byt >tech_neutral,>tech_right,>tech_left
$cf05#controller_default_callback#
\ .word no_tech
$cf07#thrown_player_on_ground# .) 
\; Routine to be called when hitting the ground from thrown state
\
\ .( 
\; If the tech counter is bellow the threshold, just crash
\ lda #60
$cf09## cmp player_a_state_field1,x
$cf0b## bcs crash
$cf0d##; A valid tech was entered, land with momentum depending on tech's direction
\ jsr start_landing_player
$cf10## lda player_a_state_field2,x
$cf12## beq no_momentum
$cf14## cmp #$01
$cf16## beq momentum_right
$cf18## lda #$fc
$cf1a## sta player_a_velocity_h,x
$cf1c## lda #$00
$cf1e## sta player_a_velocity_h_low,x
$cf20## jmp end
$cf23#no_momentum#
\ lda #$00
$cf25## sta player_a_velocity_h,x
$cf27## sta player_a_velocity_h_low,x
$cf29## jmp end
$cf2c#momentum_right#
\ lda #$04
$cf2e## sta player_a_velocity_h,x
$cf30## lda #$00
$cf32## sta player_a_velocity_h_low,x
$cf34## jmp end
$cf37#crash#
\ jsr start_crashing_player
$cf3a#end#
\ rts 
$cf3b#start_respawn_player# .) 
\
\ .( 
\; Set the player's state
\ lda #$06
$cf3d## sta player_a_state,x
$cf3f##; Place player to the respawn spot
\ lda #$70
$cf41## sta player_a_x,x
$cf43## lda #$60
$cf45## sta player_a_y,x
$cf47## lda #$00
$cf49## sta player_a_velocity_h,x
$cf4b## sta player_a_velocity_h_low,x
$cf4d## sta player_a_velocity_v,x
$cf4f## sta player_a_velocity_v_low,x
$cf51## sta player_a_damages,x
$cf53##; Initialise state's timer
\ lda #250
$cf55## sta player_a_state_field1,x
$cf57##; Set the appropriate animation
\ lda #<anim_sinbad_respawn
$cf59## sta tmpfield1
$cf5b## lda #>anim_sinbad_respawn
$cf5d## sta tmpfield2
$cf5f## jsr set_player_animation
$cf62## rts 
$cf63#respawn_player# .) 
\
\ .( 
\; Check for timeout
\ dec player_a_state_field1,x
$cf65## bne end
$cf67## jsr start_falling_player
$cf6a#end#
\ rts 
$cf6b#respawn_player_input# .) 
\
\ .( 
\; Avoid doing anything until controller has returned to neutral since after
\; death the player can release buttons without expecting to take action
\ lda controller_a_last_frame_btns,x
$cf6d## bne end
$cf6f##; Call check_aerial_inputs
\;  If it does not change the player state, go to falling state
\;  so that any button press makes the player falls from revival
\;  platform
\ jsr check_aerial_inputs
$cf72## lda player_a_state,x
$cf74## cmp #$06
$cf76## bne end
$cf78## jsr start_falling_player
$cf7b#end#
\ rts 
$cf7c#start_side_tilt_player# .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_side_tilt
$cf7e## sta tmpfield1
$cf80## lda #>anim_sinbad_side_tilt
$cf82## sta tmpfield2
$cf84## jsr set_player_animation
$cf87##; Set the player's state
\ lda #$07
$cf89## sta player_a_state,x
$cf8b##; Set initial velocity
\ lda #$fd
$cf8d## sta player_a_velocity_v,x
$cf8f## lda #$80
$cf91## sta player_a_velocity_v_low,x
$cf93## lda player_a_direction,x
$cf95## beq set_velocity_left
$cf97## lda #$04
$cf99## sta player_a_velocity_h,x
$cf9b## jmp end_set_velocity
$cf9e#set_velocity_left#
\ lda #$fb
$cfa0## sta player_a_velocity_h,x
$cfa2#end_set_velocity#
\ lda #$80
$cfa4## sta player_a_velocity_h_low,x
$cfa6## rts 
$cfa7#side_tilt_player# .) 
\; Update a player that is performing a side tilt
\;  register X must contain the player number
\
\ .( 
\ lda player_a_anim_clock,x
$cfa9## cmp #21
$cfab## bne update_velocity
$cfad## jsr start_standing_player
$cfb0## jmp end
$cfb3#update_velocity#
\ lda #$01
$cfb5## sta tmpfield3
$cfb7## lda #$00
$cfb9## sta tmpfield4
$cfbb## sta tmpfield1
$cfbd## sta tmpfield2
$cfbf## lda #$80
$cfc1## sta tmpfield5
$cfc3## jsr merge_to_player_velocity
$cfc6#end#
\ rts 
$cfc7#start_special_player# .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_special
$cfc9## sta tmpfield1
$cfcb## lda #>anim_sinbad_special
$cfcd## sta tmpfield2
$cfcf## jsr set_player_animation
$cfd2##; Set the player's state
\ lda #$08
$cfd4## sta player_a_state,x
$cfd6##; Place the player above ground
\ lda player_a_y,x
$cfd8## sec 
$cfd9## sbc #$10
$cfdb## sta player_a_y,x
$cfdd## rts 
$cfde#special_player# .) 
\; Update a player that is performing a grounded neutral special move
\;  register X must contain the player number
\
\ .( 
\ rts 
$cfdf#special_player_input# .) 
\
\ .( 
\ lda controller_a_btns,x
$cfe1## cmp #%01000000
$cfe3## beq end
$cfe5## jsr start_standing_player
$cfe8#end#
\ rts 
$cfe9#start_side_special_player# .) 
\
\ .( 
\; Set state
\ lda #$09
$cfeb## sta player_a_state,x
$cfed##; Set initial velocity
\ lda #$00
$cfef## sta player_a_velocity_h_low,x
$cff1## sta player_a_velocity_h,x
$cff3## sta player_a_velocity_v_low,x
$cff5## sta player_a_velocity_v,x
$cff7##; Set substate to "charging"
\ sta player_a_state_field1,x
$cff9#set_side_special_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_side_special_charge
$cffb## sta tmpfield1
$cffd## lda #>anim_sinbad_side_special_charge
$cfff## sta tmpfield2
$d001## jsr set_player_animation
$d004## rts 
$d005#side_special_player# .) 
\
\ .( 
\; Move if the substate is set to moving
\ lda player_a_state_field1,x
$d007## bne moving
$d009##; Check if there is reason to begin to move
\ lda player_a_anim_clock,x
$d00b## cmp #120
$d00d## bcs start_moving
$d00f## lda controller_a_btns,x
$d011## cmp #%01000000&&%00000001
$d013## beq not_moving
$d015## cmp #%01000000&&%00000010
$d017## bne start_moving
$d019#not_moving#
\ jmp end
$d01c#start_moving#
\; Set substate to "moving"
\ lda #$01
$d01e## sta player_a_state_field1,x
$d020##; Store fly duration (fly_duration = 5 + charge_duration / 8)
\ lda player_a_anim_clock,x
$d022## lsr 
$d023## lsr 
$d024## lsr 
$d025## clc 
$d026## adc #5
$d028## sta player_a_state_field2,x
$d02a##; Set the movement animation
\ lda #<anim_sinbad_side_special_jump
$d02c## sta tmpfield1
$d02e## lda #>anim_sinbad_side_special_jump
$d030## sta tmpfield2
$d032## jsr set_player_animation
$d035#moving#
\; Set vertical velocity (fixed)
\ lda #$ff
$d037## sta player_a_velocity_v,x
$d039## lda #$80
$d03b## sta player_a_velocity_v_low,x
$d03d##; Set horizontal velocity (depending on direction)
\ lda player_a_direction,x
$d03f## cmp #$00
$d041## bne right_velocity
$d043## lda #$fc
$d045## jmp set_h_velocity
$d048#right_velocity#
\ lda #$04
$d04a#set_h_velocity#
\ sta player_a_velocity_h,x
$d04c## lda #$00
$d04e## sta player_a_velocity_h_low,x
$d050##; After move's time is out, go to helpless state
\ lda player_a_anim_clock,x
$d052## cmp player_a_state_field2,x
$d054## bne end
$d056## jsr start_helpless_player
$d059#end#
\ rts 
$d05a#start_helpless_player# .) 
\
\ .( 
\; Set state
\ lda #$0a
$d05c## sta player_a_state,x
$d05e#set_helpless_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_helpless
$d060## sta tmpfield1
$d062## lda #>anim_sinbad_helpless
$d064## sta tmpfield2
$d066## jsr set_player_animation
$d069## rts 
$d06a#helpless_player# .) 
\; Update a player that is helplessly falling
\
\ .( 
\ jsr falling_player
$d06d## rts 
$d06e#start_landing_player# .) 
\
\ .( 
\; Set state
\ lda #$0b
$d070## sta player_a_state,x
$d072##; Cap initial velocity
\ lda player_a_velocity_h,x
$d074## jsr absolute_a
$d077## cmp #$03
$d079## bcs set_cap
$d07b## jmp set_landing_animation
$d07e#set_cap#
\ lda player_a_velocity_h,x
$d080## bmi negative_cap
$d082## lda #$02
$d084## sta player_a_velocity_h,x
$d086## lda #$00
$d088## sta player_a_velocity_h_low,x
$d08a## jmp set_landing_animation
$d08d#negative_cap#
\ lda #$fe
$d08f## sta player_a_velocity_h,x
$d091## lda #$00
$d093## sta player_a_velocity_h_low,x
$d095#set_landing_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_landing
$d097## sta tmpfield1
$d099## lda #>anim_sinbad_landing
$d09b## sta tmpfield2
$d09d## jsr set_player_animation
$d0a0## rts 
$d0a1#landing_player# .) 
\
\ .( 
\; Do not move, velocity tends toward vector (0,0)
\ lda #$00
$d0a3## sta tmpfield4
$d0a5## sta tmpfield3
$d0a7## sta tmpfield2
$d0a9## sta tmpfield1
$d0ab## lda #$40
$d0ad## sta tmpfield5
$d0af## jsr merge_to_player_velocity
$d0b2##; After move's time is out, go to standing state
\ lda player_a_anim_clock,x
$d0b4## cmp #6
$d0b6## bne end
$d0b8## jsr start_standing_player
$d0bb#end#
\ rts 
$d0bc#start_crashing_player# .) 
\
\ .( 
\; Set state
\ lda #$0c
$d0be## sta player_a_state,x
$d0c0#set_crashing_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_crashing
$d0c2## sta tmpfield1
$d0c4## lda #>anim_sinbad_crashing
$d0c6## sta tmpfield2
$d0c8## jsr set_player_animation
$d0cb##; Play crash sound
\ jsr audio_play_crash
$d0ce## rts 
$d0cf#crashing_player# .) 
\
\ .( 
\; Do not move, velocity tends toward vector (0,0)
\ lda #$00
$d0d1## sta tmpfield4
$d0d3## sta tmpfield3
$d0d5## sta tmpfield2
$d0d7## sta tmpfield1
$d0d9## lda #$80
$d0db## sta tmpfield5
$d0dd## jsr merge_to_player_velocity
$d0e0##; After move's time is out, go to standing state
\ lda player_a_anim_clock,x
$d0e2## cmp #30
$d0e4## bne end
$d0e6## jsr start_standing_player
$d0e9#end#
\ rts 
$d0ea#start_down_tilt_player# .) 
\
\ .( 
\; Set state
\ lda #$0d
$d0ec## sta player_a_state,x
$d0ee#set_down_tilt_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_down_tilt
$d0f0## sta tmpfield1
$d0f2## lda #>anim_sinbad_down_tilt
$d0f4## sta tmpfield2
$d0f6## jsr set_player_animation
$d0f9## rts 
$d0fa#down_tilt_player# .) 
\
\ .( 
\; Do not move, velocity tends toward vector (0,0)
\ lda #$00
$d0fc## sta tmpfield4
$d0fe## sta tmpfield3
$d100## sta tmpfield2
$d102## sta tmpfield1
$d104## lda #$80
$d106## sta tmpfield5
$d108## jsr merge_to_player_velocity
$d10b##; After move's time is out, go to standing state
\ lda player_a_anim_clock,x
$d10d## cmp #21
$d10f## bne end
$d111## jsr start_standing_player
$d114#end#
\ rts 
$d115#start_aerial_side_player# .) 
\
\ .( 
\; Set state
\ lda #$0e
$d117## sta player_a_state,x
$d119#set_aerial_side_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_aerial_side
$d11b## sta tmpfield1
$d11d## lda #>anim_sinbad_aerial_side
$d11f## sta tmpfield2
$d121## jsr set_player_animation
$d124## rts 
$d125#aerial_side_player# .) 
\
\ .( 
\ jsr apply_gravity
$d128##; Wait for move's timeout
\ lda player_a_anim_clock,x
$d12a## cmp #25
$d12c## bne end
$d12e## jsr start_falling_player
$d131#end#
\ rts 
$d132#start_aerial_down_player# .) 
\
\ .( 
\; Set state
\ lda #$0f
$d134## sta player_a_state,x
$d136#set_aerial_down_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_aerial_down
$d138## sta tmpfield1
$d13a## lda #>anim_sinbad_aerial_down
$d13c## sta tmpfield2
$d13e## jsr set_player_animation
$d141## rts 
$d142#aerial_down_player# .) 
\
\ .( 
\ jsr apply_gravity
$d145##; Wait for move's timeout
\ lda player_a_anim_clock,x
$d147## cmp #21
$d149## bne end
$d14b## jsr start_falling_player
$d14e#end#
\ rts 
$d14f#start_aerial_up_player# .) 
\
\ .( 
\; Set state
\ lda #$10
$d151## sta player_a_state,x
$d153#set_aerial_up_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_aerial_up
$d155## sta tmpfield1
$d157## lda #>anim_sinbad_aerial_up
$d159## sta tmpfield2
$d15b## jsr set_player_animation
$d15e## rts 
$d15f#aerial_up_player# .) 
\
\ .( 
\ jsr apply_gravity
$d162##; Wait for move's timeout
\ lda player_a_anim_clock,x
$d164## cmp #32
$d166## bne end
$d168## jsr start_falling_player
$d16b#end#
\ rts 
$d16c#start_aerial_neutral_player# .) 
\
\ .( 
\; Set state
\ lda #$11
$d16e## sta player_a_state,x
$d170#set_aerial_neutral_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_aerial_neutral
$d172## sta tmpfield1
$d174## lda #>anim_sinbad_aerial_neutral
$d176## sta tmpfield2
$d178## jsr set_player_animation
$d17b## rts 
$d17c#aerial_neutral_player# .) 
\
\ .( 
\ jsr apply_gravity
$d17f##; Wait for move's timeout
\ lda player_a_anim_clock,x
$d181## cmp #12
$d183## bne end
$d185## jsr start_falling_player
$d188#end#
\ rts 
$d189#start_aerial_spe_player# .) 
\
\ .( 
\; Set state
\ lda #$12
$d18b## sta player_a_state,x
$d18d#set_aerial_spe_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_aerial_spe
$d18f## sta tmpfield1
$d191## lda #>anim_sinbad_aerial_spe
$d193## sta tmpfield2
$d195## jsr set_player_animation
$d198## rts 
$d199#aerial_spe_player# .) 
\
\ .( 
\ jsr aerial_directional_influence
$d19c##; Never move upward in this state
\ lda player_a_velocity_v,x
$d19e## bpl end_max_velocity
$d1a0## lda #$00
$d1a2## sta player_a_velocity_v,x
$d1a4## sta player_a_velocity_v_low,x
$d1a6#end_max_velocity#
\; Special fall speed - particularily slow
\ lda player_a_velocity_h,x
$d1a8## sta tmpfield4
$d1aa## lda player_a_velocity_h_low,x
$d1ac## sta tmpfield2
$d1ae## lda #$01
$d1b0## sta tmpfield3
$d1b2## lda #$00
$d1b4## sta tmpfield1
$d1b6## lda #$10
$d1b8## sta tmpfield5
$d1ba## jsr merge_to_player_velocity
$d1bd## rts 
$d1be#start_spe_up_player# .) 
\
\ .( 
\; Set state
\ lda #$13
$d1c0## sta player_a_state,x
$d1c2##; Set initial velocity
\ lda #$00
$d1c4## sta player_a_velocity_h_low,x
$d1c6## sta player_a_velocity_h,x
$d1c8## sta player_a_velocity_v_low,x
$d1ca## sta player_a_velocity_v,x
$d1cc##; Set substate to "charging"
\ sta player_a_state_field1,x
$d1ce#set_spe_up_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_spe_up_prepare
$d1d0## sta tmpfield1
$d1d2## lda #>anim_sinbad_spe_up_prepare
$d1d4## sta tmpfield2
$d1d6## jsr set_player_animation
$d1d9## rts 
$d1da#spe_up_player# .) 
\
\ .( 
\; Move if the substate is set to moving
\ lda player_a_state_field1,x
$d1dc## bne moving
$d1de##; Check if there is reason to begin to move
\ lda player_a_anim_clock,x
$d1e0## cmp #3
$d1e2## bcs start_moving
$d1e4#not_moving#
\ jmp end
$d1e7#start_moving#
\; Set substate to "moving"
\ lda #$01
$d1e9## sta player_a_state_field1,x
$d1eb##; Set jumping velocity
\ lda #$fa
$d1ed## sta player_a_velocity_v,x
$d1ef## lda #$00
$d1f1## sta player_a_velocity_v_low,x
$d1f3##; Set the movement animation
\ lda #<anim_sinbad_spe_up_jump
$d1f5## sta tmpfield1
$d1f7## lda #>anim_sinbad_spe_up_jump
$d1f9## sta tmpfield2
$d1fb## jsr set_player_animation
$d1fe#moving#
\; Return to falling when the top is reached
\ lda player_a_velocity_v,x
$d200## beq top_reached
$d202## bpl top_reached
$d204##; The top is not reached, stay in special upward state but apply gravity and directional influence
\ jsr aerial_directional_influence
$d207## jsr apply_gravity
$d20a## jmp end
$d20d#top_reached#
\ jsr start_helpless_player
$d210## jmp end
$d213#end#
\ rts 
$d214#start_spe_down_player# .) 
\
\ .( 
\; Set state
\ lda #$14
$d216## sta player_a_state,x
$d218#set_spe_down_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_spe_down
$d21a## sta tmpfield1
$d21c## lda #>anim_sinbad_spe_down
$d21e## sta tmpfield2
$d220## jsr set_player_animation
$d223## rts 
$d224#spe_down_player# .) 
\
\ .( 
\ jsr apply_gravity
$d227##; Wait for move's timeout
\ lda player_a_anim_clock,x
$d229## cmp #21
$d22b## bne end
$d22d##; Return to falling or standing
\ jsr check_on_ground
$d230## beq on_ground
$d232## jsr start_falling_player
$d235## jmp end
$d238#on_ground# jsr start_standing_player
$d23b#end#
\ rts 
$d23c#start_up_tilt_player# .) 
\
\ .( 
\; Set state
\ lda #$15
$d23e## sta player_a_state,x
$d240#set_up_tilt_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_up_tilt
$d242## sta tmpfield1
$d244## lda #>anim_sinbad_up_tilt
$d246## sta tmpfield2
$d248## jsr set_player_animation
$d24b## rts 
$d24c#up_tilt_player# .) 
\
\ .( 
\; Do not move, velocity tends toward vector (0,0)
\ lda #$00
$d24e## sta tmpfield4
$d250## sta tmpfield3
$d252## sta tmpfield2
$d254## sta tmpfield1
$d256## lda #$80
$d258## sta tmpfield5
$d25a## jsr merge_to_player_velocity
$d25d##; After move's time is out, go to standing state
\ lda player_a_anim_clock,x
$d25f## cmp #20
$d261## bne end
$d263## jsr start_standing_player
$d266#end#
\ rts 
$d267#start_shielding_player# .) 
\
\ .( 
\; Set state
\ lda #$16
$d269## sta player_a_state,x
$d26b#set_shielding_animation#; Fallthrough to set the animation
\ .) 
\
\ .( 
\; Set the appropriate animation
\ lda #<anim_sinbad_shielding_full
$d26d## sta tmpfield1
$d26f## lda #>anim_sinbad_shielding_full
$d271## sta tmpfield2
$d273## jsr set_player_animation
$d276##; Cancel momentum
\ lda #$00
$d278## sta player_a_velocity_h_low
$d27a## sta player_a_velocity_h
$d27c##; Set shield as full life
\ lda #2
$d27e## sta player_a_state_field1,x
$d280## rts 
$d281#shielding_player# .) 
\
\ .( 
\; After move's time is out, go to standing state
\ lda player_a_anim_clock,x
$d283## cmp #20
$d285## bne end
$d287## jsr start_standing_player
$d28a#end#
\ rts 
$d28b#shielding_player_input# .) 
\
\ .( 
\; Do the same as standing player, except all buttons are released (start standing in this case)
\ lda controller_a_btns,x
$d28d## beq end_shield
$d28f## jsr standing_player_input
$d292## jmp end
$d295#end_shield#
\ jsr start_standing_player
$d298#end#
\ rts 
$d299#shielding_player_hurt# .) 
\
\ .( 
\stroke_player=tmpfield11
\; Reduce shield's life
\ dec player_a_state_field1,x
$d29b##; Select what to do according to shield's life
\ lda player_a_state_field1,x
$d29d## beq limit_shield
$d29f## cmp #1
$d2a1## beq partial_shield
$d2a3##; Break the shield, derived from normal hurt with
\
\;  Knockback * 2
\;  Screen shaking * 4
\;  Special sound
\ jsr hurt_player
$d2a6## ldx stroke_player
$d2a8## asl player_a_velocity_h_low,x
$d2aa## rol player_a_velocity_h,x
$d2ac## asl player_a_velocity_v_low,x
$d2ae## rol player_a_velocity_v,x
$d2b0## asl player_a_hitstun,x
$d2b2## asl screen_shake_counter
$d2b4## asl screen_shake_counter
$d2b6## jsr audio_play_shield_break
$d2b9## jmp end
$d2bc#partial_shield#; Get the animation corresponding to the shield's life
\
\ lda #<anim_sinbad_shielding_partial
$d2be## sta tmpfield1
$d2c0## lda #>anim_sinbad_shielding_partial
$d2c2## jmp still_shield
$d2c5#limit_shield#
\ lda #<anim_sinbad_shielding_limit
$d2c7## sta tmpfield1
$d2c9## lda #>anim_sinbad_shielding_limit
$d2cb#still_shield#
\; Set the new shield animation
\ sta tmpfield2
$d2cd## jsr set_player_animation
$d2d0##; Play sound
\ jsr audio_play_shield_hit
$d2d3#end#
\; Disable the hitbox to avoid multi-hits
\ jsr switch_selected_player
$d2d6## lda #$00
$d2d8## sta player_a_hitbox_enabled,x
$d2da## rts 
$d2db#check_on_ground# .) 
\; Check if the player is on ground
\;  register X - Player number
\;
\; Sets Z flag if on ground, else unset it
\;
\; Overwrites register A
\
\ .( 
\ lda player_a_x,x
$d2dd## cmp #$21-1
$d2df## bcc offground
$d2e1## lda #$d7+1
$d2e3## cmp player_a_x,x
$d2e5## bcc offground
$d2e7## lda player_a_y,x
$d2e9## cmp #$81-1
$d2eb## bne offground
$d2ed## lda player_a_y_low,x
$d2ef## cmp #$ff
$d2f1#end#;bne offground ; useless as we do nothing anyway
\; Z flag is already set if on ground (ensured by passing the last "bne")
\; Z flag is already unset if off gound (ensured by "bcc" and "bne")
\;  So there is nothing more to do
\
\
\ rts 
$d2f2#check_collision# .) 
\; Check if a movement collide with an obstacle
\;  tmpfield1 - Original position X
\;  tmpfield2 - Original position Y
\;  tmpfield3 - Final position X (high byte)
\;  tmpfield4 - Final position Y (high byte)
\;  tmpfield5 - Obstacle top-left X
\;  tmpfield6 - Obstacle top-left Y
\;  tmpfield7 - Obstacle bottom-right X
\;  tmpfield8 - Obstacle bottom-right Y
\;  tmpfield9 - Final position X (low byte)
\;  tmpfield10 - Final position Y (low byte)
\;
\; tmpfield3, tmpfield4, tmpfield9 and tmpfield10 are rewritten with a final position that do not pass through obstacle.
\
\ .( 
\; Better names for labels
\orig_x=tmpfield1
\orig_y=tmpfield2
\final_x=tmpfield3
\final_y=tmpfield4
\obstacle_left=tmpfield5
\obstacle_top=tmpfield6
\obstacle_right=tmpfield7
\obstacle_bottom=tmpfield8
\final_x_low=tmpfield9
\final_y_low=tmpfield10
\; Check collision with left edge
\ lda final_y                ;
$d2f4## cmp obstacle_top                ;
$d2f6## bcc top_edge                ; Skip lateral edges collision checks if
$d2f8## lda obstacle_bottom                ; the player is over or under the obstacle
$d2fa## cmp final_y                ;
$d2fc## bcc top_edge                ;
$d2fe## lda orig_x                ; Set final_x to obstacle_left if original position
$d300## cmp obstacle_left                ; is on the left of the edge and final position on
$d302## bcs right_edge                ; the right of the edge.
$d304## lda final_x                ;
$d306## cmp obstacle_left                ; When high bytes are equal to obstacle_left ensure low byte
$d308## bcc right_edge                ; is 0, this is a limitation if origx_x_low differs from 0
$d30a## lda obstacle_left                ; since the point is already inside the obstacle. Should
$d30c## sta final_x                ; work as long as points never fo in obstacles. Else inside
$d30e## dec final_x                ; obstacle for less than one pixel is considered outside.
$d310## lda #$ff             ;
$d312## sta final_x_low                ;
$d314#right_edge#; Check collision with right edge
\
\ lda obstacle_right
$d316## cmp orig_x
$d318## bcs top_edge
$d31a## lda obstacle_right
$d31c## cmp final_x
$d31e## bcc top_edge
$d320## sta final_x
$d322## inc final_x
$d324## lda #$00
$d326## sta final_x_low
$d328#top_edge#; Check collision with top edge
\
\ lda final_x                ;
$d32a## cmp obstacle_left                ;
$d32c## bcc end                ; Skip horizontal edges collision checks if
$d32e## lda obstacle_right                ; the player is aside of the obstacle
$d330## cmp final_x                ;
$d332## bcc end                ;
$d334## lda orig_y
$d336## cmp obstacle_top
$d338## bcs bot_edge
$d33a## lda final_y
$d33c## cmp obstacle_top
$d33e## bcc bot_edge
$d340## lda obstacle_top
$d342## sta final_y
$d344## dec final_y
$d346## lda #$ff
$d348## sta final_y_low
$d34a#bot_edge#; Check collision with bottom edge
\
\ lda obstacle_bottom
$d34c## cmp orig_y
$d34e## bcs end
$d350## lda obstacle_bottom
$d352## cmp final_y
$d354## bcc end
$d356## sta final_y
$d358## inc final_y
$d35a## lda #$00
$d35c## sta final_y_low
$d35e#end#
\ rts 
$d35f#boxes_overlap# .) 
\; Check if two rectangles collide
\;  tmpfield1 - Rectangle 1 left
\;  tmpfield2 - Rectangle 1 right
\;  tmpfield3 - Rectangle 1 top
\;  tmpfield4 - Rectangle 1 bottom
\;  tmpfield5 - Rectangle 2 left
\;  tmpfield6 - Rectangle 2 right
\;  tmpfield7 - Rectangle 2 top
\;  tmpfield8 - Rectangle 2 botto
\;
\; tmpfield9 is set to #$00 if rectangles overlap, or to #$01 otherwise
\
\ .( 
\rect1_left=tmpfield1
\rect1_right=tmpfield2
\rect1_top=tmpfield3
\rect1_bottom=tmpfield4
\rect2_left=tmpfield5
\rect2_right=tmpfield6
\rect2_top=tmpfield7
\rect2_bottom=tmpfield8
\; No overlap possible if left of rect1 is on the right of rect2
\ lda rect1_left
$d361## cmp rect2_right
$d363## bcs no_overlap
$d365##; No overlap possible if left of rect2 is on the right of rect1
\ lda rect2_left
$d367## cmp rect1_right
$d369## bcs no_overlap
$d36b##; No overlap possible if top of rect1 is lower than bottom of rect2
\ lda rect1_top
$d36d## cmp rect2_bottom
$d36f## bcs no_overlap
$d371##; No overlap possible if top of rect1 is lower than bottom of rect2
\ lda rect2_top
$d373## cmp rect1_bottom
$d375## bcs no_overlap
$d377##; No impossibility found, rectangles overlap at least partially
\ lda #$00
$d379## sta tmpfield9
$d37b## jmp end
$d37e#no_overlap#; No overlap found
\
\ lda #$01
$d380## sta tmpfield9
$d382#end#
\ rts 
$d383#audio_init# .) 
\
\ .( 
\; Enable music by default
\ lda #$01
$d385## sta audio_music_enabled
$d387##; Start with main music
\ jsr audio_music_weak
$d38a## rts 
$d38b#audio_mute_music# .) 
\
\ .( 
\ lda #$00
$d38d## sta audio_music_enabled
$d38f## lda #%00001000             ; ---DNT21
$d391## sta APU_STATUS                ;
$d394## rts 
$d395#audio_unmute_music# .) 
\
\ .( 
\ lda #$01
$d397## sta audio_music_enabled
$d399## lda #%00001011             ; ---DNT21
$d39b## sta APU_STATUS                ;
$d39e## rts 
$d39f#audio_music_power# .) 
\
\ .( 
\ lda audio_music_enabled
$d3a1## beq disabled
$d3a3## lda #%00001111             ; ---DNT21
$d3a5## sta APU_STATUS                ;
$d3a8## jmp end_enabled_check
$d3ab#disabled#
\ lda #%00001000             ; ---DNT21
$d3ad## sta APU_STATUS                ;
$d3b0#end_enabled_check#
\ lda #%10000000
$d3b2## sta audio_duty
$d3b4## lda #<music_main_square1
$d3b6## sta audio_square1_track
$d3b8## lda #>music_main_square1
$d3ba## sta audio_square1_track+1
$d3bc## lda #<music_main_square2
$d3be## sta audio_square2_track
$d3c0## lda #>music_main_square2
$d3c2## sta audio_square2_track+1
$d3c4## lda #<music_main_triangle
$d3c6## sta audio_triangle_track
$d3c8## lda #>music_main_triangle
$d3ca## sta audio_triangle_track+1
$d3cc## jsr audio_reset_music
$d3cf## rts 
$d3d0#audio_music_weak# .) 
\
\ .( 
\ lda audio_music_enabled
$d3d2## beq disabled
$d3d4## lda #%00001011             ; ---DNT21
$d3d6## sta APU_STATUS                ;
$d3d9## jmp end_enabled_check
$d3dc#disabled#
\ lda #%00001000             ; ---DNT21
$d3de## sta APU_STATUS                ;
$d3e1#end_enabled_check#
\ lda #%10000000
$d3e3## sta audio_duty
$d3e5## lda #<music_main_square1
$d3e7## sta audio_square1_track
$d3e9## lda #>music_main_square1
$d3eb## sta audio_square1_track+1
$d3ed## lda #<music_main_square2
$d3ef## sta audio_square2_track
$d3f1## lda #>music_main_square2
$d3f3## sta audio_square2_track+1
$d3f5## lda #<music_main_triangle
$d3f7## sta audio_triangle_track
$d3f9## lda #>music_main_triangle
$d3fb## sta audio_triangle_track+1
$d3fd## jsr audio_reset_music
$d400## rts 
$d401#audio_music_gameover# .) 
\
\ .( 
\ lda audio_music_enabled
$d403## beq disabled
$d405## lda #%00001111             ; ---DNT21
$d407## sta APU_STATUS                ;
$d40a## jmp end_enabled_check
$d40d#disabled#
\ lda #%00001000             ; ---DNT21
$d40f## sta APU_STATUS                ;
$d412#end_enabled_check#
\ lda #%00000000
$d414## sta audio_duty
$d416## lda #<music_gameover_square1
$d418## sta audio_square1_track
$d41a## lda #>music_gameover_square1
$d41c## sta audio_square1_track+1
$d41e## lda #<music_gameover_square2
$d420## sta audio_square2_track
$d422## lda #>music_gameover_square2
$d424## sta audio_square2_track+1
$d426## lda #<music_gameover_triangle
$d428## sta audio_triangle_track
$d42a## lda #>music_gameover_triangle
$d42c## sta audio_triangle_track+1
$d42e## jsr audio_reset_music
$d431## rts 
$d432#audio_reset_music# .) 
\
\ .( 
\ lda #$00
$d434## ldx #0
$d436#reset_counter#
\ sta audio_square1_counter,x
$d438## inx 
$d439## cpx #6
$d43b## bne reset_counter
$d43d## rts 
$d43e#audio_play_crash# .) 
\
\ .( 
\ lda #%00000100             ; --LCVVVV
$d440## sta APU_NOISE_ENVELOPE                ;
$d443## lda #%00001100             ; L---PPPP
$d445## sta APU_NOISE_PERIOD                ;
$d448## lda #%00001000             ; LLLLL---
$d44a## sta APU_NOISE_LENGTH_CNT
$d44d## rts 
$d44e#audio_play_death# .) 
\
\ .( 
\ lda #%00000100             ; --LCVVVV
$d450## sta APU_NOISE_ENVELOPE                ;
$d453## lda #%10001101             ; L---PPPP
$d455## sta APU_NOISE_PERIOD                ;
$d458## lda #%00001000             ; LLLLL---
$d45a## sta APU_NOISE_LENGTH_CNT
$d45d## rts 
$d45e#audio_play_hit# .) 
\
\ .( 
\ lda #%00000100             ; --LCVVVV
$d460## sta APU_NOISE_ENVELOPE                ;
$d463## lda #%00000111             ; L---PPPP
$d465## sta APU_NOISE_PERIOD                ;
$d468## lda #%10110000             ; LLLLL---
$d46a## sta APU_NOISE_LENGTH_CNT
$d46d## rts 
$d46e#audio_play_parry# .) 
\
\ .( 
\ lda #%00000010             ; --LCVVVV
$d470## sta APU_NOISE_ENVELOPE                ;
$d473## lda #%00000111             ; L---PPPP
$d475## sta APU_NOISE_PERIOD                ;
$d478## lda #%10110000             ; LLLLL---
$d47a## sta APU_NOISE_LENGTH_CNT
$d47d## rts 
$d47e#audio_play_shield_hit# .) 
\
\ .( 
\ lda #%00000010             ; --LCVVVV
$d480## sta APU_NOISE_ENVELOPE                ;
$d483## lda #%00000111             ; L---PPPP
$d485## sta APU_NOISE_PERIOD                ;
$d488## lda #%10110000             ; LLLLL---
$d48a## sta APU_NOISE_LENGTH_CNT
$d48d## rts 
$d48e#audio_play_shield_break# .) 
\
\ .( 
\ lda #%00000100             ; --LCVVVV
$d490## sta APU_NOISE_ENVELOPE                ;
$d493## lda #%00001011             ; L---PPPP
$d495## sta APU_NOISE_PERIOD                ;
$d498## lda #%10110000             ; LLLLL---
$d49a## sta APU_NOISE_LENGTH_CNT
$d49d## rts 
$d49e#audio_music_tick# .) 
\
\ .( 
\music=tmpfield3
\audio_counter=tmpfield5
\audio_note_counter=tmpfield6
\square_registers=tmpfield7
\ lda #$00
$d4a0## sta audio_channel_mode
$d4a2## lda audio_square1_track
$d4a4## sta music
$d4a6## lda audio_square1_track+1
$d4a8## sta music+1
$d4aa## lda audio_square1_counter
$d4ac## sta audio_counter
$d4ae## lda audio_square1_note_counter
$d4b0## sta audio_note_counter
$d4b2## lda #$00
$d4b4## sta square_registers
$d4b6## jsr square_channel_tick
$d4b9## lda audio_counter
$d4bb## sta audio_square1_counter
$d4bd## lda audio_note_counter
$d4bf## sta audio_square1_note_counter
$d4c1## lda audio_square2_track
$d4c3## sta music
$d4c5## lda audio_square2_track+1
$d4c7## sta music+1
$d4c9## lda audio_square2_counter
$d4cb## sta audio_counter
$d4cd## lda audio_square2_note_counter
$d4cf## sta audio_note_counter
$d4d1## lda #$04
$d4d3## sta square_registers
$d4d5## jsr square_channel_tick
$d4d8## lda audio_counter
$d4da## sta audio_square2_counter
$d4dc## lda audio_note_counter
$d4de## sta audio_square2_note_counter
$d4e0## lda #$01
$d4e2## sta audio_channel_mode
$d4e4## lda audio_triangle_track
$d4e6## sta music
$d4e8## lda audio_triangle_track+1
$d4ea## sta music+1
$d4ec## lda audio_triangle_counter
$d4ee## sta audio_counter
$d4f0## lda audio_triangle_note_counter
$d4f2## sta audio_note_counter
$d4f4## lda #$08
$d4f6## sta square_registers
$d4f8## jsr square_channel_tick
$d4fb## lda audio_counter
$d4fd## sta audio_triangle_counter
$d4ff## lda audio_note_counter
$d501## sta audio_triangle_note_counter
$d503## rts 
$d504#square_channel_tick#
\ .( 
\; Decrement note counter
\;  When it reach 0 mute the music for one frame
\;  When it reach -1, begin to play the next note
\ lda audio_note_counter
$d506## cmp #$ff
$d508## beq next_note
$d50a## cmp #0
$d50c## bne dec_note_counter
$d50e## lda audio_channel_mode                ; Hack, do not mute for triangle at the end of a note
$d510## bne next_note                ;
$d512## jsr mute_current_channel
$d515#dec_note_counter#
\ dec audio_note_counter
$d517## jmp end
$d51a#next_note#
\; Point on next entry
\ lda audio_counter
$d51c## clc 
$d51d## adc audio_counter
$d51f## adc audio_counter
$d521## tay 
$d522## lda (music),y
$d524## asl 
$d525## tax 
$d526## lda opcodes,x
$d529## sta tmpfield1
$d52b## lda opcodes+1,x
$d52e## sta tmpfield2
$d530## jmp (tmpfield1)
$d533#loop#
\ .( 
\ lda #$ff
$d535## sta audio_counter
$d537## sta audio_note_counter
$d539## jmp next_entry
$d53c#silence# .) 
\
\ .( 
\ jsr mute_current_channel
$d53f## iny 
$d540## lda (music),y
$d542## sta audio_note_counter
$d544## jmp next_entry
$d547#play_note# .) 
\
\ .( 
\; Play the note
\ lda audio_channel_mode
$d549## cmp #$01
$d54b## beq play_triangle
$d54d## lda #$00
$d54f## jsr point_to_register
$d552## lda #%00111100             ; DDLCVVVV
$d554## ora audio_duty                ;
$d556## sta $4000,x            ;
$d559## lda #$01
$d55b## jsr point_to_register
$d55e## lda #%01000000             ; EPPPNSSS
$d560## sta $4000,x            ;
$d563## iny 
$d564## iny 
$d565## lda #$02
$d567## jsr point_to_register
$d56a## lda (music),y            ; TTTTTTTT
$d56c## sta $4000,x            ;
$d56f## dey 
$d570## lda #$03
$d572## jsr point_to_register
$d575## lda (music),y            ; LLLLLTTT
$d577## sta $4000,x            ;
$d57a## jmp save_duration
$d57d#play_triangle#
\ lda #$00
$d57f## jsr point_to_register
$d582## lda #%10000001             ; CRRRRRRR
$d584## sta $4000,x            ;
$d587## iny 
$d588## iny 
$d589## lda #$02
$d58b## jsr point_to_register
$d58e## lda (music),y            ; TTTTTTTT
$d590## sta $4000,x            ;
$d593## dey 
$d594## lda #$03
$d596## jsr point_to_register
$d599## lda (music),y            ; LLLLLTTT
$d59b## sta $4000,x            ;
$d59e#save_duration#; Save duration to note counter
\
\ lsr 
$d59f## lsr 
$d5a0## lsr 
$d5a1## sta audio_note_counter
$d5a3#next_entry# .) 
\
\; Prepare next entry
\ inc audio_counter
$d5a5#end#
\ rts 
$d5a6#opcodes#; Opcodes jump table
\
\ .word play_note,silence,loop
$d5ac#point_to_register# .) 
\
\ .( 
\ clc 
$d5ad## adc square_registers
$d5af## tax 
$d5b0## rts 
$d5b1#mute_current_channel# .) 
\
\ .( 
\ lda audio_channel_mode
$d5b3## cmp #$01
$d5b5## beq mute_triangle
$d5b7##; Mute a square channel
\ lda #$00
$d5b9## jsr point_to_register
$d5bc## lda #%10110000             ; DDLCVVVV
$d5be## sta $4000,x            ;
$d5c1## jmp end
$d5c4#mute_triangle#
\;lda #%00001011 ; ---DNT21
\;sta APU_STATUS ;
\ lda #%00000000
$d5c6## sta APU_TRIANGLE_LINEAR_CNT                ; CRRRRRRR
$d5c9## sta APU_TRIANGLE_LENGTH_CNT                ; LLLLLTTT
$d5cc#end#
\ rts 
$d5cd#init_title_screen# .) 
\ .) 
\
\ .( 
\; Point PPU to Background palette 0 (see http
\
\ lda PPUSTATUS
$d5d0## lda #$3f
$d5d2## sta PPUADDR
$d5d5## lda #$00
$d5d7## sta PPUADDR
$d5da##; Write palette_data in actual ppu palettes
\ ldx #$00
$d5dc#copy_palette#
\ lda palette_title,x
$d5df## sta PPUDATA
$d5e2## inx 
$d5e3## cpx #$20
$d5e5## bne copy_palette
$d5e7##; Copy background from PRG-rom to PPU nametable
\ lda #<nametable_title
$d5e9## sta tmpfield1
$d5eb## lda #>nametable_title
$d5ed## sta tmpfield2
$d5ef## jsr draw_zipped_nametable
$d5f2##; Reinit cheat code state
\ lda #0
$d5f4## sta title_cheatstate
$d5f6##; Change music for the main theme
\ jsr audio_music_weak
$d5f9## rts 
$d5fa#title_screen_tick# .) 
\
\ .( 
\; Check for cheat code (controller A only)
\ ldx title_cheatstate
$d5fc## lda controller_a_btns
$d5fe## cmp controller_a_last_frame_btns
$d600## beq press_any_key
$d602## cmp cheatcode,x
$d605## beq update_cheatcode
$d607## jmp press_any_key
$d60a#update_cheatcode#
\ cpx #19
$d60c## beq cheat_succeed
$d60e## inx 
$d60f## txa 
$d610## sta title_cheatstate
$d612## jmp end
$d615#cheat_succeed#
\ lda #$03
$d617## sta global_game_state
$d619## jsr change_global_game_state
$d61c#press_any_key#; If all buttons of any controller are released on this frame, got to the next screen
\
\ lda controller_a_btns
$d61e## bne check_controller_b
$d620## cmp controller_a_last_frame_btns
$d622## bne next_screen
$d624#check_controller_b#
\ lda controller_b_btns
$d626## bne end
$d628## cmp controller_b_last_frame_btns
$d62a## bne next_screen
$d62c## jmp end
$d62f#next_screen#
\ lda #$04
$d631## sta global_game_state
$d633## jsr change_global_game_state
$d636#end#
\ rts 
$d637#cheatcode#
\ .byt %00001000,0,%00001000,0,%00000100,0,%00000100,0
$d63f## .byt %00000010,0,%00000001,0,%00000010,0,%00000001,0
$d647## .byt %01000000,0,%10000000,0
$d64b#default_config# .) 
\
\ .( 
\ lda #4
$d64d## sta config_initial_stocks
$d64f## lda #$01
$d651## sta config_ai_enabled
$d653## rts 
$d654#init_config_screen# .) 
\
\ .( 
\ .( 
\; Ensure that the global game state is "config" from now on
\ lda #$04
$d656## sta global_game_state
$d658##; Reset scrolling
\ lda #$00
$d65a## sta scroll_x
$d65c## sta scroll_y
$d65e##; Move all sprites offscreen
\ ldx #$00
$d660#clr_sprites#
\ lda #$fe
$d662## sta oam_mirror,x              ;move all sprites off screen
$d665## inx 
$d666## bne clr_sprites
$d668##; Point PPU to Background palette 0 (see http
\
\ lda PPUSTATUS
$d66b## lda #$3f
$d66d## sta PPUADDR
$d670## lda #$00
$d672## sta PPUADDR
$d675##; Write palette_data in actual ppu palettes
\ ldx #$00
$d677#copy_palette#
\ lda palette_config,x
$d67a## sta PPUDATA
$d67d## inx 
$d67e## cpx #$20
$d680## bne copy_palette
$d682##; Clear background
\ lda #$00
$d684## sta $40
$d686## sta $41
$d688## lda PPUSTATUS
$d68b## lda #$20
$d68d## sta PPUADDR
$d690## lda #$00
$d692## sta PPUADDR
$d695#load_background#
\ lda #$00
$d697## sta PPUDATA
$d69a## inc $40
$d69c## bne end_inc_vector
$d69e## inc $41
$d6a0#end_inc_vector#
\ lda #$04
$d6a2## cmp $41
$d6a4## bne load_background
$d6a6## lda #$00
$d6a8## cmp $40
$d6aa## bne load_background
$d6ac##; Pimp nametable attributes
\ lda PPUSTATUS
$d6af## lda #$23
$d6b1## sta PPUADDR
$d6b4## lda #$cd
$d6b6## sta PPUADDR
$d6b9## ldy #3
$d6bb#one_box_attributes#
\ lda #%01010000
$d6bd## sta PPUDATA
$d6c0## sta PPUDATA
$d6c3## ldx #6
$d6c5## lda #%00000000
$d6c7#attributes_byte#
\ sta PPUDATA
$d6ca## dex 
$d6cb## bne attributes_byte
$d6cd## dey 
$d6ce## bne one_box_attributes
$d6d0##; Draw configuration boxes
\ppu_addr=tmpfield1
\ lda #$c4
$d6d2## sta ppu_addr
$d6d4## lda #$20
$d6d6## sta ppu_addr+1
$d6d8#draw_one_box#
\ lda PPUSTATUS                ;
$d6db## lda ppu_addr+1          ;
$d6dd## sta PPUADDR                ; Load PPUADDR with box position
$d6e0## lda ppu_addr                ;
$d6e2## sta PPUADDR                ;
$d6e5## lda #$f4             ; Left border
$d6e7## sta PPUDATA                ;
$d6ea## lda #$02             ;
$d6ec## ldx #13             ;
$d6ee#fill_left_background#; Label's background
\ sta PPUDATA                ;
$d6f1## dex                    ;
$d6f2## bne fill_left_background                ;
$d6f4## lda #$f6             ;
$d6f6## sta PPUDATA                ; Label/value separator
$d6f9## lda #$01             ;
$d6fb## sta PPUDATA                ;
$d6fe## lda #$02             ;
$d700## ldx #7             ;
$d702#fill_right_background#; Value's background
\ sta PPUDATA                ;
$d705## dex                    ;
$d706## bne fill_right_background                ;
$d708## lda #$f5             ; Right border
$d70a## sta PPUDATA                ;
$d70d## lda ppu_addr                ;
$d70f## clc                    ;
$d710## adc #$80             ;
$d712## sta ppu_addr                ; Position the next box
$d714## lda ppu_addr+1          ;
$d716## adc #$00             ;
$d718## sta ppu_addr+1          ;
$d71a## lda ppu_addr+1          ;
$d71c## cmp #$22             ;
$d71e## bne draw_one_box                ; Loop
$d720## lda ppu_addr                ;
$d722## cmp #$44             ;
$d724## bne draw_one_box                ;
$d726##; Write labels
\ ldx #0
$d728#labels_loop#
\ lda screen_labels,x
$d72b## sta nametable_buffers,x
$d72e## inx 
$d72f## cpx #48
$d731## bne labels_loop
$d733##; Place sprites
\ ldx #0
$d735#sprite_loop#
\ lda sprites,x
$d738## sta oam_mirror,x
$d73b## inx 
$d73c## cpx #24
$d73e## bne sprite_loop
$d740##; Init local options values from global state
\ lda audio_music_enabled
$d742## sta config_music_enabled
$d744## lda #0
$d746## sta config_selected_option
$d748##; Adapt to configuration's state
\ jsr config_update_screen
$d74b##; Process the batch of nt buffers immediately (while the PPU is disabled)
\ jsr process_nt_buffers
$d74e## jsr reset_nt_buffers
$d751## rts 
$d752#sprites#
\ .byt $2f,$3f,$00,$a0
$d756## .byt $2f,$3f,$40,$d0
$d75a## .byt $4f,$3f,$00,$a0
$d75e## .byt $4f,$3f,$40,$d0
$d762## .byt $6f,$3f,$00,$a0
$d766## .byt $6f,$3f,$40,$d0
$d76a#music_label# .) 
\
\
\ .byt $01,$20,$c7,$05,$43,$4b,$49,$3f,$39
$d773#stocks_label#
\ .byt $01,$21,$47,$06,$49,$4a,$45,$39,$41,$49
$d77d#ai_label#
\ .byt $01,$21,$c7,$08,$46,$42,$37,$4f,$3b,$48,$02,$16
$d789#start_label#
\ .byt $01,$22,$8a,$0c,$46,$48,$3b,$49,$49,$02,$02,$49,$4a,$37,$48,$4a
$d799## .byt $00
$d79a#config_screen_tick# .) 
\
\ .( 
\ .( 
\; Clear already written buffers
\ jsr reset_nt_buffers
$d79d##; Check if a button is released and trigger correct action
\ ldx #0
$d79f#check_one_controller#
\ lda controller_a_btns,x
$d7a1## bne next_controller
$d7a3## ldy #0
$d7a5#btn_search_loop#
\ lda buttons_numbering,y
$d7a8## cmp controller_a_last_frame_btns,x
$d7aa## beq jump_from_table
$d7ac## iny 
$d7ad## cpy #7
$d7af## bne btn_search_loop
$d7b1#next_controller#
\ inx 
$d7b2## cpx #2
$d7b4## bne check_one_controller
$d7b6## jmp end
$d7b9#jump_from_table#
\ tya 
$d7ba## asl 
$d7bb## tay 
$d7bc## lda buttons_actions,y
$d7bf## sta tmpfield1
$d7c1## lda buttons_actions+1,y
$d7c4## sta tmpfield2
$d7c6## jmp (tmpfield1)
$d7c9#next_screen#; Go to the next screen
\
\ .( 
\ lda #$00
$d7cb## sta global_game_state
$d7cd## jsr change_global_game_state
$d7d0#next_value#; jmp end ; not needed, change_global_game_state does not return
\ .) 
\
\ .( 
\ lda config_selected_option
$d7d2## asl 
$d7d3## tax 
$d7d4## lda next_value_handlers,x
$d7d7## sta tmpfield1
$d7d9## lda next_value_handlers+1,x
$d7dc## sta tmpfield2
$d7de## jmp (tmpfield1)
$d7e1## jmp end
$d7e4#previous_value# .) 
\
\ .( 
\ lda config_selected_option
$d7e6## asl 
$d7e7## tax 
$d7e8## lda previous_value_handlers,x
$d7eb## sta tmpfield1
$d7ed## lda previous_value_handlers+1,x
$d7f0## sta tmpfield2
$d7f2## jmp (tmpfield1)
$d7f5## jmp end
$d7f8#next_option# .) 
\
\ .( 
\ inc config_selected_option
$d7fa## lda config_selected_option
$d7fc## cmp #3
$d7fe## bne end
$d800## lda #0
$d802## sta config_selected_option
$d804## jmp end
$d807#previous_option# .) 
\
\ .( 
\ dec config_selected_option
$d809## bpl end
$d80b## lda #3-1
$d80d## sta config_selected_option
$d80f## jmp end
$d812#music_next_value# .) 
\
\ .( 
\ lda config_music_enabled
$d814## eor #%00000001
$d816## sta config_music_enabled
$d818## beq mute
$d81a## jsr audio_unmute_music
$d81d## jmp end
$d820#mute#
\ jsr audio_mute_music
$d823## jmp end
$d826#stocks_next_value# .) 
\
\ .( 
\ inc config_initial_stocks
$d828## lda config_initial_stocks
$d82a## cmp #4+1
$d82c## bne end
$d82e## lda #0
$d830## sta config_initial_stocks
$d832## jmp end
$d835#ai_next_value# .) 
\
\ .( 
\ lda config_ai_enabled
$d837## eor #%00000001
$d839## sta config_ai_enabled
$d83b## jmp end
$d83e#music_previous_value# .) 
\
\ .( 
\ jmp music_next_value
$d841#stocks_previous_value#;jmp end ; Not needed, handled by music_next_value
\ .) 
\
\ .( 
\ dec config_initial_stocks
$d843## lda config_initial_stocks
$d845## cmp #$ff
$d847## bne end
$d849## lda #4
$d84b## sta config_initial_stocks
$d84d## jmp end
$d850#ai_previous_value# .) 
\
\ .( 
\ jmp ai_next_value
$d853#end#;jmp end ; Not needed, handled by ai_next_value
\ .) 
\
\ jsr config_update_screen
$d856## rts 
$d857#buttons_numbering#
\ .byt %00000001,%00000010,%00000100,%00001000,%00010000,%01000000,%10000000
$d85e#buttons_actions#
\ .word next_value,previous_value,next_option,previous_option,next_screen,previous_value,next_value
$d86c#next_value_handlers#
\ .word music_next_value,stocks_next_value,ai_next_value
$d872#previous_value_handlers#
\ .word music_previous_value,stocks_previous_value,ai_previous_value
$d878#config_update_screen# .) 
\ .) 
\
\ .( 
\option_num=tmpfield15
\ .( 
\ lda #0
$d87a## sta option_num
$d87c#values#
\ jsr config_highligh_option
$d87f## jsr config_draw_value
$d882## inc option_num
$d884## lda option_num
$d886## cmp #3
$d888## bne values
$d88a## rts 
$d88b#config_highligh_option# .) 
\
\ .( 
\;
\; Modify nametable attributes to color selected field
\;
\ jsr last_nt_buffer
$d88e## lda option_num
$d890## asl 
$d891## asl 
$d892## tay 
$d893#loop_header#; Nametable buffer header
\
\ lda options_buffer_headers,y
$d896## sta nametable_buffers,x
$d899## inx 
$d89a## lda options_buffer_headers+1,y
$d89d## sta nametable_buffers,x
$d8a0## inx 
$d8a1## lda options_buffer_headers+2,y
$d8a4## sta nametable_buffers,x
$d8a7## inx 
$d8a8## lda options_buffer_headers+3,y
$d8ab## sta nametable_buffers,x
$d8ae## inx 
$d8af##; Determine attribute
\ lda config_selected_option
$d8b1## cmp option_num
$d8b3## beq enabled
$d8b5## lda #%00000000
$d8b7## jmp got_attribute
$d8ba#enabled#
\ lda #%10100000
$d8bc#got_attribute#
\; Nametable buffer payload
\ sta nametable_buffers,x
$d8bf## inx 
$d8c0## sta nametable_buffers,x
$d8c3## inx 
$d8c4## sta nametable_buffers,x
$d8c7## inx 
$d8c8## sta nametable_buffers,x
$d8cb## inx 
$d8cc##; Close nametable buffer
\ lda #$00
$d8ce## sta nametable_buffers,x
$d8d1##;
\; Modify sprites attributes to color arrows of selected attribute
\;
\; Set X to point on attribute byte of the first sprite related to this option
\ lda option_num
$d8d3## asl 
$d8d4## asl 
$d8d5## asl 
$d8d6## adc #2
$d8d8## tax 
$d8d9## ldy #0
$d8db#set_option_sprites_attributes#; Change palette number of option's sprites according to its selected state
\
\ lda option_num
$d8dd## cmp config_selected_option
$d8df## beq selected
$d8e1## lda oam_mirror,x
$d8e4## and #%11111110
$d8e6## sta oam_mirror,x
$d8e9## jmp next_sprite
$d8ec#selected#
\ lda oam_mirror,x
$d8ef## ora #%00000001
$d8f1## sta oam_mirror,x
$d8f4#next_sprite#
\ inx 
$d8f5## inx 
$d8f6## inx 
$d8f7## inx 
$d8f8## iny 
$d8f9## cpy #2
$d8fb## bne set_option_sprites_attributes
$d8fd## rts 
$d8fe#options_buffer_headers#
\ .byt $01,$23,$c9,$04
$d902## .byt $01,$23,$d1,$04
$d906## .byt $01,$23,$d9,$04
$d90a#config_draw_value# .) 
\
\ .( 
\; Jump to the good label regarding option_num
\ lda option_num
$d90c## asl 
$d90d## tax 
$d90e## lda values_handlers,x
$d911## sta tmpfield2
$d913## lda values_handlers+1,x
$d916## sta tmpfield3
$d918## jmp (tmpfield2)
$d91b#draw_music#
\ .( 
\; Store good buffer's address int tmpfield1
\ lda config_music_enabled
$d91d## beq music_disabled
$d91f## lda #<buffer_on
$d921## sta tmpfield1
$d923## lda #>buffer_on
$d925## sta tmpfield2
$d927## jmp send_buffer
$d92a#music_disabled#
\ lda #<buffer_off
$d92c## sta tmpfield1
$d92e## lda #>buffer_off
$d930## sta tmpfield2
$d932#send_buffer#; Copy stored buffer
\
\ jsr last_nt_buffer
$d935## ldy #0
$d937#loop_value#
\ lda (tmpfield1),y
$d939## sta nametable_buffers,x
$d93c## iny 
$d93d## inx 
$d93e## cpy #8
$d940## bne loop_value
$d942## jmp end
$d945#draw_stocks# .) 
\
\ .( 
\; Set Y to the begining of the good buffer from buffer_one
\ lda config_initial_stocks
$d947## asl 
$d948## asl 
$d949## asl 
$d94a## adc config_initial_stocks
$d94c## adc config_initial_stocks
$d94e## tay 
$d94f##; Store "buffer end" Y value in tmpfield1
\ tya 
$d950## clc 
$d951## adc #10
$d953## sta tmpfield1
$d955##; Send buffer
\ jsr last_nt_buffer
$d958#loop_value#
\ lda buffer_one,y
$d95b## sta nametable_buffers,x
$d95e## iny 
$d95f## inx 
$d960## cpy tmpfield1
$d962## bne loop_value
$d964## jmp end
$d967#draw_ai# .) 
\
\ .( 
\; Store good buffer's address int tmpfield1
\ lda config_ai_enabled
$d969## beq ai_disabled
$d96b## lda #<buffer_cpu
$d96d## sta tmpfield1
$d96f## lda #>buffer_cpu
$d971## sta tmpfield2
$d973## jmp send_buffer
$d976#ai_disabled#
\ lda #<buffer_human
$d978## sta tmpfield1
$d97a## lda #>buffer_human
$d97c## sta tmpfield2
$d97e#send_buffer#; Copy stored buffer
\
\ jsr last_nt_buffer
$d981## ldy #0
$d983#loop_value#
\ lda (tmpfield1),y
$d985## sta nametable_buffers,x
$d988## iny 
$d989## inx 
$d98a## cpy #10
$d98c## bne loop_value
$d98e## jmp end
$d991#end# .) 
\
\ rts 
$d992#values_handlers#
\ .word draw_music,draw_stocks,draw_ai
$d998#buffer_on#
\ .byt $01,$20,$d5,$03,$45,$44,$02,$00
$d9a0#buffer_off#
\ .byt $01,$20,$d5,$03,$45,$3c,$3c,$00
$d9a8#buffer_one#
\ .byt $01,$21,$55,$05,$45,$44,$3b,$02,$02,$00
$d9b2#buffer_two#
\ .byt $01,$21,$55,$05,$4a,$4d,$45,$02,$02,$00
$d9bc#buffer_three#
\ .byt $01,$21,$55,$05,$4a,$3e,$48,$3b,$3b,$00
$d9c6#buffer_four#
\ .byt $01,$21,$55,$05,$3c,$45,$4b,$48,$02,$00
$d9d0#buffer_five#
\ .byt $01,$21,$55,$05,$3c,$3f,$4c,$3b,$02,$00
$d9da#buffer_human#
\ .byt $01,$21,$d5,$05,$3e,$4b,$43,$37,$44,$00
$d9e4#buffer_cpu#
\ .byt $01,$21,$d5,$05,$39,$46,$4b,$02,$02,$00
$d9ee#init_gameover_screen# .) 
\ .) 
\
\ .( 
\; Point PPU to Background palette 0 (see http
\
\ lda PPUSTATUS
$d9f1## lda #$3f
$d9f3## sta PPUADDR
$d9f6## lda #$00
$d9f8## sta PPUADDR
$d9fb##; Write palette_data in actual ppu palettes
\ ldx #$00
$d9fd#copy_palette#
\ lda palette_gameover,x
$da00## sta PPUDATA
$da03## inx 
$da04## cpx #$20
$da06## bne copy_palette
$da08##; Copy background from PRG-rom to PPU nametable
\ lda #<nametable_gameover
$da0a## sta tmpfield1
$da0c## lda #>nametable_gameover
$da0e## sta tmpfield2
$da10## jsr draw_zipped_nametable
$da13##; Write winner's name
\ lda PPUSTATUS
$da16## lda #$20
$da18## sta PPUADDR
$da1b## lda #$9a
$da1d## sta PPUADDR
$da20## ldx gameover_winner
$da22## ldy #0
$da24#winner_name_writing#
\ lda player_names,x
$da27## sta PPUDATA
$da2a## inx 
$da2b## inx 
$da2c## iny 
$da2d## cpy #3
$da2f## bne winner_name_writing
$da31##; Players state using "ingame" state variable to show winning animation
\ ldx gameover_winner                ;
$da33## jsr switch_selected_player                ; Set winner player num in X
$da36## txa                    ; and looser player num in Y
$da37## tay                    ;
$da38## ldx gameover_winner                ;
$da3a## lda #$71             ;
$da3c## sta player_a_y,x              ;
$da3e## lda #$76             ;
$da40## sta player_a_y,y              ; Place characters
$da43## lda #$64             ;
$da45## sta player_a_x,x              ;
$da47## lda #$3c             ;
$da49## sta player_a_x,y              ;
$da4c## lda #<anim_sinbad_victory              ;
$da4e## sta tmpfield1                ;
$da50## lda #>anim_sinbad_victory              ; Set winner's animation
$da52## sta tmpfield2                ;
$da54## jsr set_player_animation                ;
$da57## lda #0             ;
$da59## sta player_a_animation_direction,x              ;
$da5b## tya                    ;
$da5c## tax                    ;
$da5d## lda #<anim_sinbad_defeat              ;
$da5f## sta tmpfield1                ; Set looser's animation
$da61## lda #>anim_sinbad_defeat              ;
$da63## sta tmpfield2                ;
$da65## jsr set_player_animation                ;
$da68## lda #0             ;
$da6a## sta player_a_animation_direction,x              ;
$da6c## jsr update_sprites                ; First animation frame
$da6f##; Initialize balloon sprites
\ ldx #0
$da71#initialize_a_balloon#
\ lda #$4a
$da73## sta oam_mirror+4*32+1,x
$da76## lda #$4b
$da78## sta oam_mirror+4*32+5,x
$da7b## lda #$23
$da7d## sta oam_mirror+4*32+2,x
$da80## sta oam_mirror+4*32+6,x
$da83## txa 
$da84## clc 
$da85## adc #8
$da87## tax 
$da88## cpx #8*6
$da8a## bne initialize_a_balloon
$da8c## ldx #0
$da8e#position_a_balloon#
\; Position higher than #$80
\ jsr gameover_random_byte
$da91## lsr 
$da92## sta gameover_balloon0_y,x
$da94##; Laterally near the podium
\ jsr gameover_random_byte
$da97## lsr 
$da98## clc 
$da99## adc #$20
$da9b## sta gameover_balloon0_x,x
$da9d## inx 
$da9e## cpx #6
$daa0## bne position_a_balloon
$daa2##; Change for music for gameover theme
\ jsr audio_music_gameover
$daa5## rts 
$daa6#player_names#
\ .byt $45,$4a
$daa8## .byt $44,$4d
$daaa## .byt $3b,$45
$daac#gameover_screen_tick# .) 
\
\ .( 
\ .( 
\; If start button is released from any controller, go to next screen
\ ldx #0
$daae#check_one_controller#
\ lda controller_a_last_frame_btns,x
$dab0## sta tmpfield1
$dab2## lda controller_a_btns,x
$dab4## sta tmpfield2
$dab6## lda #%00010000
$dab8## bit tmpfield1
$daba## beq next_controller
$dabc## bit tmpfield2
$dabe## bne next_controller
$dac0## jmp next_screen
$dac3#next_controller#
\ inx 
$dac4## cpx #2
$dac6## bne check_one_controller
$dac8## jmp update_animations
$dacb#next_screen#
\ lda #$01
$dacd## sta global_game_state
$dacf## jsr change_global_game_state
$dad2#update_animations#
\ jsr update_sprites
$dad5## jsr update_balloons
$dad8## rts 
$dad9#update_balloons# .) 
\
\ .( 
\ ldx #0
$dadb## ldy #0
$dadd#update_one_balloon#
\; Update Y
\ jsr gameover_random_byte
$dae0## and #%00000011
$dae2## clc 
$dae3## adc #$80
$dae5## clc 
$dae6## adc gameover_balloon0_y_low,x
$dae8## sta gameover_balloon0_y_low,x
$daea## lda #$ff
$daec## adc gameover_balloon0_y,x
$daee## sta gameover_balloon0_y,x
$daf0## cmp #$80
$daf2## bmi end_y
$daf4## lda #$80
$daf6## sta gameover_balloon0_y,x
$daf8#end_y#
\; Update horizontal velocity
\ jsr gameover_random_byte
$dafb## and #%00000111
$dafd## clc 
$dafe## adc gameover_balloon0_velocity_h,x
$db00## sta gameover_balloon0_velocity_h,x
$db02##; Update X
\ lda gameover_balloon0_velocity_h,x
$db04## clc 
$db05## adc gameover_balloon0_x_low,x
$db07## sta gameover_balloon0_x_low,x
$db09## lda gameover_balloon0_velocity_h,x
$db0b## bpl positive
$db0d## lda #$ff
$db0f## jmp high_byte_set
$db12#positive#
\ lda #$00
$db14#high_byte_set#
\ adc gameover_balloon0_x,x
$db16## sta gameover_balloon0_x,x
$db18##; Move balloon's sprite
\ lda gameover_balloon0_y,x
$db1a## sta oam_mirror+4*32,y
$db1d## clc 
$db1e## adc #8
$db20## sta oam_mirror+4*32+4,y
$db23## lda gameover_balloon0_x,x
$db25## sta oam_mirror+4*32+3,y
$db28## sta oam_mirror+4*32+7,y
$db2b## lda gameover_balloon0_y,x
$db2d## cmp #$40
$db2f## bcs background
$db31## lda #$03
$db33## sta oam_mirror+4*32+2,y
$db36## sta oam_mirror+4*32+6,y
$db39## jmp end_sprite_layer
$db3c#background#
\ lda #$23
$db3e## sta oam_mirror+4*32+2,y
$db41## sta oam_mirror+4*32+6,y
$db44#end_sprite_layer#
\; Loop
\ tya 
$db45## clc 
$db46## adc #8
$db48## tay 
$db49## inx 
$db4a## cpx #6
$db4c## bne update_one_balloon
$db4e## rts 
$db4f#gameover_random_byte# .) 
\ .) 
\
\ .( 
\ lda gameover_random
$db51## rol 
$db52## rol 
$db53## rol 
$db54## rol 
$db55## adc gameover_random
$db57## adc #1
$db59## sta gameover_random
$db5b## rts 
$db5c#init_credits_screen# .) 
\
\ .( 
\ .( 
\line_num=$05
\char_cursor_low=$06
\char_cursor_high=$07
\; Point PPU to Background palette 0 (see http
\
\ lda PPUSTATUS
$db5f## lda #$3f
$db61## sta PPUADDR
$db64## lda #$00
$db66## sta PPUADDR
$db69##; Write palette_data in actual ppu palettes (reuse title screen palette)
\ ldx #$00
$db6b#copy_palette#
\ lda palette_title,x
$db6e## sta PPUDATA
$db71## inx 
$db72## cpx #$20
$db74## bne copy_palette
$db76##; Clear background
\ lda #$00
$db78## sta $40
$db7a## sta $41
$db7c## lda PPUSTATUS
$db7f## lda #$20
$db81## sta PPUADDR
$db84## lda #$00
$db86## sta PPUADDR
$db89#load_background#
\ lda #$00
$db8b## sta PPUDATA
$db8e## inc $40
$db90## bne end_inc_vector
$db92## inc $41
$db94#end_inc_vector#
\ lda #$04
$db96## cmp $41
$db98## bne load_background
$db9a## lda #$00
$db9c## cmp $40
$db9e## bne load_background
$dba0##; Pimp nametable attributes
\ lda PPUSTATUS
$dba3## lda #$23
$dba5## sta PPUADDR
$dba8## lda #$c0
$dbaa## sta PPUADDR
$dbad## lda #%10100101
$dbaf## jsr fill_attributes_line
$dbb2## lda #%10100000
$dbb4## jsr fill_attributes_line
$dbb7## lda #%00000000
$dbb9## jsr fill_attributes_line
$dbbc## lda #%00000000
$dbbe## jsr fill_attributes_line
$dbc1## lda #%10100000
$dbc3## jsr fill_attributes_line
$dbc6## lda PPUSTATUS
$dbc9## lda #$23
$dbcb## sta PPUADDR
$dbce## lda #$c0
$dbd0## sta PPUADDR
$dbd3##; Write credits
\ lda #1
$dbd5## sta line_num
$dbd7## lda #<credits_begin
$dbd9## sta char_cursor_low
$dbdb## lda #>credits_begin
$dbdd## sta char_cursor_high
$dbdf## ldy #0
$dbe1#write_one_line#
\ lda #32             ;
$dbe3## sta tmpfield1                ;
$dbe5## lda #0             ;
$dbe7## sta tmpfield2                ;
$dbe9## lda line_num                ;
$dbeb## sta tmpfield3                ; Point PPUADDR to the line's begining
$dbed## jsr multiply                ;
$dbf0## clc 
$dbf1## lda #$00
$dbf3## adc tmpfield4
$dbf5## sta tmpfield4
$dbf7## lda #$20
$dbf9## adc tmpfield5
$dbfb## sta tmpfield5
$dbfd## lda PPUSTATUS                ;
$dc00## lda tmpfield5                ;
$dc02## sta PPUADDR                ;
$dc05## lda tmpfield4                ;
$dc07## sta PPUADDR                ;
$dc0a#write_one_char#
\ lda (char_cursor_low),y            ;
$dc0c## inc char_cursor_low                ; Load current character and point to
$dc0e## bne end_inc_cursor                ; the next one
$dc10## inc char_cursor_high                ;
$dc12#end_inc_cursor#;
\ cmp #$0a             ;
$dc14## beq new_line                ; Considere opcodes
$dc16## cmp #$00             ;  $0a - line break
$dc18## beq end_write_credits                ;  $00 - end of data
$dc1a## cmp #$20             ;  $20 - space
$dc1c## beq space                ;
$dc1e## sec                    ;
$dc1f## sbc #42             ; Generic case
$dc21## sta PPUDATA                ; tile_id = char_value - 42
$dc24## jmp write_one_char                ;
$dc27#space#
\ lda #0             ;
$dc29## sta PPUDATA                ; Space character, tile $00
$dc2c## jmp write_one_char                ;
$dc2f#new_line#
\ inc line_num                ; Increment line number and loop
$dc31## jmp write_one_line                ; to the new line
$dc34#end_write_credits#
\ rts 
$dc35#fill_attributes_line# .) 
\
\ .( 
\ ldx #0
$dc37#write_attribute_byte#
\ sta PPUDATA
$dc3a## inx 
$dc3b## cpx #8
$dc3d## bne write_attribute_byte
$dc3f## rts 
$dc40#credits_screen_tick# .) 
\ .) 
\
\ .( 
\; If all buttons of any controller are released on this frame, got to the next screen
\ lda controller_a_btns
$dc42## bne check_controller_b
$dc44## cmp controller_a_last_frame_btns
$dc46## bne next_screen
$dc48#check_controller_b#
\ lda controller_b_btns
$dc4a## bne end
$dc4c## cmp controller_b_last_frame_btns
$dc4e## bne next_screen
$dc50## jmp end
$dc53#next_screen#
\ lda #$01
$dc55## sta global_game_state
$dc57## jsr change_global_game_state
$dc5a#end#
\ rts 
$dc5b#attacks# .) 
\
\ .byt $f0,$fd,$f4,$0c
$dc5f## .byt %00000010&&%10000000
$dc60## .byt $0a,$17,$f4,$0c
$dc64## .byt %00000001&&%10000000
$dc65## .byt $f1,$17,$08,$0f
$dc69## .byt %00000100&&%10000000
$dc6a#ai_tick#; Set controller B state
\;
\; Can watch game state to inteligently set controller B state
\
\ .( 
\; Reset controller's state
\ lda #$00
$dc6c## sta controller_b_btns
$dc6e##; Search for an attack that can hit
\ ldy #3
$dc70## ldx #$00
$dc72#check_one_attack#
\ lda attacks,x
$dc75## clc 
$dc76## adc player_b_x
$dc78## sta tmpfield1
$dc7a## inx 
$dc7b## lda attacks,x
$dc7e## clc 
$dc7f## adc player_b_x
$dc81## sta tmpfield2
$dc83## inx 
$dc84## lda attacks,x
$dc87## clc 
$dc88## adc player_b_y
$dc8a## sta tmpfield3
$dc8c## inx 
$dc8d## lda attacks,x
$dc90## clc 
$dc91## adc player_b_y
$dc93## sta tmpfield4
$dc95## inx 
$dc96## txa 
$dc97## pha 
$dc98## lda player_a_hurtbox_left
$dc9a## sta tmpfield5
$dc9c## lda player_a_hurtbox_right
$dc9e## sta tmpfield6
$dca0## lda player_a_hurtbox_top
$dca2## sta tmpfield7
$dca4## lda player_a_hurtbox_bottom
$dca6## sta tmpfield8
$dca8## jsr boxes_overlap
$dcab## pla 
$dcac## tax 
$dcad## lda tmpfield9
$dcaf## bne next_attack
$dcb1## lda attacks,x
$dcb4## sta controller_b_btns
$dcb6## jmp end
$dcb9#next_attack#
\ inx 
$dcba## dey 
$dcbb## bne check_one_attack
$dcbd##; Move in the direction of the opponent
\ lda player_a_y                ;
$dcbf## cmp player_b_y                ;
$dcc1## bcs check_directions                ; Jump if the opponent is higher
$dcc3## lda #%00001000             ;
$dcc5## sta controller_b_btns                ;
$dcc7#check_directions#
\ lda player_a_x                ;
$dcc9## cmp player_b_x                ;
$dccb## bcs go_right                ;
$dccd## lda #%00000010             ;
$dccf## jmp direction_choosen                ; Choose left or right
$dcd2#go_right#; (independently of jumping)
\ lda #%00000001             ;
$dcd4#direction_choosen#;
\ ora controller_b_btns                ;
$dcd6## sta controller_b_btns                ;
$dcd8#end#
\ rts 
$dcd9#palette_data# .) 
\
\
\
\; Background
\ .byt $21,$2a,$1a,$08,$21,$1b,$18,$0a,$21,$08,$18,$38,$21,$20,$1c,$0c
$dce9##; Sprites
\ .byt $21,$08,$1a,$20,$21,$08,$10,$37,$21,$08,$16,$10,$21,$08,$28,$37
$dcf9#palette_title#
\; Background
\ .byt $21,$0d,$21,$30,$21,$0d,$21,$21,$21,$00,$21,$00,$21,$20,$1c,$0c
$dd09##; Sprites
\ .byt $21,$00,$00,$00,$21,$00,$00,$00,$21,$00,$00,$00,$21,$00,$00,$00
$dd19#palette_gameover#
\; Background
\ .byt $21,$2a,$1a,$08,$21,$0d,$0a,$10,$21,$08,$18,$38,$21,$20,$1c,$0c
$dd29##; Sprites
\ .byt $21,$08,$1a,$20,$21,$08,$10,$37,$21,$08,$16,$10,$21,$08,$28,$37
$dd39#palette_config#
\; Background
\ .byt $21,$0d,$10,$10,$21,$20,$0d,$00,$21,$0d,$28,$28,$21,$00,$00,$00
$dd49##; Sprites
\ .byt $21,$00,$00,$00,$21,$28,$00,$00,$21,$00,$00,$00,$21,$00,$00,$00
$dd59#nametable#
\ .byt $00,128+20
$dd5b## .byt $2b,$2c,$2d,$2e
$dd5f## .byt $00,8+20
$dd61## .byt $2f,$30,$31,$32
$dd65## .byt $00,8+32+26
$dd67## .byt $2b,$2c,$2d,$2e
$dd6b## .byt $00,2+2
$dd6d## .byt $2b,$2c,$2d,$2e,$00,20,$2f,$30,$31,$32
$dd77## .byt $00,2+2
$dd79## .byt $2f,$30,$31,$32
$dd7d## .byt $00,26+128+12,
$dd7f## .byt $04,$05,$06,$07
$dd83## .byt $00,16+12,
$dd85## .byt $08,$09,$0a,$0b
$dd89## .byt $00,16+12,
$dd8b## .byt $0c,$0d,$0e,$0f
$dd8f## .byt $00,16+5
$dd91## .byt $23,$24,$23,$24,$23,$24,$23,$10,$11,$12,$13,$24,$23,$24,$23,$24,$23,$24,$23,$24,$23,$24
$dda7## .byt $00,5+5
$dda9## .byt $25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26
$ddbf## .byt $00,5+5
$ddc1## .byt $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
$ddd7## .byt $00,5+5
$ddd9## .byt $1f,$20,$01,$01,$01,$01,$01,$01,$01,$01,$1f,$20,$01,$01,$01,$33,$34,$01,$01,$01,$01,$01
$ddef## .byt $00,5+5
$ddf1## .byt $21,$22,$33,$34,$01,$01,$1f,$20,$01,$01,$21,$22,$01,$01,$01,$35,$36,$01,$01,$01,$33,$34
$de07## .byt $00,5+5
$de09## .byt $01,$01,$35,$36,$01,$01,$21,$22,$01,$01,$01,$01,$1f,$20,$01,$01,$1f,$20,$01,$01,$35,$36
$de1f## .byt $00,5+5
$de21## .byt $01,$01,$01,$33,$34,$01,$01,$01,$01,$01,$01,$01,$21,$22,$01,$01,$21,$22,$01,$01,$01,$01
$de37## .byt $00,5+5
$de39## .byt $01,$01,$01,$35,$36,$1f,$20,$01,$01,$01,$01,$01,$01,$01,$01,$33,$34,$01,$1f,$20,$01,$01
$de4f## .byt $00,5+5
$de51## .byt $01,$01,$01,$01,$01,$21,$22,$01,$01,$1f,$20,$01,$01,$01,$01,$35,$36,$01,$21,$22,$01,$01
$de67## .byt $00,5+5
$de69## .byt $01,$33,$34,$01,$27,$28,$01,$01,$01,$21,$22,$01,$01,$01,$01,$01,$27,$28,$01,$01,$01,$01
$de7f## .byt $00,5+5
$de81## .byt $01,$35,$36,$01,$29,$2a,$01,$01,$01,$01,$01,$1f,$20,$01,$01,$01,$29,$2a,$01,$1f,$20,$01
$de97## .byt $00,5+5
$de99## .byt $01,$01,$01,$14,$14,$14,$1e,$01,$01,$01,$01,$21,$22,$01,$01,$14,$14,$14,$1e,$21,$22,$01
$deaf## .byt $00,5+5
$deb1## .byt $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,5
$dec9#nametable_attributes#
\ .byt $00,8+2
$decb## .byt %11111111,$00,2,%11111111,%11111111,%11111111
$ded1## .byt %11111111,%11111111,$00,4,%11111111,%11111111
$ded7## .byt $00,3,%01010000
$deda## .byt $00,7
$dedc## .byt %00000101
$dedd## .byt $00,5
$dedf## .byt %10101010,%10101010,%10101010,%10101010,%10101010,%10101010
$dee5## .byt $00,2
$dee7## .byt %10101010,%10101010,%10101010,%10101010,%10101010,%10101010
$deed## .byt $00,2
$deef## .byt %10101010,%10101010,%10101010,%10101010,%10101010,%10101010,$00,1
$def7#nametable_end#
\ .byt $00,$00
$def9#nametable_title#
\ .byt $00,64+10
$defb## .byt $51,$52,$53,$00,11,$2b,$2c,$2d,$2e
$df04## .byt $00,4+9
$df06## .byt $54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f,$60,$61,$00,$01,$2f,$30,$31,$32
$df1a## .byt $00,4+9
$df1c## .byt $62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f
$df2a## .byt $00,9+9
$df2c## .byt $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d
$df3a## .byt $00,9+2
$df3c## .byt $2b,$2c,$2d,$2e,$00,3,$7e,$7f,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8a,$8b
$df50## .byt $00,9+2
$df52## .byt $2f,$30,$31,$32,$8c,$8d,$8e,$8f,$00,6,$90,$91,$92,$93
$df60## .byt $00,12+6
$df62## .byt $94,$95,$96,$97,$98,$99,$9a,$9b,$9c,$9d,$9e,$9f,$a0,$a1,$a2,$a3,$a4,$a5,$a6
$df75## .byt $00,7+7
$df77## .byt $a7,$a8,$a9,$aa,$ab,$ac,$ad,$ae,$af,$b0,$b1,$b2,$b3,$b4,$b5,$b6,$b7,$b8
$df89## .byt $00,7+7
$df8b## .byt $b9,$ba,$bb,$bc,$bd,$be,$bf,$c0,$00,$01,$c1,$c2,$c3,$c4,$c5,$c6,$c7,$c8,$c9,$ca
$df9f## .byt $00,6+7
$dfa1## .byt $cb,$cc,$cd,$ce,$cf,$d0,$d1,$d2,$00,$01,$d3,$d4,$d5,$d6,$d7,$d8,$d9,$da,$db,$dc
$dfb5## .byt $00,6+12
$dfb7## .byt $3c,$45,$48,$00,2,$44,$3b,$49,
$dfbf## .byt $00,12+38
$dfc1## .byt $2b,$2c,$2d,$2e
$dfc5## .byt $00,22+6
$dfc7## .byt $2f,$30,$31,$32
$dfcb## .byt $00,22+18
$dfcd## .byt $2b,$2c,$2d,$2e
$dfd1## .byt $00,10+18
$dfd3## .byt $2f,$30,$31,$32
$dfd7## .byt $00,10+26
$dfd9## .byt $2b,$2c,$2d,$2e
$dfdd## .byt $00,2+26
$dfdf## .byt $2f,$30,$31,$32
$dfe3## .byt $00,2+104
$dfe5## .byt $46,$48,$3b,$49,$49,$00,$01,$37,$44,$4f,$00,$01,$38,$4b,$4a,$4a,$45,$44
$dff7## .byt $00,8+68
$dff9## .byt $2b,$2c,$2d,$2e
$dffd## .byt $00,24+4
$dfff## .byt $2f,$30,$31,$32,$00,8,$44,$3b,$49,$3a,$3b,$4c,$16,$14,$15,$1a,$00,$01,$37,$3f
$e013## .byt $00,3+64+6
$e015#nametable_title_attributes#
\ .byt %11110000,$00,$01
$e018## .byt %11000000,%00110000
$e01a## .byt $00,6+8+1
$e01c## .byt %11000000,%00110000
$e01e## .byt $00,5+4
$e020## .byt %00001100,%00000011,%11000000,%00110000
$e024## .byt $00,8+1
$e026## .byt %11110000,$00,3,%01010101,%01010101,%01010101
$e02c## .byt $00,8
$e02e#nametable_title_end#
\ .byt $00,$00
$e030#nametable_gameover#
\ .byt $00,64+19
$e032## .byt $02,$02,$4c,$3f,$39,$4a,$45,$48,$4f,$02,$02
$e03d## .byt $00,2+19
$e03f## .byt $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
$e04a## .byt $00,2+4
$e04c## .byt $2b,$2c,$2d,$2e,$00,11,
$e052## .byt $46,$42,$37,$4f,$3b,$48,$02,$00,3,$02
$e05c## .byt $00,2+4
$e05e## .byt $2f,$30,$31,$32
$e062## .byt $00,24+64+128
$e064## .byt $00,128+6
$e066## .byt $de,$df,$e0,$e1,$e2,$e3,$e4,$e5,$e6,$e7,$00,16
$e072## .byt $23,$24,$23,$24,$23,$24,$e8,$e9,$ea,$eb,$ec,$ed,$ee,$ef,$f0,$f1,$f2,$f3,$23,$24,$23,$24,$23,$24,$23,$24,$23,$24,$23,$24,$23,$24
$e092## .byt $25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26,$25,$26
$e0b2## .byt $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
$e0d2## .byt $01,$01,$01,$01,$01,$01,$1f,$20,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$1f,$20,$01,$01
$e0f2## .byt $01,$01,$01,$01,$01,$01,$21,$22,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$1f,$20,$01,$01,$01,$01,$01,$01,$01,$01,$21,$22,$01,$01
$e112## .byt $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$21,$22,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
$e132## .byt $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
$e152## .byt $01,$01,$01,$01,$01,$01,$01,$01,$00,16,$01,$01,$01,$01,$01,$01,$01,$01
$e164## .byt $01,$01,$01,$01,$01,$01,$01,$01,$00,2
$e16e## .byt $46,$48,$3b,$49,$49,$02,$02,$49,$4a,$37,$48,$4a,$00,2,$01,$01,$01,$01,$01,$01,$01,$01
$e184## .byt $01,$01,$01,$01,$1f,$20,$01,$01,$00,16,$01,$01,$1f,$20,$01,$01,$01,$01
$e196## .byt $01,$01,$01,$01,$21,$22,$01,$01,$01,$01,$01,$01,$1f,$20,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$21,$22,$01,$01,$01,$01
$e1b6## .byt $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$21,$22,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
$e1d6## .byt $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
$e1f6#nametable_gameover_attributes#
\ .byt $00,4,%11000000,%11111111,%11111111,%11111111
$e1fc## .byt $00,$01,%00001111,$00,2,%00001100,%11111111,%11111111,%11111111
$e205## .byt $00,8+8+1
$e207## .byt %00000100,%00000101,%00000101,%00000001,$00,3
$e20d## .byt %10101010,%10101010,%10101010,%10101010,%10101010,%10101010,%10101010,%10101010
$e215## .byt %10101010,%10101010,%10101110,%10101111,%10101111,%10101111,%10101010,%10101010
$e21d## .byt %10101010,%10101010,%10101010,%10101010,%10101010,%10101010,%10101010,%10101010
$e225#nametable_gameover_end#
\ .byt $00,$00
$e227#sinbad_state_update_routines#
\ .byt >(standing_player-1),<(standing_player-1)
$e229## .byt >(running_player-1),<(running_player-1)
$e22b## .byt >(falling_player-1),<(falling_player-1)
$e22d## .byt >(jumping_player-1),<(jumping_player-1)
$e22f## .byt >(jabbing_player-1),<(jabbing_player-1)
$e231## .byt >(thrown_player-1),<(thrown_player-1)
$e233## .byt >(respawn_player-1),<(respawn_player-1)
$e235## .byt >(side_tilt_player-1),<(side_tilt_player-1)
$e237## .byt >(special_player-1),<(special_player-1)
$e239## .byt >(side_special_player-1),<(side_special_player-1)
$e23b## .byt >(helpless_player-1),<(helpless_player-1)
$e23d## .byt >(landing_player-1),<(landing_player-1)
$e23f## .byt >(crashing_player-1),<(crashing_player-1)
$e241## .byt >(down_tilt_player-1),<(down_tilt_player-1)
$e243## .byt >(aerial_side_player-1),<(aerial_side_player-1)
$e245## .byt >(aerial_down_player-1),<(aerial_down_player-1)
$e247## .byt >(aerial_up_player-1),<(aerial_up_player-1)
$e249## .byt >(aerial_neutral_player-1),<(aerial_neutral_player-1)
$e24b## .byt >(aerial_spe_player-1),<(aerial_spe_player-1)
$e24d## .byt >(spe_up_player-1),<(spe_up_player-1)
$e24f## .byt >(spe_down_player-1),<(spe_down_player-1)
$e251## .byt >(up_tilt_player-1),<(up_tilt_player-1)
$e253## .byt >(shielding_player-1),<(shielding_player-1)
$e255#sinbad_state_offground_routines#
\ .byt >(start_falling_player-1),<(start_falling_player-1); Standing
$e257## .byt >(start_falling_player-1),<(start_falling_player-1); Running
$e259## .byt >(dummy_routine-1),<(dummy_routine-1); Falling
$e25b## .byt >(dummy_routine-1),<(dummy_routine-1); Jumping
$e25d## .byt >(start_falling_player-1),<(start_falling_player-1); Jabbing
$e25f## .byt >(dummy_routine-1),<(dummy_routine-1); Thrown
$e261## .byt >(dummy_routine-1),<(dummy_routine-1); Respawn
$e263## .byt >(dummy_routine-1),<(dummy_routine-1); Side tilt
$e265## .byt >(dummy_routine-1),<(dummy_routine-1); Special
$e267## .byt >(dummy_routine-1),<(dummy_routine-1); Side special
$e269## .byt >(dummy_routine-1),<(dummy_routine-1); Helpless
$e26b## .byt >(start_helpless_player-1),<(start_helpless_player-1); Landing
$e26d## .byt >(start_helpless_player-1),<(start_helpless_player-1); Crashing
$e26f## .byt >(dummy_routine-1),<(dummy_routine-1); Down tilt
$e271## .byt >(dummy_routine-1),<(dummy_routine-1); Aerial side
$e273## .byt >(dummy_routine-1),<(dummy_routine-1); Aerial down
$e275## .byt >(dummy_routine-1),<(dummy_routine-1); Aerial up
$e277## .byt >(dummy_routine-1),<(dummy_routine-1); Aerial neutral
$e279## .byt >(dummy_routine-1),<(dummy_routine-1); Aerial special neutral
$e27b## .byt >(dummy_routine-1),<(dummy_routine-1); Special up
$e27d## .byt >(dummy_routine-1),<(dummy_routine-1); Special down
$e27f## .byt >(dummy_routine-1),<(dummy_routine-1); Up tilt
$e281## .byt >(start_helpless_player-1),<(start_helpless_player-1); Shielding
$e283#sinbad_state_onground_routines#
\ .byt >(dummy_routine-1),<(dummy_routine-1); Standing
$e285## .byt >(dummy_routine-1),<(dummy_routine-1); Running
$e287## .byt >(start_landing_player-1),<(start_landing_player-1); Falling
$e289## .byt >(dummy_routine-1),<(dummy_routine-1); Jumping
$e28b## .byt >(dummy_routine-1),<(dummy_routine-1); Jabbing
$e28d## .byt >(thrown_player_on_ground-1),<(thrown_player_on_ground-1); Thrown
$e28f## .byt >(dummy_routine-1),<(dummy_routine-1); Respawn
$e291## .byt >(dummy_routine-1),<(dummy_routine-1); Side tilt
$e293## .byt >(dummy_routine-1),<(dummy_routine-1); Special
$e295## .byt >(dummy_routine-1),<(dummy_routine-1); Side special
$e297## .byt >(start_landing_player-1),<(start_landing_player-1); Helpless
$e299## .byt >(dummy_routine-1),<(dummy_routine-1); Landing
$e29b## .byt >(dummy_routine-1),<(dummy_routine-1); Crashing
$e29d## .byt >(dummy_routine-1),<(dummy_routine-1); Down tilt
$e29f## .byt >(start_landing_player-1),<(start_landing_player-1); Aerial side
$e2a1## .byt >(start_landing_player-1),<(start_landing_player-1); Aerial down
$e2a3## .byt >(start_landing_player-1),<(start_landing_player-1); Aerial up
$e2a5## .byt >(start_landing_player-1),<(start_landing_player-1); Aerial neutral
$e2a7## .byt >(start_landing_player-1),<(start_landing_player-1); Aerial special neutral
$e2a9## .byt >(dummy_routine-1),<(dummy_routine-1); Special up
$e2ab## .byt >(dummy_routine-1),<(dummy_routine-1); Special down
$e2ad## .byt >(dummy_routine-1),<(dummy_routine-1); Up tilt
$e2af## .byt >(dummy_routine-1),<(dummy_routine-1); Shielding
$e2b1#sinbad_state_input_routines#
\ .byt >(standing_player_input-1),<(standing_player_input-1); Standing
$e2b3## .byt >(running_player_input-1),<(running_player_input-1); Running
$e2b5## .byt >(check_aerial_inputs-1),<(check_aerial_inputs-1); Falling
$e2b7## .byt >(jumping_player_input-1),<(jumping_player_input-1); Jumping
$e2b9## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Jabbing
$e2bb## .byt >(thrown_player_input-1),<(thrown_player_input-1); Thrown
$e2bd## .byt >(respawn_player_input-1),<(respawn_player_input-1); Respawn
$e2bf## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Side tilt
$e2c1## .byt >(special_player_input-1),<(special_player_input-1); Special
$e2c3## .byt >(dummy_routine-1),<(dummy_routine-1); Side special
$e2c5## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Helpless
$e2c7## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Landing
$e2c9## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Crashing
$e2cb## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Down tilt
$e2cd## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Aerial side
$e2cf## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Aerial down
$e2d1## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Aerial up
$e2d3## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Aerial neutral
$e2d5## .byt >(dummy_routine-1),<(dummy_routine-1); Aerial special neutral
$e2d7## .byt >(dummy_routine-1),<(dummy_routine-1); Special up
$e2d9## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Special down
$e2db## .byt >(keep_input_dirty-1),<(keep_input_dirty-1); Up tilt
$e2dd## .byt >(shielding_player_input-1),<(shielding_player_input-1); Shielding
$e2df#sinbad_state_onhurt_routines#
\ .byt >(hurt_player-1),<(hurt_player-1); Standing
$e2e1## .byt >(hurt_player-1),<(hurt_player-1); Running
$e2e3## .byt >(hurt_player-1),<(hurt_player-1); Falling
$e2e5## .byt >(hurt_player-1),<(hurt_player-1); Jumping
$e2e7## .byt >(hurt_player-1),<(hurt_player-1); Jabbing
$e2e9## .byt >(hurt_player-1),<(hurt_player-1); Thrown
$e2eb## .byt >(dummy_routine-1),<(dummy_routine-1); Respawn
$e2ed## .byt >(hurt_player-1),<(hurt_player-1); Side tilt
$e2ef## .byt >(hurt_player-1),<(hurt_player-1); Special
$e2f1## .byt >(hurt_player-1),<(hurt_player-1); Side special
$e2f3## .byt >(hurt_player-1),<(hurt_player-1); Helpless
$e2f5## .byt >(hurt_player-1),<(hurt_player-1); Landing
$e2f7## .byt >(hurt_player-1),<(hurt_player-1); Crashing
$e2f9## .byt >(hurt_player-1),<(hurt_player-1); Down tilt
$e2fb## .byt >(hurt_player-1),<(hurt_player-1); Aerial side
$e2fd## .byt >(hurt_player-1),<(hurt_player-1); Aerial down
$e2ff## .byt >(hurt_player-1),<(hurt_player-1); Aerial up
$e301## .byt >(hurt_player-1),<(hurt_player-1); Aerial neutral
$e303## .byt >(hurt_player-1),<(hurt_player-1); Aerial special neutral
$e305## .byt >(hurt_player-1),<(hurt_player-1); Special up
$e307## .byt >(hurt_player-1),<(hurt_player-1); Special down
$e309## .byt >(hurt_player-1),<(hurt_player-1); Up tilt
$e30b## .byt >(shielding_player_hurt-1),<(shielding_player_hurt-1); Shielding
$e30d#anim_sinbad_idle#
\; Frame 1
\ .byt 60
$e30e## .byt $04,$00,$08,$00,$10
$e313## .byt $01,$07,$02,$01,$fa
$e318## .byt $01,$07,$03,$01,$02
$e31d## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e322## .byt $01,$08,$01,$00,$00
$e327## .byt $00
$e328##; Frame 2
\ .byt 60
$e329## .byt $04,$00,$08,$00,$10
$e32e## .byt $01,$06,$02,$01,$fa
$e333## .byt $01,$06,$03,$01,$02
$e338## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e33d## .byt $01,$08,$01,$00,$00
$e342## .byt $00
$e343##; End of animation
\ .byt $00
$e344#anim_sinbad_run#
\; Frame 1
\ .byt 5
$e345## .byt $04,$00,$10,$00,$10
$e34a## .byt $01,$00,$04,$00,$00; Y, tile, attr, X
$e34f## .byt $01,$00,$05,$00,$08
$e354## .byt $01,$08,$06,$00,$00
$e359## .byt $01,$08,$07,$00,$08
$e35e## .byt $00
$e35f##; Frame 2
\ .byt 5
$e360## .byt $04,$00,$10,$00,$10
$e365## .byt $01,$00,$08,$00,$00; Y, tile, attr, X
$e36a## .byt $01,$00,$05,$00,$08
$e36f## .byt $01,$08,$09,$00,$00
$e374## .byt $01,$08,$0a,$00,$08
$e379## .byt $00
$e37a##; Frame 3
\ .byt 5
$e37b## .byt $04,$00,$10,$00,$10
$e380## .byt $01,$00,$04,$00,$00; Y, tile, attr, X
$e385## .byt $01,$00,$05,$00,$08
$e38a## .byt $01,$08,$0b,$00,$00
$e38f## .byt $01,$08,$0c,$00,$08
$e394## .byt $00
$e395##; End of animation
\ .byt $00
$e396#anim_sinbad_jab#
\; Frame 1
\ .byt 1
$e397## .byt $04,$00,$08,$00,$10
$e39c## .byt $08,$01,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$02,$0a
$e3ab## .byt $01,$02,$02,$01,$f4
$e3b0## .byt $01,$02,$03,$01,$fc
$e3b5## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e3ba## .byt $01,$08,$01,$00,$00
$e3bf## .byt $00
$e3c0##; Frame 2
\ .byt 1
$e3c1## .byt $04,$00,$08,$00,$10
$e3c6## .byt $08,$00,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$03,$0b
$e3d5## .byt $01,$03,$02,$01,$f4
$e3da## .byt $01,$03,$03,$01,$fc
$e3df## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e3e4## .byt $01,$08,$01,$00,$00
$e3e9## .byt $00
$e3ea##; Frame 3
\ .byt 1
$e3eb## .byt $04,$00,$08,$00,$10
$e3f0## .byt $08,$00,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$04,$0c
$e3ff## .byt $01,$04,$02,$01,$f4
$e404## .byt $01,$04,$03,$01,$fc
$e409## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e40e## .byt $01,$08,$01,$00,$00
$e413## .byt $00
$e414##; Frame 4
\ .byt 1
$e415## .byt $04,$00,$08,$00,$10
$e41a## .byt $08,$00,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$05,$0d
$e429## .byt $01,$05,$02,$01,$f4
$e42e## .byt $01,$05,$03,$01,$fc
$e433## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e438## .byt $01,$08,$01,$00,$00
$e43d## .byt $00
$e43e##; Frame 5
\ .byt 1
$e43f## .byt $04,$00,$08,$00,$10
$e444## .byt $08,$00,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$06,$0e
$e453## .byt $01,$06,$02,$01,$f4
$e458## .byt $01,$06,$03,$01,$fc
$e45d## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e462## .byt $01,$08,$01,$00,$00
$e467## .byt $00
$e468##; Frame 6
\ .byt 1
$e469## .byt $04,$00,$08,$00,$10
$e46e## .byt $08,$00,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$07,$0f
$e47d## .byt $01,$07,$02,$01,$f4
$e482## .byt $01,$07,$03,$01,$fc
$e487## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e48c## .byt $01,$08,$01,$00,$00
$e491## .byt $00
$e492##; Frame 7
\ .byt 1
$e493## .byt $04,$00,$08,$00,$10
$e498## .byt $08,$00,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$08,$10
$e4a7## .byt $01,$08,$02,$01,$f4
$e4ac## .byt $01,$08,$03,$01,$fc
$e4b1## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e4b6## .byt $01,$08,$01,$00,$00
$e4bb## .byt $00
$e4bc##; Frame 8
\ .byt 1
$e4bd## .byt $04,$00,$08,$00,$10
$e4c2## .byt $08,$00,$01,>$fe00,<$fe00,>$fe00,<$fe00,>$fffc,<$fffc,>$fffc,<$fffc,$f4,$04,$09,$11
$e4d1## .byt $01,$09,$02,$01,$f4
$e4d6## .byt $01,$09,$03,$01,$fc
$e4db## .byt $01,$00,$00,$00,$00; Y, tile, attr, X
$e4e0## .byt $01,$08,$01,$00,$00
$e4e5## .byt $00
$e4e6##; End of animation
\ .byt $00
$e4e7#anim_sinbad_side_tilt#
\; Frame 1
\ .byt 7
$e4e8## .byt $04,$00,$0c,$00,$10
$e4ed## .byt $08,$01,$05,>$fd00,<$fd00,>$fd00,<$fd00,>$fff8,<$fff8,>$fffe,<$fffe,$04,$0a,$f4,$00; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$e4fc## .byt $01,$f4,$0f,$01,$02
$e501## .byt $01,$fc,$10,$01,$02
$e506## .byt $01,$00,$13,$00,$fc; Y, tile, attr, X
$e50b## .byt $01,$00,$14,$00,$04
$e510## .byt $01,$08,$15,$00,$fc
$e515## .byt $01,$08,$16,$00,$04
$e51a## .byt $00
$e51b##; Frame 2
\ .byt 7
$e51c## .byt $04,$00,$08,$00,$10
$e521## .byt $08,$00,$05,>$fd00,<$fd00,>$fd00,<$fd00,>$fff8,<$fff8,>$fffe,<$fffe,$f9,$01,$fc,$08
$e530## .byt $01,$fc,$11,$01,$f9; Y, tile, attr, X
$e535## .byt $01,$04,$12,$01,$f9
$e53a## .byt $01,$00,$17,$00,$00
$e53f## .byt $01,$08,$18,$00,$00
$e544## .byt $00
$e545##; Frame 3
\ .byt 7
$e546## .byt $04,$fc,$08,$00,$10
$e54b## .byt $08,$00,$05,>$fd00,<$fd00,>$fd00,<$fd00,>$fff8,<$fff8,>$fffe,<$fffe,$f4,$00,$06,$0c
$e55a## .byt $01,$06,$02,$01,$f4; Y, tile, attr, X
$e55f## .byt $01,$06,$03,$01,$fc
$e564## .byt $01,$00,$19,$00,$f8
$e569## .byt $01,$00,$1a,$00,$00
$e56e## .byt $01,$08,$1b,$00,$00
$e573## .byt $00
$e574##; End of animation
\ .byt $00
$e575#anim_sinbad_special#
\; Frame 1
\ .byt 3
$e576## .byt $04,$f8,$08,$02,$0d; left, right, top, bottom
$e57b## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$e9,$f6,$05,$0b; enabled, damages, base_h (2 Bytes), base_v (2 Bytes), force_h (2 Bytes), force_v (2 Bytes), left, right, top, bottom
$e58a## .byt $01,$00,$1c,$00,$f8; Y, tile, attr, X
$e58f## .byt $01,$00,$1d,$00,$00
$e594## .byt $01,$08,$1e,$00,$f8
$e599## .byt $01,$08,$1f,$00,$00
$e59e## .byt $01,$05,$02,$01,$e9
$e5a3## .byt $01,$05,$03,$01,$f1
$e5a8## .byt $00
$e5a9##; Frame 2
\ .byt 3
$e5aa## .byt $04,$f8,$08,$02,$0d
$e5af## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$ee,$f9,$10,$18
$e5be## .byt $01,$00,$1c,$00,$f8
$e5c3## .byt $01,$00,$1d,$00,$00
$e5c8## .byt $01,$08,$1e,$00,$f8
$e5cd## .byt $01,$08,$1f,$00,$00
$e5d2## .byt $01,$10,$24,$01,$ee
$e5d7## .byt $01,$10,$25,$01,$f6
$e5dc## .byt $00
$e5dd##; Frame 3
\ .byt 3
$e5de## .byt $04,$fa,$05,$00,$10
$e5e3## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$fd,$03,$13,$1f
$e5f2## .byt $01,$00,$21,$00,$f8
$e5f7## .byt $01,$00,$23,$00,$00
$e5fc## .byt $01,$08,$20,$00,$f8
$e601## .byt $01,$08,$22,$00,$00
$e606## .byt $01,$17,$0f,$c1,$fd
$e60b## .byt $01,$0f,$10,$c1,$fd
$e610## .byt $00
$e611##; Frame 4
\ .byt 3
$e612## .byt $04,$fa,$05,$00,$10
$e617## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$08,$10,$0f,$1b
$e626## .byt $01,$00,$21,$00,$f8
$e62b## .byt $01,$00,$23,$00,$00
$e630## .byt $01,$08,$20,$00,$f8
$e635## .byt $01,$08,$22,$00,$00
$e63a## .byt $01,$13,$11,$c1,$08
$e63f## .byt $01,$0b,$12,$c1,$08
$e644## .byt $00
$e645##; Frame 5
\ .byt 3
$e646## .byt $04,$f8,$08,$03,$0e
$e64b## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$0b,$17,$05,$0b
$e65a## .byt $01,$00,$1f,$c0,$f8
$e65f## .byt $01,$00,$1e,$c0,$00
$e664## .byt $01,$08,$1d,$c0,$f8
$e669## .byt $01,$08,$1c,$c0,$00
$e66e## .byt $01,$03,$02,$c1,$0f
$e673## .byt $01,$03,$03,$c1,$07
$e678## .byt $00
$e679##; Frame 6
\ .byt 3
$e67a## .byt $04,$f8,$08,$03,$0e
$e67f## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$07,$13,$f8,$00
$e68e## .byt $01,$00,$1f,$c0,$f8
$e693## .byt $01,$00,$1e,$c0,$00
$e698## .byt $01,$08,$1d,$c0,$f8
$e69d## .byt $01,$08,$1c,$c0,$00
$e6a2## .byt $01,$f8,$24,$c1,$0b
$e6a7## .byt $01,$f8,$25,$c1,$03
$e6ac## .byt $00
$e6ad##; Frame 7
\ .byt 3
$e6ae## .byt $04,$fb,$06,$00,$10
$e6b3## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$fd,$02,$f1,$fd
$e6c2## .byt $01,$00,$22,$c0,$f8
$e6c7## .byt $01,$00,$20,$c0,$00
$e6cc## .byt $01,$08,$23,$c0,$f8
$e6d1## .byt $01,$08,$21,$c0,$00
$e6d6## .byt $01,$f1,$0f,$01,$fb
$e6db## .byt $01,$f9,$10,$01,$fb
$e6e0## .byt $00
$e6e1##; Frame 8
\ .byt 3
$e6e2## .byt $04,$fb,$06,$00,$10
$e6e7## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$f0,$f8,$f5,$01
$e6f6## .byt $01,$00,$22,$c0,$f8
$e6fb## .byt $01,$00,$20,$c0,$00
$e700## .byt $01,$08,$23,$c0,$f8
$e705## .byt $01,$08,$21,$c0,$00
$e70a## .byt $01,$f5,$11,$01,$f0
$e70f## .byt $01,$fd,$12,$01,$f0
$e714## .byt $00
$e715##; End of animation
\ .byt $00
$e716#anim_sinbad_side_special_charge#
\; Frame 1
\ .byt 7
$e717## .byt $04,$fc,$08,$00,$10
$e71c## .byt $01,$08,$26,$01,$f9
$e721## .byt $01,$08,$26,$41,$07
$e726## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e72b## .byt $01,$00,$1a,$00,$00
$e730## .byt $01,$08,$1b,$00,$00
$e735## .byt $00
$e736##; Frame 2
\ .byt 7
$e737## .byt $04,$fc,$08,$00,$10
$e73c## .byt $01,$08,$27,$01,$f9
$e741## .byt $01,$08,$27,$41,$07
$e746## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e74b## .byt $01,$00,$1a,$00,$00
$e750## .byt $01,$08,$1b,$00,$00
$e755## .byt $00
$e756##; Frame 3
\ .byt 7
$e757## .byt $04,$fc,$08,$00,$10
$e75c## .byt $01,$08,$26,$01,$f9
$e761## .byt $01,$08,$26,$41,$07
$e766## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e76b## .byt $01,$00,$1a,$00,$00
$e770## .byt $01,$08,$1b,$00,$00
$e775## .byt $00
$e776##; Frame 4
\ .byt 7
$e777## .byt $04,$fc,$08,$00,$10
$e77c## .byt $01,$08,$27,$01,$f9
$e781## .byt $01,$08,$27,$41,$07
$e786## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e78b## .byt $01,$00,$1a,$00,$00
$e790## .byt $01,$08,$1b,$00,$00
$e795## .byt $00
$e796##; Frame 5
\ .byt 7
$e797## .byt $04,$fc,$08,$00,$10
$e79c## .byt $01,$08,$28,$01,$f9
$e7a1## .byt $01,$08,$28,$41,$07
$e7a6## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e7ab## .byt $01,$00,$1a,$00,$00
$e7b0## .byt $01,$08,$1b,$00,$00
$e7b5## .byt $00
$e7b6##; Frame 6
\ .byt 7
$e7b7## .byt $04,$fc,$08,$00,$10
$e7bc## .byt $01,$08,$29,$01,$f9
$e7c1## .byt $01,$08,$29,$41,$07
$e7c6## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e7cb## .byt $01,$00,$1a,$00,$00
$e7d0## .byt $01,$08,$1b,$00,$00
$e7d5## .byt $00
$e7d6##; Frame 7
\ .byt 7
$e7d7## .byt $04,$fc,$08,$00,$10
$e7dc## .byt $01,$08,$28,$01,$f9
$e7e1## .byt $01,$08,$28,$41,$07
$e7e6## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e7eb## .byt $01,$00,$1a,$00,$00
$e7f0## .byt $01,$08,$1b,$00,$00
$e7f5## .byt $00
$e7f6##; Frame 8
\ .byt 7
$e7f7## .byt $04,$fc,$08,$00,$10
$e7fc## .byt $01,$08,$29,$01,$f9
$e801## .byt $01,$08,$29,$41,$07
$e806## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e80b## .byt $01,$00,$1a,$00,$00
$e810## .byt $01,$08,$1b,$00,$00
$e815## .byt $00
$e816##; Frame 9
\ .byt 7
$e817## .byt $04,$fc,$08,$00,$10
$e81c## .byt $01,$08,$2a,$01,$f9
$e821## .byt $01,$08,$2a,$41,$07
$e826## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e82b## .byt $01,$00,$1a,$00,$00
$e830## .byt $01,$08,$1b,$00,$00
$e835## .byt $00
$e836##; Frame 10
\ .byt 7
$e837## .byt $04,$fc,$08,$00,$10
$e83c## .byt $01,$08,$2b,$01,$f9
$e841## .byt $01,$08,$2b,$41,$07
$e846## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e84b## .byt $01,$00,$1a,$00,$00
$e850## .byt $01,$08,$1b,$00,$00
$e855## .byt $00
$e856##; Frame 11
\ .byt 7
$e857## .byt $04,$fc,$08,$00,$10
$e85c## .byt $01,$08,$2a,$01,$f9
$e861## .byt $01,$08,$2a,$41,$07
$e866## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e86b## .byt $01,$00,$1a,$00,$00
$e870## .byt $01,$08,$1b,$00,$00
$e875## .byt $00
$e876##; Frame 12
\ .byt 7
$e877## .byt $04,$fc,$08,$00,$10
$e87c## .byt $01,$08,$2b,$01,$f9
$e881## .byt $01,$08,$2b,$41,$07
$e886## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e88b## .byt $01,$00,$1a,$00,$00
$e890## .byt $01,$08,$1b,$00,$00
$e895## .byt $00
$e896##; Frame 13
\ .byt 7
$e897## .byt $04,$fc,$08,$00,$10
$e89c## .byt $01,$08,$2c,$01,$f9
$e8a1## .byt $01,$08,$2c,$41,$07
$e8a6## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e8ab## .byt $01,$00,$1a,$00,$00
$e8b0## .byt $01,$08,$1b,$00,$00
$e8b5## .byt $00
$e8b6##; Frame 14
\ .byt 7
$e8b7## .byt $04,$fc,$08,$00,$10
$e8bc## .byt $01,$08,$2d,$01,$f9
$e8c1## .byt $01,$08,$2d,$41,$07
$e8c6## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e8cb## .byt $01,$00,$1a,$00,$00
$e8d0## .byt $01,$08,$1b,$00,$00
$e8d5## .byt $00
$e8d6##; Frame 15
\ .byt 7
$e8d7## .byt $04,$fc,$08,$00,$10
$e8dc## .byt $01,$08,$2c,$01,$f9
$e8e1## .byt $01,$08,$2c,$41,$07
$e8e6## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e8eb## .byt $01,$00,$1a,$00,$00
$e8f0## .byt $01,$08,$1b,$00,$00
$e8f5## .byt $00
$e8f6##; Frame 16
\ .byt 7
$e8f7## .byt $04,$fc,$08,$00,$10
$e8fc## .byt $01,$08,$2d,$01,$f9
$e901## .byt $01,$08,$2d,$41,$07
$e906## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e90b## .byt $01,$00,$1a,$00,$00
$e910## .byt $01,$08,$1b,$00,$00
$e915## .byt $00
$e916##; Frame 17
\ .byt 7
$e917## .byt $04,$fc,$08,$00,$10
$e91c## .byt $01,$08,$2c,$01,$f9
$e921## .byt $01,$08,$2c,$41,$07
$e926## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e92b## .byt $01,$00,$1a,$00,$00
$e930## .byt $01,$08,$1b,$00,$00
$e935## .byt $00
$e936##; Frame 18
\ .byt 7
$e937## .byt $04,$fc,$08,$00,$10
$e93c## .byt $01,$08,$2d,$01,$f9
$e941## .byt $01,$08,$2d,$41,$07
$e946## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$e94b## .byt $01,$00,$1a,$00,$00
$e950## .byt $01,$08,$1b,$00,$00
$e955## .byt $00
$e956##; End of animation
\ .byt $00
$e957#anim_sinbad_side_special_jump#
\; Frame 1
\ .byt 61
$e958## .byt $04,$00,$10,$00,$10
$e95d## .byt $08,$01,$04,>$0100,<$0100,>$0200,<$0200,>$00,<$00,>$00,<$00,$f8,$04,$06,$0c; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$e96c## .byt $01,$06,$02,$01,$f8
$e971## .byt $01,$06,$03,$01,$00
$e976## .byt $01,$00,$04,$00,$00; Y, tile, attr, X
$e97b## .byt $01,$00,$05,$00,$08
$e980## .byt $01,$08,$06,$00,$00
$e985## .byt $01,$08,$07,$00,$08
$e98a## .byt $00
$e98b##; End of animation
\ .byt $00
$e98c#anim_sinbad_helpless#
\; Frame 1
\ .byt 60
$e98d## .byt $04,$00,$08,$00,$10
$e992## .byt $01,$00,$01,$80,$00
$e997## .byt $01,$08,$00,$80,$00; Y, tile, attr, X
$e99c## .byt $00
$e99d##; End of animation
\ .byt $00
$e99e#anim_sinbad_landing#
\; Frame 1
\ .byt 1
$e99f## .byt $04,$00,$08,$01,$10
$e9a4## .byt $01,$08,$02,$01,$fa
$e9a9## .byt $01,$08,$03,$01,$02
$e9ae## .byt $01,$00,$2e,$00,$00; Y, tile, attr, X
$e9b3## .byt $01,$08,$2f,$00,$00
$e9b8## .byt $00
$e9b9##; Frame 2
\ .byt 3
$e9ba## .byt $04,$00,$08,$02,$10
$e9bf## .byt $01,$09,$02,$01,$fa
$e9c4## .byt $01,$09,$03,$01,$02
$e9c9## .byt $01,$00,$30,$00,$00; Y, tile, attr, X
$e9ce## .byt $01,$08,$31,$00,$00
$e9d3## .byt $00
$e9d4##; Frame 3
\ .byt 2
$e9d5## .byt $04,$00,$08,$01,$10
$e9da## .byt $01,$08,$02,$01,$fa
$e9df## .byt $01,$08,$03,$01,$02
$e9e4## .byt $01,$00,$2e,$00,$00; Y, tile, attr, X
$e9e9## .byt $01,$08,$2f,$00,$00
$e9ee## .byt $00
$e9ef##; End of animation
\ .byt $00
$e9f0#anim_sinbad_crashing#
\; Frame 1
\ .byt 3
$e9f1## .byt $04,$f8,$07,$0a,$0f; left, right, top, bottom
$e9f6## .byt $01,$08,$40,$01,$f0; Y, tile, attr, X
$e9fb## .byt $01,$08,$41,$00,$f8
$ea00## .byt $01,$08,$42,$00,$00
$ea05## .byt $01,$08,$40,$41,$08
$ea0a## .byt $00
$ea0b##; Frame 2
\ .byt 3
$ea0c## .byt $04,$f8,$07,$06,$0d
$ea11## .byt $11,$08,$43,$01,$f3; Y, tile, attr, X
$ea16## .byt $11,$08,$44,$01,$fc
$ea1b## .byt $11,$08,$43,$41,$05
$ea20## .byt $01,$06,$36,$00,$f8
$ea25## .byt $01,$06,$37,$00,$00
$ea2a## .byt $00
$ea2b##; Frame 3
\ .byt 3
$ea2c## .byt $04,$f8,$07,$08,$0f
$ea31## .byt $11,$08,$43,$01,$f3; Y, tile, attr, X
$ea36## .byt $11,$08,$44,$01,$fc
$ea3b## .byt $11,$08,$43,$41,$05
$ea40## .byt $01,$08,$36,$00,$f8; Y, tile, attr, X
$ea45## .byt $01,$08,$37,$00,$00
$ea4a## .byt $00
$ea4b##; Frame 4
\ .byt 13
$ea4c## .byt $04,$f8,$07,$08,$0f
$ea51## .byt $01,$08,$36,$00,$f8; Y, tile, attr, X
$ea56## .byt $01,$08,$37,$00,$00
$ea5b## .byt $00
$ea5c##; Frame 5
\ .byt 4
$ea5d## .byt $04,$fc,$07,$00,$0f
$ea62## .byt $01,$07,$02,$01,$fa
$ea67## .byt $01,$07,$03,$01,$02
$ea6c## .byt $01,$00,$19,$00,$f8; Y, tile, attr, X
$ea71## .byt $01,$00,$1a,$00,$00
$ea76## .byt $01,$08,$1b,$00,$00
$ea7b## .byt $00
$ea7c##; Frame 6
\ .byt 4
$ea7d## .byt $04,$00,$07,$02,$0f
$ea82## .byt $01,$09,$02,$01,$fa
$ea87## .byt $01,$09,$03,$01,$02
$ea8c## .byt $01,$00,$30,$00,$00; Y, tile, attr, X
$ea91## .byt $01,$08,$31,$00,$00
$ea96## .byt $00
$ea97##; End of animation
\ .byt $00
$ea98#anim_sinbad_thrown#
\; Frame 1
\ .byt 4
$ea99## .byt $04,$f8,$08,$00,$10
$ea9e## .byt $01,$00,$32,$00,$f8; Y, tile, attr, X
$eaa3## .byt $01,$00,$33,$00,$00
$eaa8## .byt $01,$08,$34,$00,$f8
$eaad## .byt $01,$08,$35,$00,$00
$eab2## .byt $00
$eab3##; Frame 2
\ .byt 4
$eab4## .byt $04,$f8,$08,$00,$10
$eab9## .byt $01,$00,$38,$00,$f8; Y, tile, attr, X
$eabe## .byt $01,$00,$39,$00,$00
$eac3## .byt $01,$08,$3a,$00,$f8
$eac8## .byt $01,$08,$3b,$00,$00
$eacd## .byt $00
$eace##; End of animation
\ .byt $00
$eacf#anim_sinbad_jumping#
\; Frame 1
\ .byt 3
$ead0## .byt $04,$00,$08,$02,$10; left, right, top, bottom
$ead5## .byt $01,$09,$02,$01,$fa; Y, tile, attr, X
$eada## .byt $01,$09,$03,$01,$02
$eadf## .byt $01,$00,$30,$00,$00
$eae4## .byt $01,$08,$31,$00,$00
$eae9## .byt $00
$eaea##; Frame 2
\ .byt 4
$eaeb## .byt $04,$00,$08,$00,$10
$eaf0## .byt $01,$fe,$11,$01,$fd
$eaf5## .byt $01,$06,$12,$01,$fd
$eafa## .byt $01,$00,$17,$00,$00
$eaff## .byt $01,$08,$3c,$00,$00
$eb04## .byt $00
$eb05##; Frame 3
\ .byt 100
$eb06## .byt $04,$00,$08,$00,$10
$eb0b## .byt $01,$fa,$0f,$01,$01
$eb10## .byt $01,$02,$10,$01,$01
$eb15## .byt $01,$00,$3d,$00,$00
$eb1a## .byt $01,$08,$3e,$00,$00
$eb1f## .byt $00
$eb20##; End of animation
\ .byt $00
$eb21#anim_sinbad_falling#
\; Frame 1
\ .byt 100
$eb22## .byt $04,$00,$08,$00,$10
$eb27## .byt $01,$fa,$0f,$01,$01
$eb2c## .byt $01,$02,$10,$01,$01
$eb31## .byt $01,$00,$3d,$00,$00; Y, tile, attr, X
$eb36## .byt $01,$08,$3e,$00,$00
$eb3b## .byt $00
$eb3c##; End of animation
\ .byt $00
$eb3d#anim_sinbad_aerial_jumping#
\; Frame 1
\ .byt 3
$eb3e## .byt $04,$00,$08,$02,$10; left, right, top, bottom
$eb43## .byt $01,$08,$2c,$01,$f9; Y, tile, attr, X
$eb48## .byt $01,$08,$2d,$41,$07
$eb4d## .byt $01,$09,$02,$01,$fa
$eb52## .byt $01,$09,$03,$01,$02
$eb57## .byt $01,$00,$30,$00,$00
$eb5c## .byt $01,$08,$31,$00,$00
$eb61## .byt $00
$eb62##; Frame 2
\ .byt 4
$eb63## .byt $04,$00,$08,$00,$10
$eb68## .byt $01,$fe,$11,$01,$fd
$eb6d## .byt $01,$06,$12,$01,$fd
$eb72## .byt $01,$00,$17,$00,$00
$eb77## .byt $01,$08,$3c,$00,$00
$eb7c## .byt $00
$eb7d##; Frame 3
\ .byt 100
$eb7e## .byt $04,$00,$08,$00,$10
$eb83## .byt $01,$fa,$0f,$01,$01
$eb88## .byt $01,$02,$10,$01,$01
$eb8d## .byt $01,$00,$3d,$00,$00
$eb92## .byt $01,$08,$3e,$00,$00
$eb97## .byt $00
$eb98##; End of animation
\ .byt $00
$eb99#anim_sinbad_down_tilt#
\; Frame 1
\ .byt 2
$eb9a## .byt $04,$00,$07,$02,$0f
$eb9f## .byt $01,$09,$02,$01,$f9
$eba4## .byt $01,$09,$03,$01,$01
$eba9## .byt $01,$00,$30,$00,$00; Y, tile, attr, X
$ebae## .byt $01,$08,$31,$00,$00
$ebb3## .byt $00
$ebb4##; Frame 2
\ .byt 4
$ebb5## .byt $04,$00,$07,$02,$0f
$ebba## .byt $08,$01,$03,>$00,<$00,>$fb00,<$fb00,>$00,<$00,>$ffe0,<$ffe0,$fa,$05,$0c,$11; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ebc9## .byt $01,$0a,$02,$81,$fa
$ebce## .byt $01,$0a,$03,$81,$02
$ebd3## .byt $01,$00,$30,$00,$00; Y, tile, attr, X
$ebd8## .byt $01,$08,$31,$00,$00
$ebdd## .byt $00
$ebde##; Frame 3
\ .byt 2
$ebdf## .byt $04,$00,$07,$01,$0f
$ebe4## .byt $08,$00,$03,>$00,<$00,>$fb00,<$fb00,>$00,<$00,>$ffe0,<$ffe0,$f5,$00,$06,$0b; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ebf3## .byt $01,$04,$02,$81,$f5
$ebf8## .byt $01,$04,$03,$81,$fd
$ebfd## .byt $01,$00,$2e,$00,$00; Y, tile, attr, X
$ec02## .byt $01,$08,$2f,$00,$00
$ec07## .byt $00
$ec08##; Frame 4
\ .byt 3
$ec09## .byt $04,$00,$07,$00,$0f
$ec0e## .byt $08,$00,$03,>$00,<$00,>$fb00,<$fb00,>$00,<$00,>$ffe0,<$ffe0,$f6,$00,$fe,$05; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ec1d## .byt $01,$fe,$24,$81,$f6
$ec22## .byt $01,$fe,$25,$81,$fe
$ec27## .byt $01,$00,$17,$00,$00; Y, tile, attr, X
$ec2c## .byt $01,$08,$18,$00,$00
$ec31## .byt $00
$ec32##; Frame 5
\ .byt 6
$ec33## .byt $04,$fc,$07,$00,$0f
$ec38## .byt $08,$00,$03,>$00,<$00,>$fb00,<$fb00,>$00,<$00,>$ffe0,<$ffe0,$00,$05,$f4,$ff; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ec47## .byt $01,$f4,$0f,$41,$00
$ec4c## .byt $01,$fc,$10,$41,$00
$ec51## .byt $01,$00,$13,$00,$f8; Y, tile, attr, X
$ec56## .byt $01,$00,$14,$00,$00
$ec5b## .byt $01,$08,$15,$00,$f8
$ec60## .byt $01,$08,$16,$00,$00
$ec65## .byt $00
$ec66##; Frame 6
\ .byt 4
$ec67## .byt $04,$00,$07,$00,$0f
$ec6c## .byt $01,$fc,$11,$01,$00
$ec71## .byt $01,$04,$12,$01,$00
$ec76## .byt $01,$00,$17,$00,$00; Y, tile, attr, X
$ec7b## .byt $01,$08,$18,$00,$00
$ec80## .byt $00
$ec81##; End of animation
\ .byt $00
$ec82#anim_sinbad_aerial_side#
\; Frame 1
\ .byt 3
$ec83## .byt $04,$00,$0b,$00,$0f; left, right, top, bottom
$ec88## .byt $01,$00,$24,$c1,$0b; Y, tile, attr, X
$ec8d## .byt $01,$00,$25,$c1,$03
$ec92## .byt $01,$00,$13,$00,$fc
$ec97## .byt $01,$00,$14,$00,$04
$ec9c## .byt $01,$08,$15,$00,$fc
$eca1## .byt $01,$08,$16,$00,$04
$eca6## .byt $00
$eca7##; Frame 2
\ .byt 3
$eca8## .byt $04,$00,$07,$00,$0f; left, right, top, bottom
$ecad## .byt $01,$fa,$0f,$01,$fe; Y, tile, attr, X
$ecb2## .byt $01,$02,$10,$01,$fe
$ecb7## .byt $01,$00,$3d,$00,$00
$ecbc## .byt $01,$08,$3e,$00,$00
$ecc1## .byt $00
$ecc2##; Frame 3
\ .byt 16
$ecc3## .byt $04,$f6,$05,$04,$0d; left, right, top, bottom
$ecc8## .byt $08,$01,$04,>$fd00,<$fd00,>$ff80,<$ff80,>$fff8,<$fff8,>$fffe,<$fffe,$e9,$f5,$07,$0c; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ecd7## .byt $01,$07,$02,$01,$e9; Y, tile, attr, X
$ecdc## .byt $01,$07,$03,$01,$f1
$ece1## .byt $01,$fe,$50,$00,$f6
$ece6## .byt $01,$06,$51,$00,$f6
$eceb## .byt $01,$06,$52,$00,$fe
$ecf0## .byt $00
$ecf1##; Frame 4
\ .byt 3
$ecf2## .byt $04,$00,$07,$00,$0f; left, right, top, bottom
$ecf7## .byt $01,$08,$02,$01,$f9; Y, tile, attr, X
$ecfc## .byt $01,$08,$03,$01,$01
$ed01## .byt $01,$00,$3d,$00,$00
$ed06## .byt $01,$08,$3e,$00,$00
$ed0b## .byt $00
$ed0c##; End of animation
\ .byt $00
$ed0d#anim_sinbad_aerial_down#
\; Frame 1
\ .byt 3
$ed0e## .byt $04,$fc,$07,$00,$0f; left, right, top, bottom
$ed13## .byt $01,$06,$02,$01,$f4; Y, tile, attr, X
$ed18## .byt $01,$06,$03,$01,$fc
$ed1d## .byt $01,$00,$19,$00,$f8
$ed22## .byt $01,$00,$1a,$00,$00
$ed27## .byt $01,$08,$1b,$00,$00
$ed2c## .byt $00
$ed2d##; Frame 2
\ .byt 3
$ed2e## .byt $04,$f8,$07,$06,$0f
$ed33## .byt $08,$01,$03,>$fd00,<$fd00,>$0100,<$0100,>$fffb,<$fffb,>$0a,<$0a,$f1,$fc,$0a,$0f; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ed42## .byt $01,$0a,$02,$01,$f1
$ed47## .byt $01,$0a,$03,$01,$f9
$ed4c## .byt $01,$00,$50,$00,$f8
$ed51## .byt $01,$08,$51,$00,$f8
$ed56## .byt $01,$08,$52,$00,$00
$ed5b## .byt $00
$ed5c##; Frame 3
\ .byt 3
$ed5d## .byt $04,$fd,$04,$00,$0d
$ed62## .byt $08,$00,$03,>$fd00,<$fd00,>$0100,<$0100,>$fffb,<$fffb,>$0a,<$0a,$f4,$04,$08,$13
$ed71## .byt $01,$09,$24,$01,$f4
$ed76## .byt $01,$09,$25,$01,$fc
$ed7b## .byt $01,$fe,$4f,$80,$fd
$ed80## .byt $01,$06,$4e,$80,$fd
$ed85## .byt $00
$ed86##; Frame 4
\ .byt 3
$ed87## .byt $04,$00,$07,$00,$0f
$ed8c## .byt $08,$00,$03,>$fd00,<$fd00,>$0100,<$0100,>$fffb,<$fffb,>$0a,<$0a,$fb,$0d,$0f,$19
$ed9b## .byt $01,$13,$0f,$c1,$03
$eda0## .byt $01,$0b,$10,$c1,$03
$eda5## .byt $01,$00,$3e,$80,$00
$edaa## .byt $01,$08,$3d,$80,$00
$edaf## .byt $00
$edb0##; Frame 5
\ .byt 3
$edb1## .byt $04,$03,$0a,$00,$0d
$edb6## .byt $08,$00,$03,>$fd00,<$fd00,>$0100,<$0100,>$fffb,<$fffb,>$0a,<$0a,$04,$11,$06,$13
$edc5## .byt $01,$fe,$4f,$c0,$03
$edca## .byt $01,$06,$4e,$c0,$03
$edcf## .byt $01,$02,$12,$c1,$0a
$edd4## .byt $01,$0a,$11,$c1,$0a
$edd9## .byt $00
$edda##; Frame 6
\ .byt 3
$eddb## .byt $04,$0a,$10,$06,$0f
$ede0## .byt $08,$00,$03,>$fd00,<$fd00,>$0100,<$0100,>$fffb,<$fffb,>$0a,<$0a,$0c,$17,$0a,$0f
$edef## .byt $01,$00,$50,$40,$08
$edf4## .byt $01,$08,$51,$40,$08
$edf9## .byt $01,$08,$52,$40,$00
$edfe## .byt $01,$08,$03,$c1,$08
$ee03## .byt $01,$08,$02,$c1,$10
$ee08## .byt $00
$ee09##; Frame 7
\ .byt 3
$ee0a## .byt $04,$00,$0b,$00,$0f
$ee0f## .byt $01,$00,$19,$40,$08
$ee14## .byt $01,$00,$1a,$40,$00
$ee19## .byt $01,$08,$1b,$40,$00
$ee1e## .byt $01,$06,$03,$c1,$04
$ee23## .byt $01,$06,$02,$c1,$0c
$ee28## .byt $00
$ee29##; End of animation
\ .byt $00
$ee2a#anim_sinbad_aerial_up#
\; Frame 1
\ .byt 4
$ee2b## .byt $04,$fd,$08,$00,$0f; left, right, top, bottom
$ee30## .byt $11,$ff,$53,$01,$fe; Y, tile, attr, X
$ee35## .byt $01,$04,$02,$01,$f7
$ee3a## .byt $01,$04,$03,$01,$ff
$ee3f## .byt $01,$00,$13,$00,$f9
$ee44## .byt $01,$00,$14,$00,$01
$ee49## .byt $01,$08,$15,$00,$f9
$ee4e## .byt $01,$08,$16,$00,$01
$ee53## .byt $00
$ee54##; Frame 2
\ .byt 4
$ee55## .byt $04,$fd,$08,$00,$0f; left, right, top, bottom
$ee5a## .byt $11,$ff,$53,$01,$fe; Y, tile, attr, X
$ee5f## .byt $11,$f7,$54,$01,$f6
$ee64## .byt $11,$f7,$54,$41,$06
$ee69## .byt $11,$07,$54,$81,$f6
$ee6e## .byt $11,$07,$54,$c1,$06
$ee73## .byt $01,$fe,$11,$01,$fb
$ee78## .byt $01,$06,$12,$01,$fb
$ee7d## .byt $01,$00,$13,$00,$f9
$ee82## .byt $01,$00,$14,$00,$01
$ee87## .byt $01,$08,$15,$00,$f9
$ee8c## .byt $01,$08,$16,$00,$01
$ee91## .byt $00
$ee92##; Frame 3
\ .byt 4
$ee93## .byt $04,$fd,$0b,$fd,$0a; left, right, top, bottom
$ee98## .byt $08,$01,$02,>$fe00,<$fe00,>$fc00,<$fc00,>$fffb,<$fffb,>$fff8,<$fff8,$00,$05,$f4,$ff; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$eea7## .byt $11,$f7,$54,$01,$f6
$eeac## .byt $11,$f7,$54,$41,$06
$eeb1## .byt $11,$07,$54,$81,$f6
$eeb6## .byt $11,$07,$54,$c1,$06
$eebb## .byt $01,$f4,$0f,$01,$fe
$eec0## .byt $01,$fc,$10,$01,$fe
$eec5## .byt $01,$fd,$55,$00,$fd
$eeca## .byt $01,$fd,$56,$00,$05
$eecf## .byt $01,$05,$57,$00,$fd
$eed4## .byt $01,$05,$58,$00,$05
$eed9## .byt $00
$eeda##; Frame 4
\ .byt 20
$eedb## .byt $04,$fd,$0b,$fd,$0a; left, right, top, bottom
$eee0## .byt $08,$01,$02,>$fe00,<$fe00,>$fc00,<$fc00,>$fffb,<$fffb,>$fff8,<$fff8,$00,$05,$f4,$ff; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$eeef## .byt $01,$f4,$0f,$01,$fe
$eef4## .byt $01,$fc,$10,$01,$fe
$eef9## .byt $01,$fd,$55,$00,$fd
$eefe## .byt $01,$fd,$56,$00,$05
$ef03## .byt $01,$05,$57,$00,$fd
$ef08## .byt $01,$05,$58,$00,$05
$ef0d## .byt $00
$ef0e##; End of animation
\ .byt $00
$ef0f#anim_sinbad_aerial_neutral#
\; Frame 1
\ .byt 3
$ef10## .byt $04,$00,$07,$00,$0f; left, right, top, bottom
$ef15## .byt $08,$01,$01,>$ff00,<$ff00,>$fe00,<$fe00,>$fffe,<$fffe,>$fffb,<$fffb,$07,$11,$fc,$03; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ef24## .byt $01,$fc,$24,$c1,$0a
$ef29## .byt $01,$fc,$25,$c1,$02
$ef2e## .byt $01,$00,$3d,$00,$00; Y, tile, attr, X
$ef33## .byt $01,$08,$3e,$00,$00
$ef38## .byt $00
$ef39##; Frame 2
\ .byt 2
$ef3a## .byt $04,$00,$07,$00,$0f
$ef3f## .byt $08,$00,$01,>$ff00,<$ff00,>$fe00,<$fe00,>$fffe,<$fffe,>$fffb,<$fffb,$ff,$04,$f7,$02; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ef4e## .byt $01,$f7,$0f,$01,$fd
$ef53## .byt $01,$ff,$10,$01,$fd
$ef58## .byt $01,$00,$3d,$00,$00; Y, tile, attr, X
$ef5d## .byt $01,$08,$3e,$00,$00
$ef62## .byt $00
$ef63##; Frame 3
\ .byt 2
$ef64## .byt $04,$00,$07,$00,$0f
$ef69## .byt $08,$00,$01,>$ff00,<$ff00,>$fe00,<$fe00,>$fffe,<$fffe,>$fffb,<$fffb,$f2,$fd,$04,$09; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$ef78## .byt $01,$04,$02,$01,$f2
$ef7d## .byt $01,$04,$03,$01,$fa
$ef82## .byt $01,$00,$3d,$00,$00; Y, tile, attr, X
$ef87## .byt $01,$08,$3e,$00,$00
$ef8c## .byt $00
$ef8d##; Frame 4
\ .byt 2
$ef8e## .byt $04,$00,$07,$00,$0f
$ef93## .byt $08,$00,$01,>$ff00,<$ff00,>$fe00,<$fe00,>$fffe,<$fffe,>$fffb,<$fffb,$f9,$03,$0e,$15; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$efa2## .byt $01,$0e,$24,$01,$f9
$efa7## .byt $01,$0e,$25,$01,$01
$efac## .byt $01,$00,$3d,$00,$00; Y, tile, attr, X
$efb1## .byt $01,$08,$3e,$00,$00
$efb6## .byt $00
$efb7##; Frame 5
\ .byt 3
$efb8## .byt $04,$00,$07,$00,$0f
$efbd## .byt $01,$0e,$0f,$c1,$04
$efc2## .byt $01,$06,$10,$c1,$04
$efc7## .byt $01,$00,$3d,$00,$00; Y, tile, attr, X
$efcc## .byt $01,$08,$3e,$00,$00
$efd1## .byt $00
$efd2##; End of animation
\ .byt $00
$efd3#anim_sinbad_aerial_spe#
\; Frame 1
\ .byt 4
$efd4## .byt $04,$00,$07,$01,$0f; left, right, top, bottom
$efd9## .byt $08,$01,$08,>$fe00,<$fe00,>$fe00,<$fe00,>$fffb,<$fffb,>$fffb,<$fffb,$f4,$03,$10,$17; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$efe8## .byt $01,$10,$24,$01,$f4; Y, tile, attr, X
$efed## .byt $01,$10,$25,$01,$fc
$eff2## .byt $01,$0f,$2d,$81,$fb
$eff7## .byt $01,$00,$2e,$00,$00
$effc## .byt $01,$08,$2f,$00,$00
$f001## .byt $00
$f002##; Frame 2
\ .byt 3
$f003## .byt $04,$00,$07,$01,$0f; left, right, top, bottom
$f008## .byt $08,$00,$08,>$fe00,<$fe00,>$fe00,<$fe00,>$fffb,<$fffb,>$fffb,<$fffb,$fd,$06,$0f,$1a; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f017## .byt $01,$13,$0f,$c1,$01; Y, tile, attr, X
$f01c## .byt $01,$0b,$10,$c1,$01
$f021## .byt $01,$11,$2d,$c1,$fd
$f026## .byt $01,$00,$2e,$00,$00
$f02b## .byt $01,$08,$2f,$00,$00
$f030## .byt $00
$f031##; Frame 3
\ .byt 4
$f032## .byt $04,$00,$07,$01,$0f; left, right, top, bottom
$f037## .byt $08,$00,$08,>$fe00,<$fe00,>$fe00,<$fe00,>$fffb,<$fffb,>$fffb,<$fffb,$05,$13,$10,$17; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f046## .byt $01,$10,$24,$41,$0c; Y, tile, attr, X
$f04b## .byt $01,$10,$25,$41,$04
$f050## .byt $01,$11,$2d,$c1,$05
$f055## .byt $01,$00,$2e,$00,$00
$f05a## .byt $01,$08,$2f,$00,$00
$f05f## .byt $00
$f060##; Frame 4
\ .byt 3
$f061## .byt $04,$00,$07,$01,$0f; left, right, top, bottom
$f066## .byt $08,$00,$08,>$fe00,<$fe00,>$fe00,<$fe00,>$fffb,<$fffb,>$fffb,<$fffb,$01,$0a,$0f,$17; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f075## .byt $01,$0f,$0f,$81,$ff; Y, tile, attr, X
$f07a## .byt $01,$07,$10,$81,$ff
$f07f## .byt $01,$10,$2d,$81,$03
$f084## .byt $01,$00,$2e,$00,$00
$f089## .byt $01,$08,$2f,$00,$00
$f08e## .byt $00
$f08f##; End of animation
\ .byt $00
$f090#anim_sinbad_spe_up_prepare#
\; Frame 1
\ .byt 200
$f091## .byt $04,$00,$07,$02,$0f; left, right, top, bottom
$f096## .byt $01,$09,$02,$01,$fa; Y, tile, attr, X
$f09b## .byt $01,$09,$03,$01,$02
$f0a0## .byt $01,$00,$30,$00,$00
$f0a5## .byt $01,$08,$31,$00,$00
$f0aa## .byt $01,$08,$2d,$01,$f9
$f0af## .byt $01,$08,$2d,$41,$07
$f0b4## .byt $00
$f0b5##; End of animation
\ .byt $00
$f0b6#anim_sinbad_spe_up_jump#
\; Frame 1
\ .byt 200
$f0b7## .byt $04,$00,$07,$00,$0f
$f0bc## .byt $08,$01,$0a,>$fd00,<$fd00,>$fd00,<$fd00,>$fffb,<$fffb,>$fffe,<$fffe,$f4,$ff,$02,$07
$f0cb## .byt $01,$00,$02,$81,$f4; Y, tile, attr, X
$f0d0## .byt $01,$00,$03,$81,$fc
$f0d5## .byt $01,$00,$17,$00,$00
$f0da## .byt $01,$08,$3c,$00,$00
$f0df## .byt $00
$f0e0##; End of animation
\ .byt $00
$f0e1#anim_sinbad_spe_down#
\; Frame 1
\ .byt 2
$f0e2## .byt $04,$00,$07,$02,$0f
$f0e7## .byt $01,$09,$02,$01,$f9
$f0ec## .byt $01,$09,$03,$01,$01
$f0f1## .byt $01,$00,$30,$00,$00; Y, tile, attr, X
$f0f6## .byt $01,$08,$31,$00,$00
$f0fb## .byt $00
$f0fc##; Frame 2
\ .byt 4
$f0fd## .byt $04,$00,$07,$02,$0f
$f102## .byt $08,$01,$03,>$0300,<$0300,>$ff00,<$ff00,>$00,<$00,>$00,<$00,$fa,$05,$0c,$11; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f111## .byt $01,$0a,$02,$81,$fa
$f116## .byt $01,$0a,$03,$81,$02
$f11b## .byt $01,$00,$30,$00,$00; Y, tile, attr, X
$f120## .byt $01,$08,$31,$00,$00
$f125## .byt $00
$f126##; Frame 3
\ .byt 2
$f127## .byt $04,$00,$07,$01,$0f
$f12c## .byt $08,$00,$03,>$0300,<$0300,>$ff00,<$ff00,>$00,<$00,>$00,<$00,$f5,$00,$06,$0b; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f13b## .byt $01,$04,$02,$81,$f5
$f140## .byt $01,$04,$03,$81,$fd
$f145## .byt $01,$00,$2e,$00,$00; Y, tile, attr, X
$f14a## .byt $01,$08,$2f,$00,$00
$f14f## .byt $00
$f150##; Frame 4
\ .byt 3
$f151## .byt $04,$00,$07,$00,$0f
$f156## .byt $08,$00,$03,>$0300,<$0300,>$ff00,<$ff00,>$00,<$00,>$00,<$00,$f6,$00,$fe,$05; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f165## .byt $01,$fe,$24,$81,$f6
$f16a## .byt $01,$fe,$25,$81,$fe
$f16f## .byt $01,$00,$17,$00,$00; Y, tile, attr, X
$f174## .byt $01,$08,$18,$00,$00
$f179## .byt $00
$f17a##; Frame 5
\ .byt 6
$f17b## .byt $04,$fc,$07,$00,$0f
$f180## .byt $08,$00,$03,>$0300,<$0300,>$ff00,<$ff00,>$00,<$00,>$00,<$00,$00,$05,$f4,$ff; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f18f## .byt $01,$f4,$0f,$41,$00
$f194## .byt $01,$fc,$10,$41,$00
$f199## .byt $01,$00,$13,$00,$f8; Y, tile, attr, X
$f19e## .byt $01,$00,$14,$00,$00
$f1a3## .byt $01,$08,$15,$00,$f8
$f1a8## .byt $01,$08,$16,$00,$00
$f1ad## .byt $00
$f1ae##; Frame 6
\ .byt 4
$f1af## .byt $04,$00,$07,$00,$0f
$f1b4## .byt $01,$fc,$11,$01,$00
$f1b9## .byt $01,$04,$12,$01,$00
$f1be## .byt $01,$00,$17,$00,$00; Y, tile, attr, X
$f1c3## .byt $01,$08,$18,$00,$00
$f1c8## .byt $00
$f1c9##; End of animation
\ .byt $00
$f1ca#anim_sinbad_up_tilt#
\; Frame 1
\ .byt 16
$f1cb## .byt $04,$00,$07,$00,$0f; left, right, top, bottom
$f1d0## .byt $08,$01,$06,>$00,<$00,>$fa00,<$fa00,>$00,<$00,>$fff8,<$fff8,$02,$07,$f4,$ff; enabled, damages, base_h, base_v, force_h, force_v, left, right, top, bottom
$f1df## .byt $01,$f4,$0f,$01,$00; Y, tile, attr, X
$f1e4## .byt $01,$fc,$10,$01,$00
$f1e9## .byt $01,$00,$3d,$00,$00
$f1ee## .byt $01,$08,$3e,$00,$00
$f1f3## .byt $00
$f1f4##; Frame 2
\ .byt 4
$f1f5## .byt $04,$00,$07,$00,$0f; left, right, top, bottom
$f1fa## .byt $01,$fc,$0f,$01,$00; Y, tile, attr, X
$f1ff## .byt $01,$00,$10,$01,$00
$f204## .byt $01,$00,$3d,$00,$00
$f209## .byt $01,$08,$3e,$00,$00
$f20e## .byt $00
$f20f##; End of animation
\ .byt $00
$f210#anim_sinbad_victory#
\; Frame 1
\ .byt 32
$f211## .byt $01,$f9,$49,$01,$00; Y, tile, attr, X
$f216## .byt $01,$00,$45,$00,$00
$f21b## .byt $01,$08,$46,$00,$00
$f220## .byt $00
$f221##; Frame 2
\ .byt 32
$f222## .byt $01,$f9,$49,$01,$ff; Y, tile, attr, X
$f227## .byt $01,$00,$45,$40,$00
$f22c## .byt $01,$08,$46,$40,$00
$f231## .byt $00
$f232##; End of animation
\ .byt $00
$f233#anim_sinbad_defeat#
\; Frame 1
\ .byt 32
$f234## .byt $01,$00,$45,$40,$00; Y, tile, attr, X
$f239## .byt $01,$08,$46,$40,$00
$f23e## .byt $00
$f23f##; Frame 2
\ .byt 32
$f240## .byt $01,$00,$47,$40,$00; Y, tile, attr, X
$f245## .byt $01,$08,$48,$40,$00
$f24a## .byt $00
$f24b##; End of animation
\ .byt $00
$f24c#anim_sinbad_shielding_full#
\; Frame 1
\ .byt 4
$f24d## .byt $04,$fc,$0b,$00,$0f
$f252## .byt $11,$00,$59,$01,$fc; Y, tile, attr, X
$f257## .byt $11,$00,$59,$41,$04
$f25c## .byt $11,$08,$59,$81,$fc
$f261## .byt $11,$08,$59,$c1,$04
$f266## .byt $01,$00,$00,$00,$00
$f26b## .byt $01,$08,$01,$00,$00
$f270## .byt $00
$f271##; Frame 2
\ .byt 1
$f272## .byt $04,$fc,$0b,$00,$0f
$f277## .byt $11,$00,$5a,$01,$fc; Y, tile, attr, X
$f27c## .byt $11,$00,$5a,$41,$04
$f281## .byt $11,$08,$5a,$81,$fc
$f286## .byt $11,$08,$5a,$c1,$04
$f28b## .byt $01,$00,$00,$00,$00
$f290## .byt $01,$08,$01,$00,$00
$f295## .byt $00
$f296##; End of animation
\ .byt $00
$f297#anim_sinbad_shielding_partial#
\; Frame 1
\ .byt 4
$f298## .byt $04,$fc,$0b,$00,$0f
$f29d## .byt $11,$00,$5b,$01,$fc; Y, tile, attr, X
$f2a2## .byt $11,$00,$5b,$41,$04
$f2a7## .byt $11,$08,$5b,$81,$fc
$f2ac## .byt $11,$08,$5b,$c1,$04
$f2b1## .byt $01,$00,$00,$00,$00
$f2b6## .byt $01,$08,$01,$00,$00
$f2bb## .byt $00
$f2bc##; Frame 2
\ .byt 1
$f2bd## .byt $04,$fc,$0b,$00,$0f
$f2c2## .byt $11,$00,$5c,$01,$fc; Y, tile, attr, X
$f2c7## .byt $11,$00,$5c,$41,$04
$f2cc## .byt $11,$08,$5c,$81,$fc
$f2d1## .byt $11,$08,$5c,$c1,$04
$f2d6## .byt $01,$00,$00,$00,$00
$f2db## .byt $01,$08,$01,$00,$00
$f2e0## .byt $00
$f2e1##; End of animation
\ .byt $00
$f2e2#anim_sinbad_shielding_limit#
\; Frame 1
\ .byt 4
$f2e3## .byt $04,$fc,$0b,$00,$0f
$f2e8## .byt $11,$00,$5d,$01,$fc; Y, tile, attr, X
$f2ed## .byt $11,$00,$5d,$41,$04
$f2f2## .byt $11,$08,$5d,$81,$fc
$f2f7## .byt $11,$08,$5d,$c1,$04
$f2fc## .byt $01,$00,$00,$00,$00
$f301## .byt $01,$08,$01,$00,$00
$f306## .byt $00
$f307##; Frame 2
\ .byt 1
$f308## .byt $04,$fc,$0b,$00,$0f
$f30d## .byt $11,$00,$5e,$01,$fc; Y, tile, attr, X
$f312## .byt $11,$00,$5e,$41,$04
$f317## .byt $11,$08,$5e,$81,$fc
$f31c## .byt $11,$08,$5e,$c1,$04
$f321## .byt $01,$00,$00,$00,$00
$f326## .byt $01,$08,$01,$00,$00
$f32b## .byt $00
$f32c##; End of animation
\ .byt $00
$f32d#anim_sinbad_respawn#
\; Frame 1
\ .byt 2
$f32e## .byt $04,$00,$07,$00,$0f
$f333## .byt $11,$07,$02,$01,$fa; Y, tile, attr, X
$f338## .byt $11,$07,$03,$01,$02
$f33d## .byt $11,$00,$00,$00,$00
$f342## .byt $11,$08,$01,$00,$00
$f347## .byt $01,$0e,$5f,$00,$fc
$f34c## .byt $01,$0e,$5f,$40,$04
$f351## .byt $00
$f352##; Frame 2
\ .byt 1
$f353## .byt $04,$00,$07,$00,$0f
$f358## .byt $11,$07,$02,$01,$fa; Y, tile, attr, X
$f35d## .byt $11,$07,$03,$01,$02
$f362## .byt $11,$00,$00,$00,$00
$f367## .byt $11,$08,$01,$00,$00
$f36c## .byt $01,$0e,$60,$00,$fc
$f371## .byt $01,$0e,$60,$40,$04
$f376## .byt $00
$f377##; End of animation
\ .byt $00
$f378#music_main_square1#
\; 10
\;TIMED_O3_E(4)
\;TIMED_O3_E(4)
\;TIMED_O3_E(10)
\;TIMED_O3_C(10)
\;AUDIO_SILENCE(12)
\;TIMED_O3_E(4)
\;TIMED_O3_E(4)
\;TIMED_O3_E(10)
\;TIMED_O3_C(10)
\;AUDIO_SILENCE(12)
\;TIMED_O3_E(4)
\;TIMED_O3_E(4)
\ .byt $00,(22<<3)'01($013a>>8),($013a^$ff)
$f37b## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f37e## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f381## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f384## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f387## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f38a## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f38d## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f390## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f393## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f396## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f399## .byt $00,(10<<3)'01($0129>>8),($0129^$ff)
$f39c##; 11
\ .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f39f## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f3a2## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f3a5## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f3a8## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f3ab## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3ae## .byt $00,(4<<3)'01($0161>>8),($0161^$ff)
$f3b1## .byt $00,(4<<3)'01($0161>>8),($0161^$ff)
$f3b4## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3b7## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3ba## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3bd## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3c0## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3c3## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3c6## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f3c9## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f3cc## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f3cf## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f3d2## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f3d5## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f3d8## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f3db## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f3de## .byt $00,(10<<3)'01($013a>>8),($013a^$ff)
$f3e1## .byt $00,(9<<3)'01($013a>>8),($013a^$ff)
$f3e4## .byt $02,$00,$00
$f3e7#music_main_square2#
\; 10
\;AUDIO_SILENCE(3)
\;G3 4
\;G3 10
\;E3 10
\;AUDIO_SILENCE(12)
\;...
\; 1081
\ .byt $00,(22<<3)'01($01d7>>8),($01d7^$ff)
$f3ea## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f3ed## .byt $00,(10<<3)'01($9d>>8),($9d^$ff)
$f3f0## .byt $00,(10<<3)'01($94>>8),($94^$ff)
$f3f3## .byt $00,(4<<3)'01($01d7>>8),($01d7^$ff)
$f3f6## .byt $00,(4<<3)'01($01d7>>8),($01d7^$ff)
$f3f9## .byt $00,(10<<3)'01($9d>>8),($9d^$ff)
$f3fc## .byt $00,(10<<3)'01($b0>>8),($b0^$ff)
$f3ff## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f402## .byt $00,(4<<3)'01($018c>>8),($018c^$ff)
$f405## .byt $00,(4<<3)'01($018c>>8),($018c^$ff)
$f408## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f40b##; 11
\ .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f40e## .byt $00,(10<<3)'01($b0>>8),($b0^$ff)
$f411## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f414## .byt $00,(10<<3)'01($01a4>>8),($01a4^$ff)
$f417## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f41a## .byt $00,(10<<3)'01($01a4>>8),($01a4^$ff)
$f41d## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f420## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f423## .byt $00,(10<<3)'01($01a4>>8),($01a4^$ff)
$f426## .byt $00,(10<<3)'01($b0>>8),($b0^$ff)
$f429## .byt $00,(10<<3)'01($9d>>8),($9d^$ff)
$f42c## .byt $00,(10<<3)'01($b0>>8),($b0^$ff)
$f42f## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f432## .byt $00,(10<<3)'01($01a4>>8),($01a4^$ff)
$f435## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f438## .byt $00,(4<<3)'01($01d7>>8),($01d7^$ff)
$f43b## .byt $00,(4<<3)'01($01d7>>8),($01d7^$ff)
$f43e## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f441## .byt $00,(10<<3)'01($01a4>>8),($01a4^$ff)
$f444## .byt $00,(10<<3)'01($c6>>8),($c6^$ff)
$f447## .byt $00,(4<<3)'01($01d7>>8),($01d7^$ff)
$f44a## .byt $00,(4<<3)'01($01d7>>8),($01d7^$ff)
$f44d## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f450## .byt $00,(9<<3)'01($0108>>8),($0108^$ff)
$f453## .byt $02,$00,$00
$f456#music_main_triangle#
\ .byt $00,(0<<3)'01($01d7>>8),($01d7^$ff)
$f459## .byt $00,(0<<3)'01($0161>>8),($0161^$ff)
$f45c## .byt $00,(0<<3)'01($0349>>8),($0349^$ff)
$f45f## .byt $00,(0<<3)'01($0211>>8),($0211^$ff)
$f462## .byt $00,(0<<3)'01($0275>>8),($0275^$ff)
$f465## .byt $00,(0<<3)'01($0319>>8),($0319^$ff)
$f468## .byt $00,(0<<3)'01($0692>>8),($0692^$ff)
$f46b## .byt $00,(0<<3)'01($0760>>8),($0760^$ff)
$f46e## .byt $00,(0<<3)'01($0423>>8),($0423^$ff)
$f471## .byt $00,(0<<3)'01($04a5>>8),($04a5^$ff)
$f474## .byt $01,1,$00
$f477## .byt $00,(8<<3)'01($03b0>>8),($03b0^$ff)
$f47a## .byt $01,1,$00
$f47d## .byt $02,$00,$00
$f480#music_gameover_square1#
\; 00
\ .byt $00,(22<<3)'01($0211>>8),($0211^$ff)
$f483## .byt $00,(10<<3)'01($018c>>8),($018c^$ff)
$f486## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f489## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f48c## .byt $00,(10<<3)'01($013a>>8),($013a^$ff)
$f48f## .byt $00,(10<<3)'01($018c>>8),($018c^$ff)
$f492## .byt $00,(10<<3)'01($0211>>8),($0211^$ff)
$f495## .byt $00,(10<<3)'01($018c>>8),($018c^$ff)
$f498## .byt $00,(22<<3)'01($0129>>8),($0129^$ff)
$f49b## .byt $00,(10<<3)'01($0129>>8),($0129^$ff)
$f49e## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f4a1## .byt $00,(4<<3)'01($013a>>8),($013a^$ff)
$f4a4## .byt $00,(10<<3)'01($013a>>8),($013a^$ff)
$f4a7## .byt $00,(10<<3)'01($018c>>8),($018c^$ff)
$f4aa## .byt $00,(10<<3)'01($0211>>8),($0211^$ff)
$f4ad## .byt $00,(9<<3)'01($018c>>8),($018c^$ff)
$f4b0## .byt $02,$00,$00
$f4b3#music_gameover_square2#
\; 00
\ .byt $00,(22<<3)'01($018c>>8),($018c^$ff)
$f4b6## .byt $00,(10<<3)'01($013a>>8),($013a^$ff)
$f4b9## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f4bc## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f4bf## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f4c2## .byt $00,(10<<3)'01($013a>>8),($013a^$ff)
$f4c5## .byt $00,(10<<3)'01($0161>>8),($0161^$ff)
$f4c8## .byt $00,(10<<3)'01($013a>>8),($013a^$ff)
$f4cb## .byt $00,(22<<3)'01($01d7>>8),($01d7^$ff)
$f4ce## .byt $00,(10<<3)'01($01d7>>8),($01d7^$ff)
$f4d1## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f4d4## .byt $00,(4<<3)'01($0108>>8),($0108^$ff)
$f4d7## .byt $00,(10<<3)'01($0108>>8),($0108^$ff)
$f4da## .byt $00,(10<<3)'01($013a>>8),($013a^$ff)
$f4dd## .byt $00,(10<<3)'01($0161>>8),($0161^$ff)
$f4e0## .byt $00,(9<<3)'01($0161>>8),($0161^$ff)
$f4e3## .byt $02,$00,$00
$f4e6#music_gameover_triangle#
\; 00
\ .byt $00,(31<<3)'01($0349>>8),($0349^$ff)
$f4e9## .byt $00,(31<<3)'01($0349>>8),($0349^$ff)
$f4ec## .byt $00,(30<<3)'01($0349>>8),($0349^$ff)
$f4ef## .byt $01,0,$00
$f4f2## .byt $00,(31<<3)'01($0252>>8),($0252^$ff)
$f4f5## .byt $00,(14<<3)'01($0252>>8),($0252^$ff)
$f4f8## .byt $01,0,$00
$f4fb## .byt $00,(31<<3)'01($0211>>8),($0211^$ff)
$f4fe## .byt $00,(14<<3)'01($0211>>8),($0211^$ff)
$f501## .byt $01,0,$00
$f504## .byt $02,$00,$00
$f507#credits_begin#
\;
\; Credits in the rom
\;
\
\ .asc "             credits",$0a
$f51c## .asc $0a
$f51d## .asc "             authors",$0a
$f532## .asc $0a
$f533## .asc "sylvain gadrat",$0a
$f542## .asc $0a
$f543## .asc "           art sources",$0a
$f55a## .asc $0a
$f55b## .asc "bomb party",$0a
$f566## .asc "    by matt hackett of",$0a
$f57d## .asc "    lost decade games",$0a
$f593## .asc "twin dragons",$0a
$f5a0## .asc "    by surt",$0a
$f5ac## .asc "sinbad",$0a
$f5b3## .asc "    by zi ye",$0a
$f5c0## .asc "perihelium",$0a
$f5cb## .asc "    by ozzed"
$f5d7## .asc $0a
$f5d8## .asc "             thanks",$0a
$f5ec## .asc $0a
$f5ed## .asc "benoit ryder",$0a
$f5fa## .byt $00
$f5fb#credits_end#
\;
\; Print some PRG-ROM space usage information
\;
\;
\; Fill code bank and set entry points vectors (also from nesmine)
\;
\ .dsb $fffa-*,0      ;aligning
$fffa## .word nmi                ;entry point for VBlank interrupt  (NMI)
$fffc## .word reset                ;entry point for program start     (RESET)
$fffe## .word cursed                ;entry point for masking interrupt (IRQ)
